@{
    Layout = "~/Areas/Core/Views/Shared/_Layout.cshtml";
}

@section head {
    <style>
        .tree-file {
            background-image: none;
        }

        .panel-body {
            padding: 0px !important;
        }

        .tabs-panels {
            border-style: none !important;
        }

        .wordpage {
            margin: 20px;
            background-color: #FFFFFF;
            -moz-box-shadow: 0px 0px 7px #808080;
            -webkit-box-shadow: 0px 0px 7px #808080;
            box-shadow: 0px 0px 7px #808080;
        }

        #divSpecPlan .panel-body {
            border-width: 1px;
            border-style: solid;
        }

        #divSpecPlan td[field="TaskNames"] > div > span {
            display: table-cell;
            vertical-align: middle;
        }

            #divSpecPlan td[field="TaskNames"] > div > span.tree-hit,
            #divSpecPlan td[field="TaskNames"] > div > span.tree-line,
            #divSpecPlan td[field="TaskNames"] > div > span.tree-join,
            #divSpecPlan td[field="TaskNames"] > div > span.tree-indent,
            #divSpecPlan td[field="TaskNames"] > div > span.tree-joinbottom {
                width: 16px;
                border-color: #fafafa;
                border-style: solid;
                border-width: 5px 0 5px 0;
            }

        #divSpecPlan tr.datagrid-row-selected td[field="TaskNames"] > div > span.tree-hit,
        #divSpecPlan tr.datagrid-row-selected td[field="TaskNames"] > div > span.tree-line,
        #divSpecPlan tr.datagrid-row-selected td[field="TaskNames"] > div > span.tree-join,
        #divSpecPlan tr.datagrid-row-selected td[field="TaskNames"] > div > span.tree-indent,
        #divSpecPlan tr.datagrid-row-selected td[field="TaskNames"] > div > span.tree-joinbottom {
            border-color: #85BDE2;
        }

        #divSpecPlan tr.datagrid-row-over td[field="TaskNames"] > div > span.tree-hit,
        #divSpecPlan tr.datagrid-row-over td[field="TaskNames"] > div > span.tree-line,
        #divSpecPlan tr.datagrid-row-over td[field="TaskNames"] > div > span.tree-join,
        #divSpecPlan tr.datagrid-row-over td[field="TaskNames"] > div > span.tree-indent,
        #divSpecPlan tr.datagrid-row-over td[field="TaskNames"] > div > span.tree-joinbottom {
            border-color: #85BDE2;
        }
    </style>
    <style>
        .btn-medium {
            padding: 5px 15px;
            font-size: 18px;
            color: white !important;
        }

        .pageheader {
            text-align: center;
        }

            .pageheader h1 {
                font-size: 24px;
                font-weight: bold;
                padding: 20px 10px 10px 10px;
            }

        .pagefoot {
            text-align: center;
            padding: 10px 10px 20px 10px;
        }

            .pagefoot .l-btn-text {
                vertical-align: middle !important;
            }

            .pagefoot .btn-blue {
                background: -webkit-linear-gradient(top,#67c2ff 0,#3d93cf 100%);
                background: -moz-linear-gradient(top,#67c2ff 0,#3d93cf 100%);
                background: -o-linear-gradient(top,#67c2ff 0,#3d93cf 100%);
                background: linear-gradient(top,#67c2ff 0,#3d93cf 100%);
                border: none;
            }

            .pagefoot .btn-green {
                background: -webkit-linear-gradient(top,#6cd2b7 0,#69a898 100%);
                background: -moz-linear-gradient(top,#6cd2b7 0,#69a898 100%);
                background: -o-linear-gradient(top,#6cd2b7 0,#69a898 100%);
                background: linear-gradient(top,#6cd2b7 0,#69a898 100%);
                border: none;
            }

            .pagefoot .btn-blue:hover {
                background: #3d93cf;
            }

            .pagefoot .btn-green:hover {
                background: #69a898;
            }

        .ml-10 {
            margin-left: 10px;
        }

        .mr-10 {
            margin-right: 10px;
        }

        .datagrid-toolbar {
            background-color: #ddd;
        }
    </style>
}

@section Body_Content{

    <div class="easyui-layout" data-options="fit:true">
        <div data-options="region:'north',border:false" style="border-bottom-width:1px;overflow:hidden">
            <div style="height:30px;padding:5px;">
                <div style="float:left;margin-left:5px;">
                    <a class="easyui-linkbutton" data-options="plain:true,iconCls:'fa fa-save fa-lg'" onclick="SaveSpecPlanInfo()">保存</a>
                    <a class="easyui-linkbutton" data-options="plain:true,iconCls:'fa fa-sitemap fa-lg'" onclick="ShowProjectProgress()">查看进度</a>
                </div>
                <div style="float:right;margin-right:5px;margin-top:7px;">
                    节点状态：
                    <span class="node-example node-status-0-bg">未启动</span>
                    <span class="node-example node-status-1-bg">已安排</span>
                    <span class="node-example node-status-2-bg">进行中</span>
                    <span class="node-example node-status-3-bg">已完成</span>
                    <span class="node-example node-status-4-bg">已回退</span>
                </div>
            </div>
        </div>
        <div data-options="region:'center',border:false">
            <div class="nowordpage">
                <div class="pageheader">
                    @*<h1>项目计划单</h1>*@
                    <div class="row-fluid-wrap">
                        <ul class="clearfix ul-fluid ">
                            <li class="">
                                <div class="list-wrap">
                                    <div class="line"></div>
                                    <a href="#"><div class="small-tag">1</div></a>
                                    <div class="line"></div>
                                </div>
                                <div class="clearfix"></div>
                                <p>计划要求</p>
                            </li>
                            <li class="">
                                <div class="list-wrap">
                                    <div class="line"></div>
                                    <a href="#"><div class="small-tag">2</div></a>
                                    <div class="line"></div>
                                </div>
                                <div class="clearfix"></div>
                                <p>项目策划</p>
                            </li>
                            <li class="">
                                <div class="list-wrap">
                                    <div class="line"></div>
                                    <a href="#"><div class="small-tag">4</div></a>
                                    <div class="line"></div>
                                </div>
                                <div class="clearfix"></div>
                                <p>提资策划</p>
                            </li>
                            <li class="">
                                <div class="list-wrap">
                                    <div class="line"></div>
                                    <a href="#"><div class="small-tag">3</div></a>
                                    <div class="line"></div>
                                </div>
                                <div class="clearfix"></div>
                                <p>专业策划</p>
                            </li>
                            <li class="">
                                <div class="list-wrap">
                                    <div class="line"></div>
                                    <a href="#"><div class="small-tag">5</div></a>
                                    <div class="line"></div>
                                </div>
                                <div class="clearfix"></div>
                                <p>关键节点</p>
                            </li>
                        </ul>
                    </div>
                </div>

                <div id="divSpecPlan" style="margin:20px;">
                </div>

            </div>
        </div>
    </div>
    <script src="@Url.Content("~/Scripts/JQ/DesFlow.js")" type="text/javascript"></script>

    <script type="text/javascript">

        Array.prototype.indexOf = function (oValue) {
            /// <summary>在数组中查找对应值，返回所在位置</summary>
            /// <param name="oValue" type="Object">要进行匹配的对象</param>
            var n = -1;
            for (var i = 0; i < this.length; i++) {
                if (this[i] == oValue) {
                    n = i;
                    break;
                }
            }
            return n;
        };

        Array.prototype.isIndexOf = function (oValue) {
            /// <summary>在数组中查找有无对应值</summary>
            /// <param name="oValue" type="Object">要进行匹配的对象</param>
            return this.indexOf(oValue) == -1 ? false : true;
        };



        var _webconfig = {
            serverUrl: '@Url.Content("~")'
        };

        var _enum_Design_NodeType_专业 = @((int)DataModel.NodeType.专业);
        var _enum_Design_NodeType_设计 = @((int)DataModel.NodeType.设计);
        var _enum_Design_NodeType_审定 =@((int)DataModel.NodeType.批准);

        var _enum_Design_TaskStatus_未启动 = @((int)DBSql.Design.TaskStatus.未启动);
        var _enum_Design_TaskStatus_已安排 = @((int)DBSql.Design.TaskStatus.已安排);
        var _enum_Design_TaskStatus_进行中 = @((int)DBSql.Design.TaskStatus.进行中);
        var _enum_Design_TaskStatus_已完成 = @((int)DBSql.Design.TaskStatus.已完成);
        var _enum_Design_TaskStatus_已停止 = @((int)DBSql.Design.TaskStatus.已停止);

        var _enum_Design_FlowNodeStatus_未安排 = @((int)DBSql.Design.FlowNodeStatus.未安排);
        var _enum_Design_FlowNodeStatus_已安排 = @((int)DBSql.Design.FlowNodeStatus.已安排);

        var _enum_Design_TaskLevelType_层级父 = @((int)DBSql.Design.TaskLevelType.层级父);

        var _currentUserId = @ViewBag.currentUserId;
        var _taskSpecId = @ViewBag.taskSpecId;
        var _projID = @ViewBag.projID;
        var _taskGroupId = @ViewBag.taskGroupId;
        var _taskGroupEmpID = @ViewBag.TaskGroupModel.TaskGroupEmpID;
        var XMFFZR=@ViewBag.FXMFZR;
        var _projEmpId = @ViewBag.projEmpId;
        var _projEmpName = '@Html.Raw(ViewBag.projEmpName)';

        var _permission = @Html.Raw(ViewBag.permission);
        var _mainTabsUsed = @Html.Raw(ViewBag.mainTabsUsed);
        var _DesFlow=@Html.Raw(ViewBag.DesFlow); // 可用生产流程列表
        var _Qualification=@Html.Raw(ViewBag.Qualification); // 普通生产流程人员资格列表


        var _tempTaskId=0; // 页面上新创建任务的临时ID
        var _SpecPlanData; // 专业策划数据

        var tabId = 0;
        var tabNum = 0;

        var tabs = [
            _webconfig.serverUrl + 'Design/DesTask/PlanTableInfo?projID={0}&taskGroupId={1}&taskSpecId={2}'.format(_projID, _taskGroupId, _taskSpecId),
            _webconfig.serverUrl + 'Design/DesTask/ProjectPlanInfo?projID={0}&taskGroupId={1}&taskSpecId={2}'.format(_projID, _taskGroupId, _taskSpecId),
            _webconfig.serverUrl + 'Design/DesExch/ExchPlanInfo?projID={0}&taskGroupId={1}&taskSpecId={2}'.format(_projID, _taskGroupId, _taskSpecId),
            _webconfig.serverUrl + 'Design/DesTask/SpecPlanInfo?projID={0}&taskGroupId={1}&taskSpecId={2}'.format(_projID, _taskGroupId, _taskSpecId),
            _webconfig.serverUrl + 'Design/DesTask/ProjectGantt?projID={0}&taskGroupId={1}&taskSpecId={2}'.format(_projID, _taskGroupId, _taskSpecId)
        ];

        // 获取流程
        function GetDesFlow(SpecId,leveType) {
            if (SpecId==0) {
                //汇总专业
                return Enumerable.From(_DesFlow).Where("x=>x.FlowSpecType==1&&x.FlowLevelType==" +leveType +"").FirstOrDefault();
            }
            else {
                //普通专业
                return Enumerable.From(_DesFlow).Where("x=>x.FlowSpecType==0&&x.FlowLevelType==" +leveType +"").FirstOrDefault();
            }
        }

        // 格式化时间，并且 1900 返回空
        function checkDate(strDate, strFormat) {
            var jd = Date.jsonStringToDate(strDate);
            if (jd.getFullYear() == 1900) return "";
            return jd.format(strFormat);
        }

        // 检测是否有关联任务
        function checkRelation(oSender) {
            // 只有汇总专业中的任务才需要做这个判断
            if (oSender.TaskSpecId != 0) return false;
            // 遍历各专业表格
            var hasSumChild = false;
            $.each($("table[id^='Spec_']"),function (n,t) {
                if (hasSumChild == true) return;
                var $grid=$(this);
                if ($grid.attr("id") == 'Spec_0') {
                    hasSumChild = false;
                    return;
                }
                var rowData=$grid.treegrid("getData");
                // 遍历表格行，保存任务数据
                $.each(rowData,function (i,e) {
                    if (hasSumChild == true) return;
                    if (e.TaskNextFlowNodeId == oSender.Id) {
                        hasSumChild = true;
                        return;
                    }
                });
            });
            return hasSumChild;
        }

        // 验证任务行数据
        function checkTaskValist(id) {
            var result =true;
            if (!$("input[taskName][rootId='"+id+"']").textbox("isValid")) {
                var winHeight=document.documentElement.clientHeight
                var _top =$("input[taskName][rootId='"+id+"']").next().offset().top-(winHeight/2);
                $("input[taskName][rootId='"+id+"']").textbox("textbox").focus();
                $("#divSpecPlan").parent()[0].scrollTop=_top;
                result=false;
                return false;
            }
            if (!$("input[dateStart][rootId='"+id+"']").datebox("isValid")) {
                var winHeight=document.documentElement.clientHeight
                var _top =$("input[dateStart][rootId='"+id+"']").next().offset().top-(winHeight/2);
                $("#divSpecPlan").parent()[0].scrollTop=_top;
                $("input[dateStart][rootId='"+id+"']").datebox("textbox").focus();
                result=false;
                return false;
            }
            if (!$("input[dateEnd][rootId='"+id+"']").datebox("isValid")) {
                var winHeight=document.documentElement.clientHeight
                var _top =$("input[dateEnd][rootId='"+id+"']").next().offset().top-(winHeight/2);
                $("#divSpecPlan").parent()[0].scrollTop=_top;
                $("input[dateEnd][rootId='"+id+"']").datebox("textbox").focus();
                result=false;
                return false;
            }

            $.each($("div[empPlan][rootId='"+id+"']").find("select"),function (i,e) {
                if (!result) {
                    result=false;
                    return false;
                }
                if (!$(e).combobox("isValid")) {
                    var winHeight=document.documentElement.clientHeight
                    var _top =$(e).next().offset().top-(winHeight/2);
                    $("#divSpecPlan").parent()[0].scrollTop=_top;
                    //$(e).combobox("textbox").focus();
                    JQ.dialog.show("人员选择失败！");
                    result=false;
                    return false;
                }

            })

            return result;
        }

        // 显示专业面板
        function createSpecPlan() {
            debugger;
            _tempTaskId=0;//初始化
            $.getJSON(_webconfig.serverUrl + 'Design/DesTask/SpecPlanInfoGetSpecPlanDataJson?taskGroupId={0}&taskSpecId={1}'.format(_taskGroupId, _taskSpecId),function (data) {
                _SpecPlanData=data.rows;
                var SpecArray=Enumerable.From(_SpecPlanData).Where("x=>x.TaskType==1").ToArray();
                var $divContain=$("#divSpecPlan");//显示容器
                $.each(SpecArray,function (fatherIdIndex,fatherIdData) {

                    //生成专业面板工具栏
                    var $toolbar=$("<div id=\"bar_"+fatherIdData.TaskSpecId+"\" style=\"padding:5px;height:auto;\"></div>");
                    $toolbar.appendTo($divContain);
                    createSpecToolbar($toolbar,fatherIdData);

                    //生成专业内任务列表（树状列表）
                    var $tableEle=$("<table id=\"Spec_"+fatherIdData.TaskSpecId+"\" style=\"width:99%\"></table>");
                    $tableEle.appendTo($divContain);
                    createSpecTreeGrid($tableEle,fatherIdData);

                    //各专业面板之间预留空隙
                    var $divpadding=$("<div style=\"padding-top:30px\"></div>");
                    $divpadding.appendTo($divContain);

                })

            }).error(function () {
                JQ.dialog.warning("专业策划获取数据失败！！！");
            })
        }

        // 添加toolbar
        function createSpecToolbar($toolbar, fatherData) {
            //显示专业名称
            var $toolbarPanel = $("<span JQPanel=\"toolbarPanel\"></span>");
            $("<span style=\"font-weight:bold;display:inline-block;width:120px;text-overflow:ellipsis;\"><strong style=\"padding:10px;\">"+fatherData.TaskName+"</strong></span>").appendTo($toolbarPanel);
            $("<span style=\"font-weight:bold;display:inline-block;width: 80px;text-overflow:ellipsis;\"><strong style=\"padding:10px;\"><i class=\"fa fa-user\"></i>&nbsp;"+fatherData.TaskEmpName+"</strong></span>").appendTo($toolbarPanel);
            $("<span style=\"font-weight:bold;display:inline-block;width:200px;text-overflow:ellipsis;\"><strong style=\"padding:10px;\"><i class=\"fa fa-calendar\"></i>&nbsp;" + checkDate(fatherData.DatePlanStart, "yyyy-MM-dd") + " ~ " + checkDate(fatherData.DatePlanFinish, "yyyy-MM-dd") +"</strong></span>").appendTo($toolbarPanel);
            $("<span class='datagrid-btn-separator' style='padding-right:5px;vertical-align: middle; height: 22px;display:inline-block;float:none'></span>").appendTo($toolbarPanel);
            if (_taskGroupEmpID == _currentUserId|| XMFFZR==_currentUserId|| fatherData.TaskEmpID == _currentUserId || _permission.indexOf("alledit") > -1) {
                if (1==1) {
                    //if (fatherData.TaskName != "测量" && fatherData.TaskName != "物探" && fatherData.TaskName != "勘探" && fatherData.TaskName != "勘测") {
                    // 如果你是项目负责人、专业的负责人，或者你拥有该模块的维护权。
                    $("<a class=\"easyui-linkbutton\" data-options=\"plain:true,iconCls:'fa fa-list fa-lg'\" onclick='AddTaskFather(" + fatherData.TaskSpecId + ")'>添加任务</a>").appendTo($toolbarPanel);
                    $("<a class=\"easyui-linkbutton\" data-options=\"plain:true,iconCls:'fa fa-indent fa-lg'\" onclick='AddTaskChild(" + fatherData.TaskSpecId + ")'>添加子任务</a>").appendTo($toolbarPanel);
                }

                if (fatherData.TaskSpecId == 0) {
                    $("<a class=\"easyui-linkbutton jq-btn-success\" data-options=\"plain:true,iconCls:'fa fa-code-fork fa-lg'\" onclick='AddSummaryChild("+fatherData.TaskSpecId+")'>设置关联任务</a>").appendTo($toolbarPanel);
                }
            }
            $toolbarPanel.appendTo($toolbar);
        }

        // 生成专业内任务列表（树状列表）
        function createSpecTreeGrid($tableEle,fatherIdData) {
            var childData=Enumerable.From(_SpecPlanData).Where("x=>x.TaskSpecId=="+fatherIdData.TaskSpecId+"&&x.TaskType==0").OrderBy("x=>x.TaskPath").ToArray();
            if (_taskGroupEmpID == _currentUserId || fatherIdData.TaskEmpID == _currentUserId || _permission.indexOf("alledit")>-1) {
                // 如果你是项目负责人、专业的负责人，或者你拥有该模块的维护权。
                JQ.treegrid.treegrid({
                    toolbar: '#bar_'+fatherIdData.TaskSpecId,
                    JQPrimaryID: 'Id',//主键的字段
                    JQID: "Spec_"+fatherIdData.TaskSpecId,//数据表格ID
                    JQLoadingType: 'treegrid',//数据表格类型 [datagrid,datagrid]
                    checkOnSelect:false,
                    selectOnCheck:false,
                    idField: 'Id',
                    treeField: 'TaskNames',
                    fit:false,
                    collapsible:true,
                    lines: true,
                    data:{rows:childData},
                    rownumbers: false,
                    //frozenColumns: [[  ]],
                    columns: [[
                        { title: 'ID', field: 'Id', width: 50, align: 'center' },
                        { field: 'ck', align: 'center', checkbox: true, JQIsExclude: true },
                        { title: '任务名称', field: 'TaskNames', width: 340, align: 'left',halign:'center',formatter:function (value,row,index) {
                            debugger
                            return "<input  rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' taskNumber placeholder=\"任务编号\" style=\"width:100px\" value='"+row.TaskNumber.escapeHTML()+"' ></input>&nbsp;" +
                                   "<input  rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' taskName placeholder=\"任务名称\" style=\"width:170px\" value='"+row.TaskName.escapeHTML()+"' ></input>";
                        }},
                        { title: '生产节点人员安排', field: '12', width: 620, align: 'left',halign:'center',formatter:function (value,row,index) {
                            return "<div class=\"swipe\"><div empPlan rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' class=\"approve-progress\" remark='0'></div></div>";
                        } },
                        { title: '计划开始', field: 'DatePlanStart', width: 105, align: 'left',halign:'center',formatter:function (value,row,index) {
                            return "<input rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' dateStart style=\"width:98%\" value='"+row.DatePlanStart+"' ></input>";
                        } },
                        { title: '计划完成', field: 'DatePlanFinish', width: 105, align: 'left',halign:'center',formatter:function (value,row,index) {
                            return "<input rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' dateEnd  style=\"width:98%\" value='"+row.DatePlanFinish+"'></input>";
                        } },
                        { title: '操作', field: '123', width: 220, align: 'left',halign:'center' ,formatter:function (value,row,index) {
                            var btnHtml="";
                            if (row.Id>0) {
                                btnHtml+="<a rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' btnEdit  onclick=\"return showTaskInfo('"+fatherIdData.TaskSpecId+"','"+row.Id+"')\"  class=\"easyui-linkbutton jq-btn-info\">查看</a> ";
                            }
                            if (row.Id > 0 && (row.TaskStatus == _enum_Design_TaskStatus_进行中 || row.TaskStatus == _enum_Design_TaskStatus_已停止)) {
                                btnHtml+="<a rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' btnChange  onclick=\"return transferTask('"+fatherIdData.TaskSpecId+"','"+row.Id+"')\"  class=\"easyui-linkbutton jq-btn-warning\">移交</a> ";
                            }
                            btnHtml+="<a rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' btn  onclick=\"delTask('"+fatherIdData.TaskSpecId+"','"+row.Id+"')\"  class=\"easyui-linkbutton jq-btn-danger\">删除</a> ";
                            return btnHtml;
                        } },
                        { title: '父任务', field: 'TaskNextFlowNodeId', width: 60, align: 'center'}
                    ]],
                    onLoadSuccess: function (row, data) {
                        if (fatherIdData.TaskName == "勘测") {
                            var data = $("#Spec_" + fatherIdData.TaskSpecId).treegrid("getData");
                            if (data.length == 0) {
                                AutoTask(fatherIdData.TaskSpecId);
                            }
                        }
                        tablebound(false, fatherIdData);
                    }
                });
            } else {
                // 你没有权限执行该操作,页面只读。
                JQ.treegrid.treegrid({
                    toolbar: '#bar_'+fatherIdData.TaskSpecId,
                    JQPrimaryID: 'Id',//主键的字段
                    JQID: "Spec_"+fatherIdData.TaskSpecId,//数据表格ID
                    JQLoadingType: 'treegrid',//数据表格类型 [datagrid,datagrid]
                    checkOnSelect:false,
                    selectOnCheck:false,
                    idField: 'Id',
                    treeField: 'TaskNames',
                    fit:false,
                    collapsible:true,
                    lines: true,
                    data:{rows:childData},
                    rownumbers: false,
                    //frozenColumns: [[  ]],
                    columns: [[
                        {title: 'ID', field: 'Id', width: 50, align: 'center'},
                        { field: 'ck', align: 'center', checkbox: true, JQIsExclude: true },
                        { title: '任务名称', field: 'TaskNames', width: 340, align: 'left',halign:'center',formatter:function (value,row,index) {
                            if (row.TaskNumber == "") {
                                row.TaskNames = "{0}".format(row.TaskName.escapeHTML());
                            } else {
                                row.TaskNames = "[{0}]{1}".format(row.TaskNumber.escapeHTML(), row.TaskName.escapeHTML());
                            }
                            return row.TaskNames;
                        }},
                        { title: '生产节点人员安排', field: '12', width: 620, align: 'left',halign:'center',formatter:function (value,row,index) {
                            return "<div class=\"swipe\"><div empPlan rootId='"+row.Id+"'  specId='"+fatherIdData.TaskSpecId+"' class=\"approve-progress\" remark='0' ></div></div>";
                        } },
                        { title: '计划开始', field: 'DatePlanStart', width: 100, align: 'center',halign:'center',formatter:JQ.tools.DateTimeFormatterByT},
                        { title: '计划完成', field: 'DatePlanFinish', width: 100, align: 'center',halign:'center',formatter:JQ.tools.DateTimeFormatterByT},
                        { title: '操作', field: '123', width: 220, align: 'left',halign:'center' ,formatter:function (value,row,index) {
                            var btnHtml="";
                            if (row.Id > 0) {
                                btnHtml+="<a rootId='"+row.Id+"' specId='"+fatherIdData.TaskSpecId+"' remark='0' btnEdit  onclick=\"return showTaskInfo('"+fatherIdData.TaskSpecId+"','"+row.Id+"')\"  class=\"easyui-linkbutton jq-btn-info\">查看</a> ";
                            }
                            return btnHtml;
                        } },
                        { title: '父任务', field: 'TaskNextFlowNodeId', width: 60, align: 'center'}
                    ]],
                    onLoadSuccess: function (row, data) {
                        tablebound(true, fatherIdData);
                    }
                });
            }
        }

        var isFirst = false;
        function AutoTask(specId) {
            isFirst = true;
            var cl = '@ViewBag.CL';
            var ck = '@ViewBag.KC';
            if (cl == 1 || ck == 1) {
                AddTask(specId, "勘测工作大纲",'1');
                AddTask(specId, "质量环境安全及技术交底",'2');
                AddTask(specId, "勘测成果",'3');
            }
        }

        // 渲染表格
        function tablebound(isRead, fatherIdData) {
            if (isRead) {
                $("a[btnEdit][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").linkbutton({iconCls: 'fa fa-info-circle fa-lg'});
                $("a[btnEdit][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
            } else {
                // 设置 任务编号 文本框
                $("input[taskNumber][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").textbox({prompt: '任务编号'});
                createTaskNumberBox($("input[taskNumber][specId='"+fatherIdData.TaskSpecId+"'][remark='0']"), fatherIdData.TaskSpecId);
                $("input[taskNumber][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
                // 设置 任务名称 文本框
                $("input[taskName][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").textbox({prompt: '任务名称', required: true});
                createTaskNameBox($("input[taskName][specId='"+fatherIdData.TaskSpecId+"'][remark='0']"), fatherIdData.TaskSpecId);
                $("input[taskName][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");

                $("input[dateStart][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").datebox({validType:['dateISO']});
                $("input[dateStart][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
                $("input[dateEnd][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").datebox({validType:['dateISO']});
                $("input[dateEnd][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
                $("a[btn][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").linkbutton({iconCls: 'fa fa-trash fa-lg'});
                $("a[btn][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
                $("a[btnEdit][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").linkbutton({iconCls: 'fa fa-info-circle fa-lg'});
                $("a[btnEdit][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
                $("a[btnChange][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").linkbutton({iconCls: 'fa fa-external-link fa-lg'});
                $("a[btnChange][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
            }

            // 添加 校审人员配置面板
            createTaskEmpSettingPlan(isRead, $("div[empPlan][specId='"+fatherIdData.TaskSpecId+"'][remark='0']"), fatherIdData.TaskSpecId);
            $("div[empPlan][specId='"+fatherIdData.TaskSpecId+"'][remark='0']").attr("remark","1");
        }

        // 渲染行
        function rowbound(isRead, fatherIdData) {
            if (isRead) {
                $("a[btnEdit][rootId='"+fatherIdData.Id+"'][remark='0']").linkbutton({iconCls: 'fa fa-info-circle fa-lg'});
                $("a[btnEdit][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
            } else {
                // 设置 任务编号 文本框
                $("input[taskNumber][rootId='"+fatherIdData.Id+"'][remark='0']").textbox({prompt: '任务编号'});
                createTaskNumberBox($("input[taskNumber][rootId='"+fatherIdData.Id+"'][remark='0']"), fatherIdData.TaskSpecId);
                $("input[taskNumber][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
                // 设置 任务名称 文本框
                $("input[taskName][rootId='"+fatherIdData.Id+"'][remark='0']").textbox({prompt: '任务名称', required:true,});
                createTaskNameBox($("input[taskName][rootId='"+fatherIdData.Id+"'][remark='0']"), fatherIdData.TaskSpecId);
                $("input[taskName][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");

                $("input[dateStart][rootId='"+fatherIdData.Id+"'][remark='0']").datebox({validType:['dateISO']});
                $("input[dateStart][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
                $("input[dateEnd][rootId='"+fatherIdData.Id+"'][remark='0']").datebox({validType:['dateISO']});
                $("input[dateEnd][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
                $("a[btn][rootId='"+fatherIdData.Id+"'][remark='0']").linkbutton({iconCls: 'fa fa-trash fa-lg'});
                $("a[btn][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
                $("a[btnEdit][rootId='"+fatherIdData.Id+"'][remark='0']").linkbutton({iconCls: 'fa fa-info-circle fa-lg'});
                $("a[btnEdit][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
                $("a[btnChange][rootId='"+fatherIdData.Id+"'][remark='0']").linkbutton({iconCls: 'fa fa-external-link fa-lg'});
                $("a[btnChange][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
            }

            //添加人员
            createTaskEmpSettingPlan(isRead, $("div[empPlan][rootId='"+fatherIdData.Id+"'][remark='0']"),fatherIdData.TaskSpecId);
            $("div[empPlan][rootId='"+fatherIdData.Id+"'][remark='0']").attr("remark","1");
        }

        // 设置 任务编号 文本框
        function createTaskNumberBox($div, SpecID) {
            console.log(">>>>>>>")
            console.log($div);
            $.each($div,function (i,e) {
                var $item=$(this);
                var $grid=$("#Spec_"+SpecID);
                var rootId=$item.attr("rootId");
                if ($grid.treegrid("find",rootId)) {
                    var rootData=$grid.treegrid("find",rootId);
                    //console.log(rootData.TaskStatus);

                    //var $textbox = $item.next();
                    //$textbox.addClass("node-status-" + rootData.TaskStatus);

                    // 已完的设计节点，不能修改任务名称
                    if (rootData.TaskStatus == _enum_Design_TaskStatus_已完成.toString()) {
                        $item.textbox("disable");
                    } else {
                        $item.textbox("enable");
                    }
                }
            });
        }


        // 设置 任务名称 文本框
        function createTaskNameBox($div, SpecID) {
            $.each($div,function (i,e) {
                var $item=$(this);
                var $grid=$("#Spec_"+SpecID);
                var rootId=$item.attr("rootId");
                if ($grid.treegrid("find",rootId)) {
                    var rootData=$grid.treegrid("find",rootId);
                    //console.log(rootData.TaskStatus);

                    var $textbox = $item.next();
                    $textbox.addClass("node-status-" + rootData.TaskStatus);

                    // 正在进行或已完的设计节点，不能修改任务名称
                    if (rootData.TaskStatus == _enum_Design_TaskStatus_已完成.toString()) {
                        $item.textbox("disable");
                        $textbox.tooltip({
                            position: 'right',
                            content: '<span style="color:#fff">状态为【进行中】或【已完成】的节点无法更改任务名称</span>',
                            onShow: function() {
                                $(this).tooltip('tip').css({
                                    backgroundColor: '#666',
                                    borderColor: '#666'
                                });
                            }
                        });
                    } else {
                        $item.textbox("enable");
                    }
                }
            });
        }

        // 添加 校审人员配置面板
        function createTaskEmpSettingPlan(isRead, $div, SpecID) {
            $.each($div,function (i,e) {
                var $item=$(this);
                var $grid=$("#Spec_"+SpecID);
                var rootId=$item.attr("rootId");
                if ($grid.treegrid("find",rootId)) {
                    var rootData=$grid.treegrid("find",rootId);
                    debugger;
                    //console.log(JSON.parse(rootData.TaskFlowModelJson));
                    var jsonData=JSON.parse(rootData.TaskFlowModelJson).hasOwnProperty("root")?(JSON.parse(rootData.TaskFlowModelJson).root.item):JSON.parse(rootData.TaskFlowModelJson);
                    var FlowNodeData=Enumerable.From(jsonData).OrderBy(function (x) { return x.rownum.toInt(); }).ToArray();
                    $item.empty();
                    if (isRead) {
                        JQ.DesFlow.show({
                            Ctl:$item,
                            FlowData:FlowNodeData,
                            setNode: false
                        });
                    } else {
                        $.each(FlowNodeData,function (ic,ec) {
                            //$("<span>"+ec.FlowNodeName+":</span>").appendTo($item);
                            createTaskEmpSettingDrop(SpecID,ec,$item,rootId,(rootData.TaskStatus==undefined?0:rootData.TaskStatus));
                        });
                    }
                }
            });
        }

        // 创建人员设定下拉列表
        function createTaskEmpSettingDrop(SpecID,e,$item,rootId,taskStatus) {
            //获取资格人员
            var EmpData=null;
            if (SpecID == 0) {
                // 汇总的设计人员 = 项目负责人 + 各专业负可选责人 + 各专业设计人员
                //if (e.FlowNodeTypeID == _enum_Design_NodeType_设计.toString()) {
                //    // 获取项目负责人
                //    var _pdata = [];
                //    _pdata.push({
                //        EmpID : _projEmpId,
                //        EmpName : _projEmpName
                //    });

                //    // 获取专业负责人 + 各专业设计人员，
                //    var _sdata = Enumerable.From(_Qualification)
                //        .Where("x=>x.QualificationSpecID!=-1&&(x.QualificationValue=={0} || x.QualificationValue=={1})".format(_enum_Design_NodeType_专业, _enum_Design_NodeType_设计))
                //        .Select("x=>{EmpID:x.EmpID,EmpName:x.EmpName}").ToArray();

                //    // 合并上述人员
                //    EmpData = Enumerable.From(_sdata).Union(_pdata)
                //        .Select(function(x){ return { EmpID: x.EmpID, EmpName: JQ.tools.CreateEmpNameWithPY(x.EmpName)}})
                //        .Distinct("x=>x.EmpID")
                //        .OrderBy("x=>x.EmpName").ToArray();
                //} else {
                    // 汇总的校审人员 = 所有专业可选校审人员
                    EmpData = Enumerable.From(_Qualification).Where("x=>x.QualificationSpecID==" + SpecID + "&&x.QualificationValue==" +_enum_Design_NodeType_审定 +"")
                        .Select(function(x){ return { EmpID: x.EmpID, EmpName: JQ.tools.CreateEmpNameWithPY(x.EmpName)}})
                        .Distinct("x=>x.EmpID")
                        .OrderBy("x=>x.EmpName").ToArray();
                //}
            } else {
                // 非汇总的设校审批人员默认从资格配置获取
                EmpData = Enumerable.From(_Qualification).Where("x=>x.QualificationSpecID==" + SpecID + "&&x.QualificationValue==" +e.FlowNodeTypeID +"")
                        .Select(function(x){ return { EmpID: x.EmpID, EmpName: JQ.tools.CreateEmpNameWithPY(x.EmpName)}})
                        .Distinct("x=>x.EmpID")
                        .OrderBy("x=>x.EmpName").ToArray();
            }
            // 合并之前配置人员，防止人员禁用后，下拉列表只显示数字，不显示人名的问题
            if (e.FlowNodeEmpID != 0) {
                EmpData = Enumerable.From(EmpData).Union([{EmpID:e.FlowNodeEmpID.toInt(), EmpName:JQ.tools.CreateEmpNameWithPY(e.FlowNodeEmpName)}]).Distinct("x=>x.EmpID").ToArray(); //结果是两个结果集里面所有值，并自动去重
            }

            var $select= $("<select id=\"empDrop_"+SpecID+"_"+e.ID+"\" style=\"width:70px; margin-right:4px;\"></select>");
            $select.appendTo($item);
            $select.combobox({
                valueField: 'EmpID',
                textField: 'EmpName',
                data: EmpData,
                editable: true,//禁止模糊筛选，
                limitToList: true,//仅限于列表中
                model: 'local',
                width: '110px',
                panelMaxHeight: '360px',
                required: true,
                onChange: function (newValue, oldValue) {
                    if ($select.oldValue == undefined) {
                        $select.oldValue = oldValue;
                    }
                },
                onSelect:function () {
                    if (e.FlowNodeTypeID==_enum_Design_NodeType_设计.toString()) {
                        var dataroot=$("#Spec_"+SpecID).treegrid("find",rootId);
                        // 设计人员数据 同时 存储与行数据中 和 流程模板xml中，这里设计人员更改后先更改行数据中的字段
                        dataroot.TaskEmpID=$(this).combobox("getValue");
                        dataroot.TaskEmpName=JQ.tools.GetEmpNameWithoutPY($(this).combobox("getText"));
                    }
                },
                filter: function(q, row){
                    var _options = $(this).combobox('options');
                    return row[_options.textField].indexOf(q.toUpperCase()) > -1;
                },
                onHidePanel : function() {
                    var _options = $(this).combobox('options');
                    var _data = $(this).combobox('getData');/* 下拉框所有选项 */
                    var _text = $(this).combobox('getText');/* 用户输入的值 */
                    var _value = "0";
                    for (var i = 0; i < _data.length; i++) {
                        if (_data[i][_options.textField] == _text) {
                            _value = _data[i][_options.valueField];
                            break;
                        }
                    }
                    if(_value == "0") {
                        if ($select.oldValue == ""){
                            $(this).combobox('setText', "");
                        } else {
                            $(this).combobox('setValue', $select.oldValue);
                        }
                    } else {
                        $(this).combobox('setValue', _value);
                    }
                }
            });

            // 对EasyUI的combo控件进行改造，增加颜色标识和文本标签
            var $combo = $select.next();
            //$combo.addClass("combo-node node-status-" + (e.FlowNodeTypeID == _enum_Design_NodeType_设计.toString() ? e.FlowNodeStatus : '')); // 这边配置的是模板，所以状态永远不变，所以不需要显示节点颜色标示
            $combo.addClass("combo-node");
            $("<span NodeName class=\"bold\" style=\"line-height: 27px; padding: 0 4px; display: inline-block; background-color: #eeeeee;\">"+e.FlowNodeName+"</span>").prependTo($combo);

            var $cbinput = $combo.find('input.textbox-text');
            $cbinput.css('width','50px')
            $cbinput.bind('focus',function(){
                //$drop.combobox('showPanel');
                $(this).select();
            });

            if (e.hasOwnProperty("FlowNodeEmpID")&&e.FlowNodeEmpID!=0) {
                $select.combobox("setValue",e.FlowNodeEmpID);
            }

            if (taskStatus==_enum_Design_TaskStatus_已完成.toString()) {
                $select.combobox("disable");
                $combo.tooltip({
                    position: 'right',
                    content: '<span style="color:#fff">状态为【已完成】的节点无法更改人员</span>',
                    onShow: function() {
                        $(this).tooltip('tip').css({
                            backgroundColor: '#666',
                            borderColor: '#666'
                        });
                    }
                });
            }else {
                // 正在进行或已完的设计节点，不能修改人员
                if (e.FlowNodeStatus == _enum_Design_FlowNodeStatus_未安排.toString() || e.FlowNodeStatus == _enum_Design_FlowNodeStatus_已安排.toString()) {
                    $select.combobox("enable");
                } else {
                    $select.combobox("disable");
                    $combo.tooltip({
                        position: 'right',
                        content: '<span style="color:#fff">状态为【进行中】或【已完成】的节点无法更改人员，针对【进行中】的任务，<br />如果你真的想要更改人员，你可以用右侧的【移交】功能。</span>',
                        onShow: function() {
                            $(this).tooltip('tip').css({
                                backgroundColor: '#666',
                                borderColor: '#666'
                            });
                        }
                    });
                }
            }
        }

        // 添加普通任务
        function AddTaskFather(SpecId) {
            var item = $("#Spec_"+SpecId).treegrid("getSelected");
            if (item) {
                $("#Spec_"+SpecId).treegrid("unselect",item.Id);
            }
            AddTask(SpecId);
        }

        // 添加子任务
        function AddTaskChild(SpecId) {
            var item = $("#Spec_"+SpecId).treegrid("getSelected");
            if (item==null) {
                JQ.dialog.info("请选择一条任务！！！");
                return false;
            }
            else if (checkRelation(item)) {
                JQ.dialog.info("已有其它专业任务关联到本任务，所以无法在本任务下增加子任务。");
                return false;
            }
            else {
                AddTask(SpecId);
            }
        }

        var newI = 1;
        // 添加任务
        function AddTask(SpecID,taskName,taskNumber) {
            debugger
            var $SpecGrid =$("#Spec_"+SpecID);
            var item = $SpecGrid.treegrid("getSelected");
            var SpecData=Enumerable.From(_SpecPlanData).Where("x=>x.TaskSpecId=="+SpecID+"&&x.TaskType==1").FirstOrDefault();
            _tempTaskId--;
            var addData={
                Id: _tempTaskId ,
                ProjId:_projID || 0,
                TaskGroupId:_taskGroupId || 0,
                TaskNumber: "",
                TaskName:"",
                DatePlanStart:"",
                DatePlanFinish:"",
                TaskSpecId:SpecID,
                TaskType:0,
                TaskStatus:-1,
                iconCls: "fa fa-dot-circle-o"
            };
            if (!item) {
                //无层级
                addData.TaskName = SpecID == 0 ? "项目汇总" : taskName == undefined ? "设计任务" : taskName;
                addData.TaskNumber = SpecID == 0 ? "项目汇总" : taskNumber == undefined ? "任务编号" : taskNumber;
                addData.TaskFlowModelJson=SpecData.TaskFlowModelJson;
                addData.FlowId=SpecData.FlowId;
                addData.TaskParentId=SpecData.Id;
                addData.OldFlowId=SpecData.FlowId;
                addData.TaskNextFlowNodeId = 0;
                addData.TaskOldEmpId=0;
                addData.TaskLevel = 1;
                addData.TaskLevelType=0;//无层级、专业任务下的 level为1
                $SpecGrid.treegrid("append",{
                    parent: SpecData.Id,
                    data: [addData]
                });
            }
            else {
                //获取父节点
                var fatherDate=$SpecGrid.treegrid("find",item.Id);
                // TaskLevelType 层级类型：0 无层级 1 子层级 2 父层级
                if (fatherDate.TaskLevelType==0) {
                    //无层级 转 层级父
                    fatherDate.OldTaskLevelType=fatherDate.TaskLevelType;
                    fatherDate.TaskLevelType=2;
                    $("div[rootId='"+item.Id+"'][empPlan]").attr("remark",'0');
                    var flowDate= GetDesFlow(SpecID,fatherDate.TaskLevelType);
                    fatherDate.OldTaskFlowModelJson=fatherDate.TaskFlowModelJson;//记录 旧数据
                    fatherDate.TaskFlowModelJson=flowDate.DesFlowNodeJson;//重新赋值流程
                    fatherDate.FlowId=flowDate.ID;
                }
                else if (fatherDate.TaskLevelType==1) {
                    //层级子 转 层级父
                    fatherDate.OldTaskLevelType=fatherDate.TaskLevelType;
                    fatherDate.TaskLevelType=2;
                    $("div[rootId='"+item.Id+"'][empPlan]").attr("remark",'0');
                    var flowDate= GetDesFlow(SpecID,fatherDate.TaskLevelType);
                    fatherDate.OldTaskFlowModelJson=fatherDate.TaskFlowModelJson;//记录 旧数据
                    fatherDate.TaskFlowModelJson=flowDate.DesFlowNodeJson;//重新赋值流程
                    fatherDate.FlowId=flowDate.ID;
                }
                // 添加层级子
                addData.TaskName = SpecID == 0 ? "汇总任务" : taskName == undefined ? "设计任务" : taskName;
                addData.TaskLevel = fatherDate.TaskLevel + 1;
                addData.TaskLevelType=1;
                var flowDate= GetDesFlow(SpecID,1);
                addData.TaskFlowModelJson=flowDate.DesFlowNodeJson;
                addData.FlowId=flowDate.ID;
                addData.OldFlowId=0;
                addData.TaskParentId=item.Id;
                addData.TaskOldEmpId=0;
                addData.TaskNextFlowNodeId = item.Id;

                $SpecGrid.treegrid("append",{
                    parent: item.Id,
                    data: [addData]
                });
            }
        }

        // 设置关联任务
        function AddSummaryChild(SpecId) {
            var item = $("#Spec_"+SpecId).treegrid("getSelected");
            if (item==null) {
                JQ.dialog.info("请选择一条任务。");
                return false;
            }
            if (item.TaskLevelType == _enum_Design_TaskLevelType_层级父) {
                JQ.dialog.info("不能在含有子任务的任务上关联任务。");
                return false;
            }

            var saveData = GetSaveData({
                hasAllSpec: _taskSpecId == 0
            });

            if (saveData == null) return;
            var _DialogdivId = JQ.dialog.dialog({
                title: decodeURIComponent("设置关联任务"),
                width: 700,
                height: 600,
                JQID: "SpecPlanInfoAddSummary",
                JQLoadingType: "",
                iconCls: "fa fa-table",
                url: _webconfig.serverUrl + 'Design/DesTask/SpecPlanInfoAddSummary?TaskId={0}'.format(item.Id),
                method: 'post',
                queryParams:{
                    specPlanData: JSON.stringify(saveData)
                }
            });
            // 对话框回调
            window.top.window["_DialogCallback_" + _DialogdivId] = function(getChecks) {
                var arrChecks = Enumerable.From(getChecks).Select("x => x.Id").ToArray();

                // 遍历各专业表格
                $.each($("table[id^='Spec_']"),function () {
                    var $grid=$(this);
                    var rowData = $grid.treegrid("getData");
                    // 遍历表格行，保存任务数据
                    $.each(rowData,function (i,e) {
                        var isRead = $("input[TaskName][rootId='"+e.Id+"']").size() == 0;
                        if (arrChecks.isIndexOf(e.Id)) {
                            if (e.TaskNextFlowNodeId != item.Id) {
                                e.TaskNextFlowNodeId = item.Id;
                                $grid.treegrid('refresh', e.Id);
                                rowbound(isRead, e);
                            }
                        } else if (e.TaskNextFlowNodeId == item.Id) {
                            e.TaskNextFlowNodeId = 0;
                            $grid.treegrid('refresh', e.Id);
                            rowbound(isRead, e);
                        }
                    });
                });
            }
        }

        // 删除关联
        function delRelation(taskId) {
            $.each($("table[id^='Spec_']"),function () {
                var $grid=$(this);
                var rowData = $grid.treegrid("getData");
                // 遍历表格行，保存任务数据
                $.each(rowData,function (i, e) {
                    if (e.TaskNextFlowNodeId == taskId) {
                        e.TaskNextFlowNodeId = 0;
                        $grid.treegrid('refresh', e.Id);
                        rowbound(e);
                    }
                });
            });
        }

        // 删除任务
        function delTask(SpecId, taskId) {
            try {
                if (taskId>0) {
                    JQ.dialog.confirm("你确定要删除嘛！！！",function () {
                        JQ.tools.ajax({
                            url: _webconfig.serverUrl + 'Design/DesTask/SpecPlanInfoDelSpecPlanData?taskId=' + taskId,
                            succesCollBack: function () {
                                // 清除与其他任务的关联
                                delRelation(taskId);

                                // 删除当前任务
                                $("#Spec_"+SpecId).treegrid("remove",taskId);
                            }
                        });
                    });
                }
                else {
                    JQ.dialog.confirm("你确定要删除嘛！！！",function () {
                        // 清除与其他任务的关联
                        delRelation(taskId);

                        // 再删除当前任务，如果父任务的话还要改变父任务的层级及流程。
                        var _parentNode=$("#Spec_"+SpecId).treegrid("getParent",taskId);
                        $("#Spec_"+SpecId).treegrid("remove",taskId);
                        if (_parentNode!=null) {
                            changeParentTaskLevelType(SpecId,_parentNode);
                        }
                    });
                }

            } catch (e) {
                JQ.dialog.show("删除出错啦！！！");
            }
        }

        // 改变父任务的层级及流程
        function changeParentTaskLevelType(SpecId,_parentNode) {
            var _child=$("#Spec_"+SpecId).treegrid("getChildren",_parentNode.Id);
            if (_child.length==0) {
                _parentNode.TaskFlowModelJson=_parentNode.OldTaskFlowModelJson;
                _parentNode.TaskLevelType=_parentNode.OldTaskLevelType;
                createTaskEmpSettingPlan($("div[empPlan][specId='"+SpecId+"'][rootid='"+_parentNode.Id+"']"),SpecId)
            }
        }

        // 任务移交
        function transferTask(SpecId,Id){
            var title=$("input[taskName][specId='"+SpecId+"'][rootid='"+Id+"']").textbox("getText");
            var $div = $("<div id='dialogEmp'></div>")
            $div.appendTo(window.top.$("body"));
            window.top.$("#dialogEmp").dialog({
                title: "[工作移交]"+title,
                width: 600,
                height: 300,
                iconCls:'fa fa-external-link',
                closed: false,
                cache: false,
                modal: true,
                toolbar: [{
                    text: '替换',
                    iconCls: 'fa fa-save',
                    onClick: function () {
                        return JQ.dialog.confirm("你确定要替换这些人员嘛?",function () {
                            var rootData=$("#Spec_"+SpecId).treegrid("find",Id);
                            var jsonData=JSON.parse(rootData.TaskFlowModelJson).hasOwnProperty("root")?(JSON.parse(rootData.TaskFlowModelJson).root.item):JSON.parse(rootData.TaskFlowModelJson);
                            //var NewData=Enumerable.From(jsonData).Where("x=>x.FlowNodeTypeID==19").ToArray();//获取设计
                            var NewData=Enumerable.From(jsonData).ToArray();
                            var postData=[];
                            debugger;
                            if (NewData&&NewData.length>0) {
                                $.each(NewData,function(root_Index,root_Item){
                                    var dropId= window.top.$("#dialogEmp").find("select[id$='_"+root_Item.ID+"']").attr("id");
                                    var $drop=window.top.$("#"+dropId);
                                    try {
                                        var NewEmpID=$drop.combobox("getValue");
                                        if (root_Item.FlowNodeEmpID!=NewEmpID) {
                                            postData.push({
                                                ID:root_Item.ID,
                                                fromEmpId:root_Item.FlowNodeEmpID,
                                                toEmpId:NewEmpID,
                                                ItemType:root_Item.FlowNodeTypeID=="19"?3:4,
                                                TaskId:Id,
                                                FlowNodeTypeID:root_Item.FlowNodeTypeID,
                                            });
                                        }
                                    } catch (e) {

                                    }
                                })
                            }

                            //执行数据库操作
                            if (postData.length>0) {
                                JQ.tools.ajax({
                                    url: _webconfig.serverUrl + 'Design/DesTask/SpecPlanInfoTaskTransfer',
                                    data: { postData: JSON.stringify(postData) },
                                    succesCollBack: function (backJson) {
                                        //var $empPlan=$("div[empPlan][specId='"+SpecId+"'][rootid='"+Id+"']");
                                        //if (postData.length>0) {
                                        //    $.each(postData,function(ip,ep){
                                        //        var dropItem=$empPlan.find("select[id$='_"+ep.ID+"']");
                                        //        $(dropItem).combobox("setValue",ep.toEmpId);
                                        //    })
                                        //}
                                        window.location.href = tabs[tabId] + "&time=" + (new Date()).getTime();
                                        window.top.$("#dialogEmp").dialog("close");
                                    }
                                });
                            }else {
                                JQ.dialog.warning("各个任务点的人员没有更改！");
                            }

                        })
                    }
                },{
                    text:'关闭',
                    iconCls: 'fa fa-close',
                    onClick:function () {
                        window.top.$("#dialogEmp").dialog("close");
                    }
                }],
                onOpen:function () {
                    $("<span>任务移交:</span>").appendTo(window.top.$("#dialogEmp"));
                    //人员加载
                    var $empPlan=$("div[empPlan][specId='"+SpecId+"'][rootid='"+Id+"']");
                    var dropItems=$empPlan.find("select[id^='empDrop_"+SpecId+"']");
                    $.each(dropItems,function(dropIndex,dropItem){
                        var oldDropID=$(dropItem).attr("id");//下拉控件ID
                        var opt=$(dropItem).combobox("options");
                        var spanTip=$(dropItem).next().find("span[NodeName]");//节点名称
                        var oldValue=$(dropItem).combobox("getValue");//选中值
                        var $Newselect= $("<select id=\"dialogEmp_"+oldDropID+"\" style=\"width:70px; margin-right:4px;\"></select>");
                        $Newselect.appendTo(window.top.$("#dialogEmp"));
                        window.top.$("#dialogEmp_"+oldDropID).combobox({
                            valueField:opt.valueField,
                            textField:opt.textField,
                            data: opt.data,
                            width: opt.width,
                            panelMaxHeight:opt.panelMaxHeight,
                            required: opt.required,
                            editable:opt.editable,
                        });
                        window.top.$("#dialogEmp_"+oldDropID).combobox("setValue",oldValue);
                        var NewTip=spanTip[0];
                        $("<span NodeName style=\"line-height: 27px; padding-left:4px;\">"+$(NewTip).text()+"</span>").prependTo(window.top.$("#dialogEmp_"+oldDropID).next());
                        window.top.$("#dialogEmp_"+oldDropID).next().css({"margin-right":"10px"});
                        //var $combo = $select.next();
                        //$combo.addClass("combo-node node-status-" + e.FlowNodeStatus);
                        //$("<span NodeName style=\"line-height: 27px; padding-left:4px;\">"+e.FlowNodeName+":</span>").prependTo($combo);
                    });
                },
                onClose:function () {
                    window.top.$("#dialogEmp").remove();
                }
            });
        }

        // 查看任务
        function showTaskInfo(SpecId,Id) {
            var rootData=$("#Spec_"+SpecId).treegrid("find",Id);

            JQ.dialog.dialog({
                title: rootData.TaskName,
                url: _webconfig.serverUrl + 'Design/DesTask/TaskInfo?Id='+Id,
                width: '1200',
                height: '900',
                toolbar:null,
                //JQID: 'TaskPerson',
                //JQLoadingType: 'datagrid',
                iconCls: 'fa fa-list',
            });
        }

        // 保存任务人员配置
        function saveTaskEmpSetting($div,Node) {
            var NodeJson = Node.TaskFlowModelJson;
            var jsonData=JSON.parse(NodeJson).hasOwnProperty("root")?(JSON.parse(NodeJson).root.item):JSON.parse(NodeJson);
            if ($div&&jsonData.length>0) {
                $.each(jsonData,function(i,e){
                    $thisselect=$div.find("select[id$='_"+e.ID+"']");
                    e.FlowNodeEmpID=$thisselect.combobox("getValue")==null?0:$thisselect.combobox("getValue");
                    e.FlowNodeEmpName=$thisselect.combobox("getText")==null?0:JQ.tools.GetEmpNameWithoutPY($thisselect.combobox("getText"));
                    if (e.FlowNodeStatus == 0) {
                        // 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
                        if (Node.TaskSpecId != 0 && Node.TaskLevelType != _enum_Design_TaskLevelType_层级父 && e.FlowNodeTypeID == _enum_Design_NodeType_设计.toString()) {
                            e.FlowNodeStatus = 2;
                        } else {
                            e.FlowNodeStatus = 1;
                        }
                    }
                })
            }
            return jsonData;
        }

        // 获取要保存的任务数据
        function GetSaveData(params) {
            params = $.extend({
                hasAllSpec: false
            }, params);

            var saveData=[];
            var result=true;
            // 首先保存专业节点信息
            var SpecArray=Enumerable.From(_SpecPlanData).Where("x=>x.TaskType==1").ToArray();
            $.each(SpecArray,function (index,data) {
                //data.TaskFlowModel="";
                saveData.push(data);
            });
            // 遍历各专业表格
            $.each($("table[id^='Spec_']"),function (i,e) {
                if (!result) {
                    return false;
                }
                var $grid=$(this);
                var rowData=$grid.treegrid("getData");
                // 遍历表格行，保存任务数据
                $.each(rowData,function (i,e) {
                    if (!result) {
                        return false;
                    }
                    if ($("input[TaskName][rootId='"+e.Id+"']").size() == 0) {
                        if (params.hasAllSpec) {
                            // 阶段汇总设置人员，指定汇总任务关联某专业任务时，需要修改那个任务的父任务id，假设汇总人员没有那个专业的配置权，
                            // 这时问题就来了，由于没有权限界面上设定好的专业内容任务的父Id无法保存，为了解决这个问题，当汇总人员提交专业策划保存时，
                            // 会把所以专业的数据都带过来，但是汇总人员没权限设置的专业里的任务的TaskFlowModelJson属性我都会赋值为空，以示区别。
                            // 这类任务只保持父任务Id，其他任务信息都不修改。
                            var eClone = $.extend({}, e); // 不破坏表格行数据，克隆一个对象
                            eClone.TaskFlowModel = "";
                            eClone.TaskFlowModelJson = "";
                            saveData.push(eClone);
                        }
                        return false;
                    }
                    if (!checkTaskValist(e.Id)) {
                        result=false;
                        return false;
                    }

                    //遍历任务
                    var rootData=$grid.treegrid("find",e.Id);
                    rootData.TaskNumber=$("input[TaskNumber][rootId='"+e.Id+"']").textbox("getValue");
                    rootData.TaskName=$("input[TaskName][rootId='"+e.Id+"']").textbox("getValue");
                    rootData.DatePlanStart=$("input[dateStart][rootId='"+e.Id+"']").datetimebox("getValue");
                    rootData.DatePlanFinish=$("input[dateEnd][rootId='"+e.Id+"']").datetimebox("getValue");
                    //rootData.FlowId=rootData.FlowId;
                    //rootData.Id=rootData.Id;
                    //rootData.ProjId=rootData.ProjId;
                    //rootData.TaskEmpID=rootData.TaskEmpID;
                    //rootData.TaskFlowModel="";
                    rootData.TaskFlowModelJson=JSON.stringify(saveTaskEmpSetting($("div[empPlan][rootId='"+e.Id+"']"),rootData));
                    saveData.push(rootData);
                    var childNode=$grid.treegrid("getChildren",e.Id);
                    $.each(childNode,function (ic,node) {
                        if (!checkTaskValist(node.Id)) {
                            result=false;
                            return false;
                        }
                        var rootDataChild=$grid.treegrid("find",node.Id);
                        rootDataChild.TaskNumber=$("input[TaskNumber][rootId='"+node.Id+"']").textbox("getValue");
                        rootDataChild.TaskName=$("input[TaskName][rootId='"+node.Id+"']").textbox("getValue");
                        rootDataChild.DatePlanStart=$("input[dateStart][rootId='"+node.Id+"']").datetimebox("getValue");
                        rootDataChild.DatePlanFinish=$("input[dateEnd][rootId='"+node.Id+"']").datetimebox("getValue");
                        rootDataChild.TaskFlowModel="";
                        rootDataChild.TaskFlowModelJson=JSON.stringify(saveTaskEmpSetting($("div[empPlan][rootId='"+node.Id+"']"),rootDataChild));
                        saveData.push(rootDataChild);
                    });
                });
            })
            if (!result) {
                JQ.dialog.show("验证失败！！！");
                return null;
            }
            return saveData;
        }

        // 保存专业策划
        function SaveSpecPlanInfo() {
            debugger;
            var saveData=GetSaveData({
                hasAllSpec: _taskSpecId == 0
            });
            if (saveData==null) return;
            try {
                debugger;
                //window.top.$.messager.progress();
                JQ.tools.ajax({
                    url: _webconfig.serverUrl + 'Design/DesTask/SpecPlanInfoSaveSpecPlanData?taskGroupId={0}'.format(_taskGroupId),
                    data: {SpecPlanData:JSON.stringify(saveData)},
                    succesCloseProgress: false,
                    progressWith: window,
                    succesCollBack: function (data) {
                        window.location.href = tabs[tabId] + "&time=" + (new Date()).getTime();
                    }
                });
            } catch (e) {
                //window.top.$.messager.progress('close');
            }
        }

        // 查看项目进度
        function ShowProjectProgress(){
            JQ.dialog.dialogIframe({
                title: "项目进度",
                url: _webconfig.serverUrl + 'Design/DesTask/ProjectProgressInfo?projID={0}&taskGroupId={1}'.format(_projID, _taskGroupId),
                width: 1200,
                height: 900
            });
        };

        // 返回上一页面
        function GoToBackPage() {
            //window.parent.changeTabId(tabId - 1);
            window.location.href = tabs[tabId - 1] + "&time=" + (new Date()).getTime();
        }

        $(function() {
            // 导航栏点击
            $(".pageheader li").each(function(i, li) {
                if (tabs[i].toLowerCase().indexOf(window.location.pathname.toLowerCase()) > -1) tabId = i;
                $(li).click(function() {
                    //window.parent.changeTabId(i);
                    window.location.href = tabs[i] + "&time=" + (new Date()).getTime();
                });
            });

            // 页面载入后，设置步骤导航，强调当前页面节点，并处理前后节点状态
            $(".pageheader li").each(function(i, li) {
                var $li = $(li);
                var isShow = true;
                switch(i){
                    case 0:
                        isShow = _mainTabsUsed.PlanTableList;
                        break;
                    case 1:
                        isShow = _mainTabsUsed.ProjectPlanList;
                        break;
                    case 2:
                        isShow = _mainTabsUsed.ExchPlanList;
                        break;
                    case 3:
                        isShow = _mainTabsUsed.SpecPlanList;
                        break;
                    case 4:
                        isShow = _mainTabsUsed.ProjGanttList;
                        break;
                }
                $li.toggle(isShow);
                if (isShow) tabNum++;
                if (i < tabId) {
                    $li.addClass("visited");
                    $li.find(".small-tag").html('<i class="fa fa-check" aria-hidden="true"></i>');
                } else if (i == tabId) {
                    $li.addClass("active");
                    $li.find(".small-tag").html(tabNum);
                } else {
                    $li.find(".small-tag").html(tabNum);
                }
            });

            //显示专业面板
            createSpecPlan();

        });

    </script>

}
