<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
	var arr = DbHelper.GetV_SystemTableStructure(config.ConnectionString);
	var FKey = DbHelper.GetV_SystemTableFKey(config.ConnectionString);
	foreach(BaseNameSpace item in DbHelper.GetBaseNameSpaceTables(config.ConnectionString, config.TableNames))
	{
		string ClassName = item.TableNames;
		string NameSpace =  item.DBSqlNameSpace.Replace("/",".");
		string DirPath = "tt/Models/Mapping/";

		string First = DbHelper.GetFirstString(arr,item.TableNames);
		string PKCol = DbHelper.GetPKColumn(arr,item.TableNames);
		string FirstDate = DbHelper.GetFirstDateTime(arr,item.TableNames);
		List<V_SystemTableFKey> RefFkey = DbHelper.GetFKeyColumn(FKey,item.TableNames);
		List<V_SystemTableStructure> TableStructure = arr.Where(p => p.TableName == item.TableNames).ToList();
#>
<# manager.StartNewFile(ClassName+"Map.cs",DirPath); #>
#region <auto-generated>
//此代码由T4模板自动生成
//生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
#endregion
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
namespace DataModel.Models.Mapping
{
public class <#=ClassName#>Map : EntityTypeConfiguration<<#=ClassName#>>
    {
        public <#=ClassName#>Map()
        {
			this.HasKey(t => new { <#=DbHelper.GetPKColumnAll(arr,ClassName)#>});
		<#
			foreach (var childCol in  TableStructure)
			{
			#>
	<#if (!PKCol.Contains(childCol.ColName)){#>
			this.Property(t => t.<#=childCol.ColName#>)<# if (childCol.DefaultText != ""){ #>.IsRequired()<#}#><# if(SqlServerDbTypeMap.MapCsharpType(childCol.ColType) == "string" && childCol.ColType!="xml" && childCol.ColType!="text" && childCol.ColType!="ntext" && childCol.ColLen!="-1"){ #>.HasMaxLength(<#=childCol.ColLen#>)<#}#><# if(SqlServerDbTypeMap.MapCsharpType(childCol.ColType) == "decimal"){ #>.HasPrecision(<#=childCol.ColLen#>,<#=childCol.ColScale#>)<#}#>;
<#}}#>


			 // Table & Column Mappings
			this.ToTable("<#=ClassName#>");
			<#
			foreach (var childCol in  TableStructure)
			{
			#>
this.Property(t => t.<#=childCol.ColName#>).HasColumnName("<#=childCol.ColName#>");
			<#
            }
			#>

			#region Relationships
<#
			foreach (var keyName in  RefFkey)
			{
				if(keyName.RefTableName != ClassName)
				{
					#>
			this.HasRequired(t => t.<#=keyName.FKName#>).WithMany(t => t.<#=keyName.FKName#>).HasForeignKey(d => d.<#=keyName.ColName#>);
<#
				}
            }
			#>
			#endregion
        }
    }
}
<# manager.EndBlock(); #>
<#}#>
<# manager.Process(true); #>
<#+
	public class config
	{
		//public static readonly string ConnectionString="Data Source=.\\SQL2008R2;Initial Catalog=JQPM9_gdgzshcj;User ID=sa;Password=jqpmpass;";
		public static readonly string ConnectionString="Initial Catalog=JQPM9_gdgzshcj;Data Source=192.168.0.8\\j9SQL2008R2;user id=sa;password=j9;";
		public static readonly string TableNames="";
	}
#>