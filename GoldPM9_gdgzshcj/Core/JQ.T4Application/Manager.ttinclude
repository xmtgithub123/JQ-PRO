<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#+

	// Manager class records the various blocks so it can split them up
	class Manager {
    	private class Block {
        	public String Name;
	 		public String Path = "";
        	public int Start, Length;
    	}

    	private Block currentBlock;
    	private List<Block> files = new List<Block>();
    	private Block footer = new Block();
    	private Block header = new Block();
    	private ITextTemplatingEngineHost host;
    	private StringBuilder template;
    	protected List<String> generatedFileNames = new List<String>();

    	public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        	return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    	}

    	public void StartNewFile(String name,String path) {
        	if (name == null)
            	throw new ArgumentNullException("name");

			String outputPath = Path.GetDirectoryName(host.TemplateFile);

			if(!Directory.Exists(Path.Combine(outputPath , path)))
				Directory.CreateDirectory(Path.Combine(outputPath , path));
		
        	CurrentBlock = new Block { Name = name,Path=path };
    	}

    	public void StartFooter() {
        	CurrentBlock = footer;
    	}

    	public void StartHeader() {
        	CurrentBlock = header;
    	}

    	public void EndBlock() {
        	if (CurrentBlock == null)
            	return;
        	CurrentBlock.Length = template.Length - CurrentBlock.Start;
        	if (CurrentBlock != header && CurrentBlock != footer)
            	files.Add(CurrentBlock);
        	currentBlock = null;
    	}

    	public virtual void Process(bool split) {
        	if (split) {
            	EndBlock();
            	String headerText = template.ToString(header.Start, header.Length);
            	String footerText = template.ToString(footer.Start, footer.Length);
            	String outputPath = Path.GetDirectoryName(host.TemplateFile);
            	files.Reverse();
            	foreach(Block block in files) {
                	String fileName = Path.Combine(outputPath , block.Path , block.Name);
                	String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                	generatedFileNames.Add(fileName);
                	CreateFile(fileName, content);
                	template.Remove(block.Start, block.Length);
            	}
        	}
    	}

    	protected virtual void CreateFile(String fileName, String content) {
        	if (IsFileContentDifferent(fileName, content))
            	File.WriteAllText(fileName, content,Encoding.UTF8);
    	}

    	public virtual String GetCustomToolNamespace(String fileName) {
        	return null;
    	}

    	public virtual String DefaultProjectNamespace {
        	get { return null; }
    	}

    	protected bool IsFileContentDifferent(String fileName, String newContent) {
        	return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    	}

    	private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        	this.host = host;
        	this.template = template;
    	}

    	private Block CurrentBlock {
        	get { return currentBlock; }
        	set {
            	if (CurrentBlock != null)
                	EndBlock();
            	if (value != null)
                	value.Start = template.Length;
            	currentBlock = value;
        	}
    	}
    	private class VSManager: Manager {
        	private EnvDTE.ProjectItem templateProjectItem;
        	private EnvDTE.DTE dte;
        	private Action<String> checkOutAction;
        	private Action<IEnumerable<String>> projectSyncAction;

        	public override String DefaultProjectNamespace {
            	get {
                	return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            	}
        	}

        	public override String GetCustomToolNamespace(string fileName) {
            	return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        	}

        	public override void Process(bool split) {
            	if (templateProjectItem.ProjectItems == null)
                	return;
            	base.Process(split);
            	projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        	}

        	protected override void CreateFile(String fileName, String content) {
            	if (IsFileContentDifferent(fileName, content)) {
                	CheckoutFileIfRequired(fileName);
                	File.WriteAllText(fileName, content,Encoding.UTF8);
            	}
        	}

        	internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            	: base(host, template) {
            	var hostServiceProvider = (IServiceProvider) host;
            	if (hostServiceProvider == null)
                	throw new ArgumentNullException("Could not obtain IServiceProvider");
            	dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            	if (dte == null)
                	throw new ArgumentNullException("Could not obtain DTE from host");

            	templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            	checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            	projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
        	}

        	private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames) {
            	var keepFileNameSet = new HashSet<String>(keepFileNames);
            	var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            	var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]) + ".";
            
        	}

        	private void CheckoutFileIfRequired(String fileName) {
            	var sc = dte.SourceControl;
            	if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                	checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        	}
    	}
	}
	#region  BaseData
	public class BaseData
    {
        public BaseData()
        {
			#region DefaultValue
			this.BaseID = 0;
			this.BaseName =  "";
			this.BaseOrder =  "";
			this.BaseNameEng =  "";
			this.BaseAtt1 =  "";
			this.BaseAtt2 =  "";
			this.BaseAtt3 =  "";
			this.BaseAtt4 =  "";
			this.BaseAtt5 =  "";
			this.BaseIsFixed =  false;
			this.BaseIsDeleted =  false;
			#endregion
		}
		///<summary>自增</summary>
        public int BaseID { get; set; }
		///<summary>基础数据名称</summary>
        public string BaseName { get; set; }
		///<summary>排序字段</summary>
        public string BaseOrder { get; set; }
		///<summary>基础数据标识</summary>
        public string BaseNameEng { get; set; }
		///<summary>扩展属性</summary>
        public string BaseAtt1 { get; set; }
		///<summary>扩展属性</summary>
        public string BaseAtt2 { get; set; }
		///<summary>扩展属性</summary>
        public string BaseAtt3 { get; set; }
		///<summary>扩展属性</summary>
        public string BaseAtt4 { get; set; }
		///<summary>扩展属性</summary>
        public string BaseAtt5 { get; set; }
		///<summary>是否不可删除</summary>
        public bool BaseIsFixed { get; set; }
		///<summary>是否已经删除</summary>
        public bool BaseIsDeleted { get; set; }
    }
	#endregion
	#region  BaseNameSpace
    public class BaseNameSpace
    {
		public BaseNameSpace()
        {
			#region DefaultValue
			this.TableNames =  "";
			this.DBSqlNameSpace =  "";
			this.WebNameSpace =  "";
			#endregion
		}
		///<summary>表名称</summary>
        public string TableNames { get; set; }
		///<summary>逻辑层命名空间</summary>
        public string DBSqlNameSpace { get; set; }
		///<summary>显示层命名空间</summary>
        public string WebNameSpace { get; set; }
    }
	#endregion

	#region  V_SystemTableFKey
	public class V_SystemTableFKey
    {
        public V_SystemTableFKey()
        {
			#region DefaultValue
			this.FKName =  "";
			this.TableName =  "";
			this.ColName =  "";
			this.RefTableName =  "";
			this.RefColName =  "";
			this.CnstIsNotRepl =  "";
			this.CnstIsUpdateCascade =  "";
			this.CnstIsDeleteCascade =  "";
			#endregion
		}
		///<summary></summary>
        public string FKName { get; set; }
		///<summary></summary>
        public string TableName { get; set; }
		///<summary></summary>
        public string ColName { get; set; }
		///<summary></summary>
        public string RefTableName { get; set; }
		///<summary></summary>
        public string RefColName { get; set; }
		///<summary></summary>
        public string CnstIsNotRepl { get; set; }
		///<summary></summary>
        public string CnstIsUpdateCascade { get; set; }
		///<summary></summary>
        public string CnstIsDeleteCascade { get; set; }
    }
	#endregion	

	#region  V_SystemTableXtype
	public class V_SystemTableXtype
    {
        public V_SystemTableXtype()
        {
			#region DefaultValue
			this.TableName =  "";
			this.XName =  "";
			this.XType =  "";
			this.CreateDate =  new DateTime(1900,1,1);
			#endregion
		}
		///<summary></summary>
        public string TableName { get; set; }
		///<summary></summary>
        public string XName { get; set; }
		///<summary></summary>
        public string XType { get; set; }
		///<summary></summary>
        public System.DateTime CreateDate { get; set; }
    }
	#endregion	

	#region  V_SystemTableStructure
	public class V_SystemTableStructure
    {
        public V_SystemTableStructure()
        {
			#region DefaultValue
			this.TableName =  "";
			this.TableNote =  "";
			this.ColIndex = 0;
			this.ColName =  "";
			this.IsIdentity =  "";
			this.IsPK =  "";
			this.ColType =  "";
			this.ColLength =  "";
			this.ColLen =  "";
			this.ColScale =  "";
			this.IsToNull =  "";
			this.DefaultText =  "";
			this.ColNote =  "";
			#endregion
		}
		///<summary></summary>
        public string TableName { get; set; }
		///<summary></summary>
        public string TableNote { get; set; }
		///<summary></summary>
        public int ColIndex { get; set; }
		///<summary></summary>
        public string ColName { get; set; }
		///<summary></summary>
        public string IsIdentity { get; set; }
		///<summary></summary>
        public string IsPK { get; set; }
		///<summary></summary>
        public string ColType { get; set; }
		///<summary></summary>
        public string ColLength { get; set; }
		///<summary></summary>
        public string ColLen { get; set; }
		///<summary></summary>
        public string ColScale { get; set; }
		///<summary></summary>
        public string IsToNull { get; set; }
		///<summary></summary>
        public string DefaultText { get; set; }
		///<summary></summary>
        public string ColNote { get; set; }
    }
	#endregion

	public class DbHelper
    {
        #region 取得数据列表

		public static List<BaseData> GetBaseData(string connectionString)
        {
            #region SQL
            string sql = @"SELECT * From BaseData";

            #endregion
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new BaseData
            {
                BaseID = row.Field<int>("BaseID"),
                BaseName = row.Field<string>("BaseName"),
                BaseOrder = row.Field<string>("BaseOrder"),
				BaseNameEng = row.Field<string>("BaseNameEng"),
				BaseAtt1 = row.Field<string>("BaseAtt1"),
				BaseAtt2 = row.Field<string>("BaseAtt2"),
				BaseAtt3 = row.Field<string>("BaseAtt3"),
				BaseAtt4 = row.Field<string>("BaseAtt4"),
				BaseAtt5 = row.Field<string>("BaseAtt5")      
            }).ToList();
        }
        
        public static List<BaseNameSpace> GetBaseNameSpaceTables(string connectionString, string tables)
        {
            #region SQL
            string sql = @"SELECT * From BaseNameSpace";

			if(!String.IsNullOrEmpty(tables))
            {
				sql += string.Format(@" where TableNames in({0})", tables);
			}

            #endregion
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new BaseNameSpace
            {
                TableNames = row.Field<string>("TableNames"),
                DBSqlNameSpace = row.Field<string>("DBSqlNameSpace"),
                WebNameSpace = row.Field<string>("WebNameSpace"),
            }).ToList();
        }

		public static List<V_SystemTableXtype> GetV_SystemTableXtype(string connectionString)
        {
            #region SQL
            string sql = @"SELECT * From V_SystemTableXtype";

            #endregion
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new V_SystemTableXtype
            {
                TableName = row.Field<string>("TableName"),
                XName = row.Field<string>("XName"),
                XType = row.Field<string>("XType"),
				CreateDate = row.Field<System.DateTime>("CreateDate")
	          
            }).ToList();
        }

		public static List<V_SystemTableFKey> GetV_SystemTableFKey(string connectionString)
        {
            #region SQL
            string sql = @"SELECT * From V_SystemTableFKey";

            #endregion
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new V_SystemTableFKey
            {
                FKName = row.Field<string>("FKName"),
                TableName = row.Field<string>("TableName"),
                ColName = row.Field<string>("ColName"),
				RefTableName = row.Field<string>("RefTableName"),
				RefColName = row.Field<string>("RefColName"),
				CnstIsNotRepl = row.Field<string>("CnstIsNotRepl"),
				CnstIsUpdateCascade = row.Field<string>("CnstIsUpdateCascade"),
				CnstIsDeleteCascade = row.Field<string>("CnstIsDeleteCascade")
	          
            }).ToList();
        }

		public static List<V_SystemTableStructure> GetV_SystemTableStructure(string connectionString)
        {
            #region SQL
            string sql = @"SELECT * From V_SystemTableStructure";

            #endregion
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new V_SystemTableStructure
            {
                TableName = row.Field<string>("TableName"),
                TableNote = row.Field<string>("TableNote"),
				ColIndex = row.Field<int>("ColIndex"),
                ColName = row.Field<string>("ColName"),
				IsIdentity = row.Field<string>("IsIdentity"),
				IsPK = row.Field<string>("IsPK"),
				ColType = row.Field<string>("ColType"),
				ColLength = row.Field<string>("ColLength"),
				ColLen = row.Field<string>("ColLen"),
				ColScale = row.Field<string>("ColScale"),
				IsToNull = row.Field<string>("IsToNull"),
				DefaultText = row.Field<string>("DefaultText"),
				ColNote = row.Field<string>("ColNote")
	          
            }).ToList();
        }

        #endregion

		#region 取得数据列表
		public static string GetFirstString(List<V_SystemTableStructure> arr, string TableName)
        {
            var model = arr.FirstOrDefault(p => p.TableName == TableName && (p.ColType == "varchar" || p.ColType == "nvarchar"));
            var result = model == null ? "" : model.ColName ;
            return result ;
        }

        public static string GetFirstDateTime(List<V_SystemTableStructure> arr, string TableName)
        {
            var model = arr.FirstOrDefault(p => p.TableName == TableName && p.ColType == "datetime");
            var result = model == null ? "创建日期" : model.ColName;
            return result;
        }

		public static string GetFirstDateColNote(List<V_SystemTableStructure> arr, string TableName)
        {
            var model = arr.FirstOrDefault(p => p.TableName == TableName && p.ColType == "datetime");
            var result = model == null ? "" : model.ColNote;
            return result;
        }

        public static string GetPKColumn(List<V_SystemTableStructure> arr, string TableName)
        {
            var model = arr.FirstOrDefault(p => p.TableName == TableName && p.IsPK == "√");
             var result = model == null ? "" : model.ColName ;
            return result ;
        }

		public static string GetPKColumnAll(List<V_SystemTableStructure> arr, string TableName)
        {
            
            var modelArr = arr.Where(p => p.TableName == TableName && p.IsPK == "√").Select(a => "t." + a.ColName);
			if (modelArr.Count() == 0)
            {
				 modelArr = arr.Where(p => p.TableName == TableName).Select(a => "t." + a.ColName);
            }
            return string.Join(",",modelArr) ;
        }

		public static List<V_SystemTableFKey> GetFKeyColumn(List<V_SystemTableFKey> arr, string TableName, string ColName = "")
        {
            var model = arr.Where(p => p.TableName == TableName || p.RefTableName == TableName);
            if (!string.IsNullOrEmpty(ColName))
            {
                model = model.Where(p => p.ColName == ColName);   
            }
            return model.ToList() ;
        }

		public static string GetSortField(List<V_SystemTableStructure> Struct,List<V_SystemTableFKey> arr,string TableName, string ColName)
        {
            var Fkey = GetFKeyColumn(arr, TableName, ColName);
            if (Fkey == null || Fkey.Count == 0) return "";
            var Model = Fkey[0];
            string RefName = GetFirstString(Struct, Model.RefTableName);
            return String.Format("{0}.{1}",Model.FKName,RefName);
        }

		public static string GetEngNameField(List<BaseData> data, List<V_SystemTableStructure> Struct, List<V_SystemTableFKey> arr, string TableName, string ColName = "")
        {
            //判断是否有 人员选择外键  BaseData外键
            var Fkey = GetFKeyColumn(arr, TableName, ColName);
            Fkey = Fkey.Where(p => p.RefTableName == "BaseData" || p.RefTableName == "BaseEmployee").ToList();

            List<string> Result = new List<string>();

            foreach (var item in Fkey)
            {
                if (item.RefTableName == "BaseEmployee" && !Result.Contains("\"BaseEmployee\""))
                {
                    Result.Add("\"BaseEmployee\"");
                }

                if (item.RefTableName == "BaseData")
                {
                    //备注BaseData名称进行比较 找到BaseNameEng
                    var model = Struct.Where(p => p.TableName == item.TableName && p.ColName == item.ColName);
                    if (model != null && model.Count() != 0)
                    {
                        string ColNote = model.ElementAt(0).ColNote ;

                        var refName = data.FirstOrDefault(p => p.BaseName == ColNote);

                        if (refName != null) Result.Add(string.Format("\"{0}\"",refName.BaseNameEng));

                    }
                }
            }
            return string.Join(",", Result);
        }
		#endregion


        #region GetDataTable
        
        public static DataTable GetDataTable(string connectionString, string commandText, params SqlParameter[] parms)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandText;
                command.Parameters.AddRange(parms);
                SqlDataAdapter adapter = new SqlDataAdapter(command);

                DataTable dt = new DataTable();
                adapter.Fill(dt);

                return dt;
            }
        }

        #endregion
    }

	#region SqlServerDbTypeMap

    public class SqlServerDbTypeMap
    {
        public static string MapCsharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }
           
        public static Type MapCommonType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
            dbtype = dbtype.ToLower();
            Type commonType = typeof(object);
            switch (dbtype)
            {
                case "bigint": commonType = typeof(long); break;
                case "binary": commonType = typeof(byte[]); break;
                case "bit": commonType = typeof(bool); break;
                case "char": commonType = typeof(string); break;
                case "date": commonType = typeof(DateTime); break;
                case "datetime": commonType = typeof(DateTime); break;
                case "datetime2": commonType = typeof(DateTime); break;
                case "datetimeoffset": commonType = typeof(DateTimeOffset); break;
                case "decimal": commonType = typeof(decimal); break;
                case "float": commonType = typeof(double); break;
                case "image": commonType = typeof(byte[]); break;
                case "int": commonType = typeof(int); break;
                case "money": commonType = typeof(decimal); break;
                case "nchar": commonType = typeof(string); break;
                case "ntext": commonType = typeof(string); break;
                case "numeric": commonType = typeof(decimal); break;
                case "nvarchar": commonType = typeof(string); break;
                case "real": commonType = typeof(Single); break;
                case "smalldatetime": commonType = typeof(DateTime); break;
                case "smallint": commonType = typeof(short); break;
                case "smallmoney": commonType = typeof(decimal); break;
                case "sql_variant": commonType = typeof(object); break;
                case "sysname": commonType = typeof(object); break;
                case "text": commonType = typeof(string); break;
                case "time": commonType = typeof(TimeSpan); break;
                case "timestamp": commonType = typeof(byte[]); break;
                case "tinyint": commonType = typeof(byte); break;
                case "uniqueidentifier": commonType = typeof(Guid); break;
                case "varbinary": commonType = typeof(byte[]); break;
                case "varchar": commonType = typeof(string); break;
                case "xml": commonType = typeof(string); break;
                default: commonType = typeof(object); break;
            }
            return commonType;
        }
    }
    #endregion

#>