#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-20 10:41:43
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Xml;
using JQ.Util;
using System.Data.Entity;
using EntityFramework.Extensions;
using System.Data.SqlClient;
using System.Data;
using System.Collections;
using DataModel;

namespace DBSql.Iso
{
    public class IsoForm : EFRepository<DataModel.Models.IsoForm>
    {
        /// <summary>
        /// 保存— 收款合同登记表
        /// </summary>
        /// <returns></returns>
        public int Save_IsoContractFee(DataModel.Models.IsoForm FormModel, List<DataModel.Models.BussFeeFact> FeeList, List<DataModel.Models.BussContract> UpdateContract)
        {
            int result = 0;
            Bussiness.BussContract _Con = new Bussiness.BussContract();
            _Con.DbContextRepository(this.UnitOfWork, this.DbContext);
            Bussiness.BussFeeFact _Fee = new Bussiness.BussFeeFact();
            _Fee.DbContextRepository(this.UnitOfWork, this.DbContext);
            Iso.IsoForm _Form = new IsoForm();
            _Form.DbContextRepository(this.UnitOfWork, this.DbContext);
            try
            {
                UnitOfWork.BeginTransaction();
                _Form.Add(FormModel);
                _Form.DbContext.SaveChanges();
                foreach (var item in FeeList)
                {
                    item.FormTableID = FormModel.FormID;
                    _Fee.Add(item);
                }
                foreach (var item in UpdateContract)
                {
                    var NewItem = _Con.Get(item.Id);
                    NewItem.ConIsFeeFinished = item.ConIsFeeFinished;
                    //NewItem = _Con.FirstOrDefault(p => p.Id == item.Id);
                    //NewItem.ConIsFeeFinished = item.ConIsFeeFinished;
                    //_Con.DbContext.Set<DataModel.Models.BussContract>().Attach(NewItem);
                    //_Con.DbContext.Entry(NewItem).State = System.Data.Entity.EntityState.Modified;
                    _Con.Edit(NewItem);
                    //设置为 "Unchanged" 或 "Modified"。
                }
                UnitOfWork.CommitTransaction();
                result = FormModel.FormID;
            }
            catch (Exception ex)
            {
                UnitOfWork.RollBackTransaction();
                result = -1;
            }


            return result;
        }

        /// <summary>
        /// 修改-收款表单
        /// </summary>
        /// <param name="FormModel"></param>
        /// <param name="FeeList"></param>
        /// <param name="UpdateContract"></param>
        /// <returns></returns>
        public int Edit_IsoContractFee(DataModel.Models.IsoForm FormModel, List<DataModel.Models.BussFeeFact> FeeList, List<DataModel.Models.BussContract> UpdateContract)
        {
            int result = 0;
            Bussiness.BussContract _Con = new Bussiness.BussContract();
            _Con.DbContextRepository(this.UnitOfWork, this.DbContext);
            Bussiness.BussFeeFact _Fee = new Bussiness.BussFeeFact();
            _Fee.DbContextRepository(this.UnitOfWork, this.DbContext);
            Iso.IsoForm _Form = new IsoForm();
            _Form.DbContextRepository(this.UnitOfWork, this.DbContext);
            try
            {
                UnitOfWork.BeginTransaction();
                _Form.Edit(FormModel);
                //查询所有IsoForm中表单
                List<DataModel.Models.BussFeeFact> _FectList = this.DbContext.Set<DataModel.Models.BussFeeFact>().AsNoTracking().Where(p => p.FormTableID == FormModel.FormID).ToList();
                foreach (var item in _FectList)
                {
                    if (FeeList.Select(p => p.Id).Contains(item.Id))
                    {
                        //修改
                        //_Con.DbContext.Set<DataModel.Models.BussContract>().Attach(NewItem);
                        //_Con.DbContext.Entry(NewItem).State = System.Data.Entity.EntityState.Modified;

                        var updateItem = FeeList.FirstOrDefault(p => p.Id == item.Id);
                        //_Fee.DbContext.Set<DataModel.Models.BussFeeFact>().a(updateItem);
                        //_Fee.DbContext.Entry(updateItem).State = System.Data.Entity.EntityState.Modified;
                        _Fee.Edit(updateItem);
                    }
                    else
                    {
                        //所有收款置为删除
                        item.DeleterEmpId = FormModel.LastModifierEmpId;
                        item.DeleterEmpName = FormModel.LastModifierEmpName;
                        item.DeletionTime = System.DateTime.Now;
                        _Fee.Edit(item);
                    }

                }
                foreach (var item in FeeList)
                {
                    //修改
                    _Fee.DbContext.Entry(item).State = System.Data.Entity.EntityState.Detached;
                    if (!_FectList.Select(p => p.Id).Contains(item.Id))
                    {
                        //新增
                        item.FormTableID = FormModel.FormID;
                        _Fee.Add(item);
                    }
                }
                foreach (var item in UpdateContract)
                {
                    var NewItem = _Con.Get(item.Id);
                    NewItem.ConIsFeeFinished = item.ConIsFeeFinished;
                    _Con.Edit(NewItem);

                }
                UnitOfWork.CommitTransaction();
                result = FormModel.FormID;
            }
            catch (Exception ex)
            {
                UnitOfWork.RollBackTransaction();
                result = -1;
            }

            return result;
        }


        public void CreateOrUpdateBySubFeeFact(DataModel.Models.IsoForm model, XmlDocument xml, EmpSession userInfo)
        {
            using (var accessor = base.DbContext)
            {
                accessor.Database.Connection.Open();
                int MainTableID = -1;
                using (var tran = base.DbContext.Database.BeginTransaction())
                {
                    #region 新增/修改数据
                    if (model.FormID > 0)
                    {

                        accessor.Entry(model).State = System.Data.Entity.EntityState.Modified;
                        accessor.SaveChanges();
                        MainTableID = model.FormID;
                    }
                    else
                    {
                        accessor.Set<DataModel.Models.IsoForm>().Add(model);
                        accessor.SaveChanges();
                        MainTableID = model.FormID;

                        var ba = new DBSql.Sys.BaseAttach();
                        //  ba.DbContextRepository(this.CurrentDbContext);
                        ba.DbContextRepository(accessor);
                        ba.MoveFile(model.FormID, userInfo.EmpID, userInfo.EmpName);
                    }
                    #endregion                 
                    var source = accessor.Set<DataModel.Models.BussSubFeeFact>().Where(m => m.FormTableID == MainTableID).ToList();
                    RecuriseCreateOrUpdate(xml.DocumentElement, source, accessor, "", MainTableID, userInfo);
                    RecuriseDelete(source, xml.DocumentElement, accessor);
                    accessor.SaveChanges();
                    tran.Commit();
                }
            }
        }
        private void RecuriseCreateOrUpdate(XmlElement xmlElement, List<DataModel.Models.BussSubFeeFact> source, DbContext accessor, string path, int mainTableID, EmpSession empSession)
        {
            var items = xmlElement.SelectNodes("Item");
            foreach (XmlElement item in items)
            {
                var id = TypeHelper.parseInt(item.GetAttribute("Id"));
                if (id < 0)
                {
                    //插入
                    var data = new DataModel.Models.BussSubFeeFact()
                    {
                        FormTableID = mainTableID,
                        ProjSubId = TypeHelper.parseInt(item.GetAttribute("ProjSubId")),
                        ConSubId = TypeHelper.parseInt(item.GetAttribute("ConSubId")),
                        SubFeeFactMoney = TypeHelper.parseDecimal(item.GetAttribute("SubFeeFactMoney")),
                        SubFeeFactDate = TypeHelper.parseDateTime(item.GetAttribute("SubFeeFactDate")),
                        SubFeePlanEmpId = empSession.EmpID,
                        SubFeeFactNote = "",
                        SubXml = item.OuterXml

                    };
                    Common.ModelConvert.MvcDefaultSave<DataModel.Models.BussSubFeeFact>(data, empSession);
                    accessor.Set<DataModel.Models.BussSubFeeFact>().Add(data);
                    accessor.SaveChanges();
                    id = data.Id;
                }
                else if (id > 0)
                {
                    var data = accessor.Set<DataModel.Models.BussSubFeeFact>().FirstOrDefault(m => m.Id == id);
                    if (data == null)
                    {
                        continue;
                    }
                    data.FormTableID = mainTableID;
                    data.ProjSubId = TypeHelper.parseInt(item.GetAttribute("ProjSubId"));
                    data.ConSubId = TypeHelper.parseInt(item.GetAttribute("ConSubId"));
                    data.SubFeeFactMoney = TypeHelper.parseDecimal(item.GetAttribute("SubFeeFactMoney"));
                    data.SubFeeFactDate = TypeHelper.parseDateTime(item.GetAttribute("SubFeeFactDate"));
                    data.SubFeePlanEmpId = empSession.EmpID;
                    data.SubFeeFactNote = "";
                    data.SubXml = item.OuterXml;
                    Common.ModelConvert.MvcDefaultSave<DataModel.Models.BussSubFeeFact>(data, empSession);
                    accessor.Entry(data).State = System.Data.Entity.EntityState.Modified;
                    accessor.SaveChanges();
                    id = data.Id;
                }
            }
        }
        private void RecuriseDelete(List<DataModel.Models.BussSubFeeFact> sources, XmlElement xmlElement, DbContext accessor)
        {
            var allItems = xmlElement.GetElementsByTagName("Item");
            foreach (var source in sources)
            {
                var isIn = false;
                foreach (XmlElement item in allItems)
                {
                    if (TypeHelper.parseInt(item.GetAttribute("Id")) == source.Id)
                    {
                        isIn = true;
                        break;
                    }
                }
                if (!isIn)
                {
                    accessor.Set<DataModel.Models.BussSubFeeFact>().Where(m => m.Id == source.Id).Delete();

                }
            }
        }

        public void CreateOrUpdateBySubInvoice(DataModel.Models.IsoForm model, XmlDocument xml, EmpSession userInfo)
        {
            using (var accessor = base.DbContext)
            {
                accessor.Database.Connection.Open();
                int MainTableID = -1;
                using (var tran = base.DbContext.Database.BeginTransaction())
                {
                    #region 新增/修改数据
                    if (model.FormID > 0)
                    {

                        accessor.Entry(model).State = System.Data.Entity.EntityState.Modified;
                        accessor.SaveChanges();
                        MainTableID = model.FormID;
                    }
                    else
                    {
                        accessor.Set<DataModel.Models.IsoForm>().Add(model);
                        accessor.SaveChanges();
                        MainTableID = model.FormID;

                        var ba = new DBSql.Sys.BaseAttach();
                        ba.DbContextRepository(accessor);
                        ba.MoveFile(model.FormID, userInfo.EmpID, userInfo.EmpName);
                    }
                    #endregion        
                    var source = accessor.Set<DataModel.Models.BussSubFeeInvoice>().Where(m => m.FormTableID == MainTableID).ToList();
                    RecuriseCreateOrUpdate(xml.DocumentElement, source, accessor, "", MainTableID, userInfo);
                    RecuriseDelete(source, xml.DocumentElement, accessor);
                    accessor.SaveChanges();
                    tran.Commit();
                }
            }
        }
        private void RecuriseCreateOrUpdate(XmlElement xmlElement, List<DataModel.Models.BussSubFeeInvoice> source, DbContext accessor, string path, int mainTableID, EmpSession userInfo)
        {
            var items = xmlElement.SelectNodes("Item");
            foreach (XmlElement item in items)
            {
                var id = TypeHelper.parseInt(item.GetAttribute("Id"));
                if (id < 0)
                {
                    //插入
                    var data = new DataModel.Models.BussSubFeeInvoice()
                    {
                        FormTableID = mainTableID,
                        ProjSubId = TypeHelper.parseInt(item.GetAttribute("ProjSubId")),
                        ConSubId = TypeHelper.parseInt(item.GetAttribute("ConSubId")),
                        SubFeeInvoiceType = TypeHelper.parseInt(item.GetAttribute("SubFeeInvoiceType")),
                        SubFeeInvoiceMoney = TypeHelper.parseDecimal(item.GetAttribute("SubFeeInvoiceMoney")),
                        SubFeeInvoiceDate = TypeHelper.parseDateTime(item.GetAttribute("SubFeeInvoiceDate")),
                        SubFeeInvoiceEmpId = userInfo.EmpID,
                        subFeeInvoiceNote = "",
                        SubXml = item.OuterXml
                    };
                    Common.ModelConvert.MvcDefaultSave<DataModel.Models.BussSubFeeInvoice>(data, userInfo);
                    accessor.Set<DataModel.Models.BussSubFeeInvoice>().Add(data);
                    accessor.SaveChanges();
                    id = data.Id;
                }
                else if (id > 0)
                {
                    var data = accessor.Set<DataModel.Models.BussSubFeeInvoice>().FirstOrDefault(m => m.Id == id);
                    if (data == null)
                    {
                        continue;
                    }
                    data.FormTableID = mainTableID;
                    data.ProjSubId = TypeHelper.parseInt(item.GetAttribute("ProjSubId"));
                    data.ConSubId = TypeHelper.parseInt(item.GetAttribute("ConSubId"));

                    data.SubFeeInvoiceType = TypeHelper.parseInt(item.GetAttribute("SubFeeInvoiceType"));
                    data.SubFeeInvoiceMoney = TypeHelper.parseDecimal(item.GetAttribute("SubFeeInvoiceMoney"));
                    data.SubFeeInvoiceDate = TypeHelper.parseDateTime(item.GetAttribute("SubFeeInvoiceDate"));
                    data.SubFeeInvoiceEmpId = userInfo.EmpID;
                    data.subFeeInvoiceNote = "";
                    data.SubXml = item.OuterXml;
                    Common.ModelConvert.MvcDefaultSave<DataModel.Models.BussSubFeeInvoice>(data, userInfo);
                    accessor.Entry(data).State = System.Data.Entity.EntityState.Modified;
                    accessor.SaveChanges();
                    id = data.Id;
                }
            }
        }
        private void RecuriseDelete(List<DataModel.Models.BussSubFeeInvoice> sources, XmlElement xmlElement, DbContext accessor)
        {
            var allItems = xmlElement.GetElementsByTagName("Item");
            foreach (var source in sources)
            {
                var isIn = false;
                foreach (XmlElement item in allItems)
                {
                    if (TypeHelper.parseInt(item.GetAttribute("Id")) == source.Id)
                    {
                        isIn = true;
                        break;
                    }
                }
                if (!isIn)
                {
                    accessor.Set<DataModel.Models.BussSubFeeInvoice>().Where(m => m.Id == source.Id).Delete();

                }
            }
        }

        /// <summary>
        /// 删除评审记录
        /// </summary>
        public void DeleteReview(List<int> list)
        {
            var isoForm = new DBSql.Iso.IsoForm();
            var isoformNode = new DBSql.Iso.IsoFormNode();
            isoForm.DbContextRepository(this.UnitOfWork, this.DbContext);
            isoformNode.DbContextRepository(this.UnitOfWork, this.DbContext);
            UnitOfWork.BeginTransaction();
            isoformNode.Delete(p => list.Contains(p.FormID));
            isoForm.Delete(p => list.Contains(p.FormID));
            UnitOfWork.CommitTransaction();
        }



        /// <summary>
        /// 删除项目交付记录
        /// </summary>
        /// <param name="ExchangeIDList"></param>
        /// <returns></returns>
        public int DeleteProjectDeliver(int[] ExchangeIDList)
        {
            int success = 0;
            IsoFormNode modelIsoFormNode = new IsoFormNode();
            IsoForm model = new IsoForm();
            var TWhere = QueryBuild<DataModel.Models.IsoForm>.True();
            TWhere = TWhere.And(p => ExchangeIDList.Contains(p.FormID));

            var TWhereFormNode = QueryBuild<DataModel.Models.IsoFormNode>.True();
            TWhereFormNode = TWhereFormNode.And(p => ExchangeIDList.Contains(p.FormID));
            modelIsoFormNode.DbContextRepository(UnitOfWork, DbContext);
            this.UnitOfWork.BeginTransaction();
            modelIsoFormNode.Delete(TWhereFormNode);
            Delete(TWhere);

            this.UnitOfWork.CommitTransaction();
            return success;
        }

        /// <summary>
        /// 新增项目交付
        /// </summary>
        /// <param name="model"></param>
        public int AddProjectDeliver(DataModel.Models.IsoForm model, List<DataModel.Models.IsoFormNode> FormNodeList)
        {
            int result = 0;
            IsoForm op = new IsoForm();
            op.DbContextRepository(this.UnitOfWork, this.DbContext);
            IsoFormNode fNodeOp = new IsoFormNode();
            fNodeOp.DbContextRepository(this.UnitOfWork, this.DbContext);

            try
            {
                //开始事务
                //UnitOfWork.BeginTransaction();
                op.Add(model);
                op.DbContext.SaveChanges();

                List<long> detailID = FormNodeList.Where(p => p.FormID == model.FormID).Select(p => p.RefID).ToList();
                fNodeOp.Delete(p => !detailID.Contains(p.RefID) && p.FormID == model.FormID);
                long next = 0;
                if (fNodeOp.GetList(p => p.FormID == model.FormID).Count() > 0)
                {
                    next = fNodeOp.GetList(p => p.FormID == model.FormID).Select(p => p.RefID).Max();
                }

                //IsoFormNode 
                foreach (var formNode in FormNodeList)
                {
                    if (formNode.RefID > 0)
                    {
                        string sql = "update IsoFormNode set  ColAttVal1=@ColAttVal1 where FormID=@FormID and RefID=@RefID";
                        List<SqlParameter> para = new List<SqlParameter>();
                        para.Add(new SqlParameter("@ColAttVal1", formNode.ColAttVal1));
                        para.Add(new SqlParameter("@FormID", formNode.FormID));
                        para.Add(new SqlParameter("@RefID", formNode.RefID));
                        fNodeOp.ExecuteNonQuery(sql, para.ToArray());
                    }
                    else
                    {
                        next = next + 1;
                        formNode.RefID = next;
                        formNode.FormID = model.FormID;
                        fNodeOp.Add(formNode);
                    }
                }
                //UnitOfWork.CommitTransaction();
                result = model.FormID;
            }
            catch
            {
                //UnitOfWork.RollBackTransaction();
            }

            return result;
        }


        /// <summary>
        /// 新增项目交付
        /// </summary>
        /// <param name="model"></param>
        /// <param name="FormNodeList"></param>
        /// <returns></returns>
        public int Edit(DataModel.Models.IsoForm model, List<DataModel.Models.IsoFormNode> FormNodeList)
        {
            int result = 0;
            IsoForm op = new IsoForm();
            op.DbContextRepository(this.UnitOfWork, this.DbContext);

            IsoFormNode fNodeOp = new IsoFormNode();
            fNodeOp.DbContextRepository(this.UnitOfWork, this.DbContext);

            try
            {
                //UnitOfWork.BeginTransaction();
                op.Edit(model);
                //删除所有
                fNodeOp.Delete(p => p.FormID == model.FormID);
                //在新增
                //foreach (var ItProj in FormNodeList)
                //{
                //    ItProj.ConID = model.Id;
                //    ProjOp.Add(ItProj);
                //}

                long next = 0;
                if (fNodeOp.GetList(p => p.FormID == model.FormID).Count() > 0)
                {
                    next = fNodeOp.GetList(p => p.FormID == model.FormID).Select(p => p.RefID).Max();
                }

                foreach (var formNode in FormNodeList)
                {
                    if (formNode.RefID > 0)
                    {
                        string sql = "update IsoFormNode set  ColAttVal1=@ColAttVal1 where FormID=@FormID and RefID=@RefID";
                        List<SqlParameter> para = new List<SqlParameter>();
                        para.Add(new SqlParameter("@ColAttVal1", formNode.ColAttVal1));
                        para.Add(new SqlParameter("@FormID", formNode.FormID));
                        para.Add(new SqlParameter("@RefID", formNode.RefID));
                        fNodeOp.ExecuteNonQuery(sql, para.ToArray());
                    }
                    else
                    {
                        next = next + 1;
                        formNode.RefID = next;
                        formNode.FormID = model.FormID;
                        fNodeOp.Add(formNode);
                    }
                }

                //UnitOfWork.CommitTransaction();
                result = model.FormID;
            }
            catch
            {
                //UnitOfWork.RollBackTransaction();
            }
            return result;
        }


        public DataTable GetListInfo(Common.SqlPageInfo queryContext, int FormTypeID, DataModel.EmpSession userInfo = null, string type = "")
        {
            string RowColumn = "f.FormID,s.SubNumber,s.SubName,cust.custName,f.ColAttDate1,f.ColAttDate2,f.CreatorEmpId";
            RowColumn += ",isnull(sub.ConSubNumber,'') as ConSubNumber";
            RowColumn += ",isnull(sub.ConSubName,'') as ConSubName";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"YSQKJL\"])[1]','nvarchar(max)'),'') as YSQKJL";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"PSYJ\"])[1]','nvarchar(max)'),'') as PSYJ";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"HZSJName\"])[1]','nvarchar(max)'),'') as HZSJName";
            if (type != "")
                RowColumn += ",flow.Id AS FlowID, flow.FlowName,flow.FlowStatusID,flow.FlowStatusName,flow.FlowXml.value('(Root/TurnedEmpIDs/text())[1]', 'nvarchar(200)') AS FlowTurnedEmpIDs ";

            if (queryContext.SelectCondtion.Contains("BussContractSubStatus"))
            {
                if (queryContext.SelectCondtion["BussContractSubStatus"].ToString() == "3")
                {
                    RowColumn += ",isnull((select sb.ConSubNumber from BussContractSub as sb inner join Flow fw on sb.[Id]=fw.FlowRefID and FlowRefTable=@RefTable where sb.[Id]=sub.[Id] and fw.FlowStatusID=3)  ,'') as ConSubNumber2";
                    RowColumn += ",isnull((select sb.ConSubName from BussContractSub as sb inner join Flow fw on sb.[Id]=fw.FlowRefID and FlowRefTable=@RefTable where sb.[Id]=sub.[Id] and fw.FlowStatusID=3)  ,'') as ConSubName2";
                }
            }



            StringBuilder strSql = new StringBuilder();
            strSql.Append(string.Format(" select Count(1) from dbo.IsoForm AS f INNER JOIN dbo.ProjSub AS s ON f.ProjId = s.Id  AND f.FormTypeId = {0} INNER JOIN dbo.BussCustomer AS cust ON s.ColAttType2 = cust.Id  LEFT JOIN dbo.BussContractSub AS sub ON s.ConSubID = sub.Id  and sub.DeleterEmpId=0  ", FormTypeID));
            //
            if (type != "")
            {
                strSql.Append(string.Format("LEFT JOIN Flow flow ON flow.FlowRefID=f.FormID and flow.FlowRefTable='{0}'", type));
            }

            strSql.Append("  where  f.DeleterEmpId=0  and  cust.DeleterEmpId=0 ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@CTStartTime",SqlDbType.DateTime),
                new SqlParameter("@CTEndTime",SqlDbType.DateTime),             
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
                new SqlParameter("@CompanyID",SqlDbType.Int),
                new SqlParameter("@RefTable",SqlDbType.VarChar),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (s.SubNumber like '%'+@TextCondtion+'%' or s.SubName like '%'+@TextCondtion+'%' or  cust.custName like '%'+@TextCondtion+'%' or sub.ConSubNumber like '%'+@TextCondtion+'%' or sub.ConSubName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "CTStartTime":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and f.CreationTime>=@CTStartTime");
                                paras[1].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "CTEndTime":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and f.CreationTime<=@CTEndTime");
                                paras[2].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and f.CreatorDepId=@CreatorDepId");
                                    paras[3].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and f.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[4].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "ProjSubTypeState":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(string.Format(" and s.SubType in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "CompanyID":
                            strSql.Append(" and s.CompanyID=@CompanyID ");
                            paras[5].Value = de.Value.ToString();
                            break;
                        case "RefTable":
                            paras[6].Value = de.Value.ToString();
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "f.FormID desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public void UpdateIsoFormInfoList(int[] ids, DataModel.EmpSession userInfo)
        {
            if (ids.Length == 0)
            {
                return;
            }
            string idSet = string.Join(",", ids);
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }
            var sbSQL = new StringBuilder();
            sbSQL.Append(string.Format("Update IsoForm set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE FormID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));
            DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
        }
        public void UpdateIsoFormSubFeeFactList(int[] ids, DataModel.EmpSession userInfo)
        {
            if (ids.Length == 0)
            {
                return;
            }
            string idSet = string.Join(",", ids);
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }
            var sbSQL = new StringBuilder();
            sbSQL.Append(string.Format("Update IsoForm set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE FormID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));
            sbSQL.Append(string.Format("Update BussSubFeeFact set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE FormTableID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));

            DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
        }
        public void UpdateIsoFormSubInvoiceFactList(int[] ids, DataModel.EmpSession userInfo)
        {
            if (ids.Length == 0)
            {
                return;
            }
            string idSet = string.Join(",", ids);
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }
            var sbSQL = new StringBuilder();
            sbSQL.Append(string.Format("Update IsoForm set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE FormID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));
            sbSQL.Append(string.Format("Update BussSubFeeInvoice set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE FormTableID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));

            DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
        }

        /// <summary>
        /// 晒图复印扫描统计表
        /// </summary>
        /// <param name="queryContext"></param>
        /// <returns></returns>
        public DataTable GetStateMentList(Common.SqlPageInfo queryContext)
        {
            string RowColumn = "f.FormID";
            //RowColumn += ",isnull(sub.ConSubNumber,'') as ConSubNumber";
            //RowColumn += ",isnull(sub.ConSubName,'') as ConSubName";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"redJianSuoHao\"])[1]','nvarchar(max)'),'') as redJianSuoHao";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"JiLuWaiWeiGongSiName\"])[1]','nvarchar(max)'),'') as JiLuWaiWeiGongSiName";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"redEngName\"])[1]','nvarchar(max)'),'') as redEngName";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"redEngJianSuoHao\"])[1]','nvarchar(max)'),'') as redEngJianSuoHao";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"stA0Number\"])[1]','nvarchar(max)'),'') as stA0Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"stA1Number\"])[1]','nvarchar(max)'),'') as stA1Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"stA2Number\"])[1]','nvarchar(max)'),'') as stA2Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"stA3Number\"])[1]','nvarchar(max)'),'') as stA3Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"stA4Number\"])[1]','nvarchar(max)'),'') as stA4Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"fyA2Number\"])[1]','nvarchar(max)'),'') as fyA2Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"fyA3Number\"])[1]','nvarchar(max)'),'') as fyA3Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"fyA4Number\"])[1]','nvarchar(max)'),'') as fyA4Number";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"stZheSuanZhangShu\"])[1]','nvarchar(max)'),'') as stZheSuanZhangShu";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"fyBenNumber\"])[1]','nvarchar(max)'),'') as fyBenNumber";
            RowColumn += ",isnull(FormCtlXml.value('(/Root/Item[@name=\"JiLuFeiYongHeSuan\"])[1]','nvarchar(max)'),'') as JiLuFeiYongHeSuan";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(string.Format(" select Count(1) from dbo.IsoForm AS f left join flow fw on f.FormID=fw.FlowRefID where RefTable ='IsoFormProjectPublish' and fw.FlowName='项目出版登记' and FlowStatusID=3 "));
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (isnull(FormCtlXml.value('(/Root/Item[@name=\"redEngName\"])[1]','nvarchar(max)'),'')  like '%'+@TextCondtion+'%'   or isnull(FormCtlXml.value('(/Root/Item[@name=\"redJianSuoHao\"])[1]','nvarchar(max)'),'') like '%'+@TextCondtion+'%'  or isnull(FormCtlXml.value('(/Root/Item[@name=\"redEngJianSuoHao\"])[1]','nvarchar(max)'),'') like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "f.FormID desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public DataTable GetList(Common.SqlPageInfo queryContext, int projectID, int phaseID)
        {
            var columns = @"f.ID,f.FlowRefID,f.FlowName,f.CreatorEmpName,f.CreatorEmpId,f.FlowStatusID,f.CreationTime,f.FlowUrl,f.FlowXml,f.FlowTitle,f.FlowStatusName
            ,(select FlowNodeEmpId from dbo.FlowNode
  where FlowNodeStatusID=29 and FlowNode.FlowID=f.id) FlowNodeEmpId ";
            var sbSql = new StringBuilder("SELECT Count(1) FROM Flow f");
            var sbCondition = new StringBuilder(" WHERE 1=1");
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                sbCondition.Append(" AND (f.FlowName LIKE @Text OR f.FlowTitle LIKE @Text)");
                sqlParameters.Add(new SqlParameter("@Text", "%" + queryContext.TextCondtion + "%"));
            }
            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;
                    switch (de.Key.ToString())
                    {
                        //case "ProjectID":
                        //    sbCondition.Append(" AND f.FlowXml.exist('Root/ProjectIDs/ProjectID/text()[.=sql:variable(\"@ProjectID\")]')=1");
                        //    sqlParameters.Add(new SqlParameter("@ProjectID", de.Value));
                        //    break;
                        case "FlowModelIDs":
                            sbCondition.Append(" AND f.FlowModelID IN (" + de.Value.ToString() + ")");
                            break;
                        case "FlowStatus":
                            sbCondition.Append(" AND f.FlowStatusID=" + de.Value.ToString());
                            break;
                    }
                }
            }
            if (projectID > 0 && phaseID > 0)
            {
                sbCondition.Append(" AND f.FlowXml.exist('Root/Projects/Project/@id[.=sql:variable(\"@ProjectID\")],Root/Projects/Project[@id=\"" + projectID + "\"]/Phase/@id[.=sql:variable(\"@PhaseID\")]')=1");
                sqlParameters.Add(new SqlParameter("@ProjectID", projectID));
                sqlParameters.Add(new SqlParameter("@PhaseID", phaseID));

            }
            else if (projectID > 0)
            {
                sbCondition.Append(" AND f.FlowXml.exist('Root/Projects/Project[@level=\"0\"]/@id[.=sql:variable(\"@ProjectID\")],Root/Projects/Project[@level=\"1\"]/@parentID[.=sql:variable(\"@ProjectID\")]')=1");
                sqlParameters.Add(new SqlParameter("@ProjectID", projectID));
            }
            queryContext.PageTotleRowCount = int.Parse(DBExecute.ExecuteScalar(sbSql.ToString() + sbCondition.ToString(), sqlParameters.ToArray()).ToString());
            if(queryContext.SelectOrder.isEmpty())
                queryContext.SelectOrder = "f.FlowRefTable,f.[CreationTime]";
            else
                queryContext.SelectOrder = "f." + queryContext.SelectOrder + ",f.FlowRefTable";
            return DBExecute.ExecuteDataTable(Helper.SqlPage.ExecPageStrSql(queryContext, columns, sbSql.Append(sbCondition)), sqlParameters.ToArray());

        }
    }
}
