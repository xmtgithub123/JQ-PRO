#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-20 10:41:43
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using JQ.Util;
using DataModel;

namespace DBSql.Iso
{
    public class IsoCheck : EFRepository<DataModel.Models.IsoCheck>
    {
        public DataTable GetSummaryList(Common.SqlPageInfo queryContext)
        {
            var sbCondition = new StringBuilder(" WHERE dtc.ModelIsoCheckID>0 AND dt.DeleterEmpId=0");
            // AND mis.DeleterEmpId=0
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                sbCondition.Append(" AND (mis.CheckItem like @text)");
                sqlParameters.Add(new SqlParameter("@text", "%" + queryContext.TextCondtion + "%"));
            }
            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "")
                    {
                        continue;
                    }
                    switch (de.Key.ToString())
                    {
                        case "PhaseID":
                            sbCondition.Append(" AND dtc.PhaseID=" + de.Value.ToString());
                            break;
                        case "SpecialID":
                            sbCondition.Append(" AND dtc.SpecialID=" + de.Value.ToString());
                            break;
                        case "CheckType":
                            sbCondition.Append(" AND mis.CheckType=" + de.Value.ToString());
                            break;
                    }
                }
            }
            //判断PageModel中查询条件是否为空
            if (queryContext.PredicateValue != null && queryContext.PredicateValue.Length > 0 && queryContext.Predicate != "")
            {
                string selectT = "";
                queryContext.SetSqlPrams(sqlParameters, ref selectT);
                sbCondition.Append(selectT);
            }
            //获取出总数
            queryContext.PageTotleRowCount = JQ.Util.TypeParse.parse<int>(DAL.DBExecute.ExecuteScalar("SELECT COUNT(1) FROM (SELECT 1 AS A FROM DesTaskCheck dtc LEFT JOIN ModelIsoCheck AS mis ON mis.Id = dtc.ModelIsoCheckID LEFT JOIN DesTask dt ON dt.Id=dtc.TaskID" + sbCondition.ToString() + " GROUP BY  dtc.PhaseID,dtc.SpecialID,mis.CheckItem,mis.CheckType) AS table1", sqlParameters.ToArray()));
            var pageIndex = queryContext.PageIndex;
            if (pageIndex == 0)
            {
                pageIndex = 1;
            }
            var pageSize = queryContext.PageSize;
            if (pageSize == 0)
            {
                pageSize = 20;
            }
            return DBExecute.ExecuteDataTable("SELECT * FROM (SELECT dtc.PhaseID,dtc.SpecialID,mis.CheckItem,COUNT(1) AS ErrorAmount,(SELECT COUNT(1) FROM DesTask dt1 WHERE dt1.TaskType = 0 and dt1.DeleterEmpId = 0 AND dt1.TaskSpecId = dtc.SpecialID AND dt1.TaskPhaseId = dtc.PhaseID) AS TotalAmount,dtc.ModelIsoCheckID,mis.CheckType,bdp.BaseName AS PhaseName, bdp.BaseOrder AS PhaseOrder,bds.BaseName AS SpecialtyName, bds.BaseOrder AS SpecialtyOrder,(SELECT BaseName FROM BaseDataSystem WHERE BaseID = mis.CheckType) AS CheckTypeName,ROW_NUMBER() OVER(ORDER BY bdp.BaseOrder, bds.BaseOrder) AS RowNumber FROM DesTaskCheck dtc LEFT JOIN ModelIsoCheck mis ON mis.Id = dtc.ModelIsoCheckID LEFT JOIN BaseData bds ON bds.BaseID = dtc.SpecialID LEFT JOIN BaseData bdp ON bdp.BaseID = dtc.PhaseID LEFT JOIN DesTask dt ON dt.Id=dtc.TaskID" + sbCondition.ToString() + " GROUP BY dtc.PhaseID,dtc.SpecialID,mis.CheckItem,mis.CheckType,bds.BaseName,bds.BaseOrder,bdp.BaseName,bdp.BaseOrder,dtc.ModelIsoCheckID) AS table1 WHERE table1.RowNumber BETWEEN " + ((pageIndex - 1) * pageSize) + " AND " + (pageIndex * pageSize), sqlParameters.ToArray());
        }

        public DataTable GetDetailISOCheckList(Common.SqlPageInfo queryContext)
        {
            var sbSQL = new StringBuilder(" FROM DesTaskCheck dtc LEFT JOIN ModelIsoCheck mis ON mis.Id = dtc.ModelIsoCheckID LEFT JOIN DesTask dt ON dt.Id=dtc.TaskID LEFT JOIN Project p ON dtc.ProjID=p.Id");
            var sbCondition = new StringBuilder(" WHERE dt.DeleterEmpId=0");
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                sbCondition.Append(" AND (p.ProjNumber LIKE @TEXT OR p.ProjName LIKE @TEXT OR mis.CheckItem LIKE @TEXT)");
                sqlParameters.Add(new SqlParameter("@TEXT", "%" + queryContext.TextCondtion + "%"));
            }
            foreach (DictionaryEntry de in queryContext.SelectCondtion)
            {
                if (de.Value == null || de.Value.ToString().Trim() == "")
                {
                    continue;
                }
                switch (de.Key.ToString())
                {
                    case "PhaseID":
                        sbCondition.Append(" AND dtc.PhaseID=" + de.Value.ToString());
                        break;
                    case "SpecialID":
                        sbCondition.Append(" AND dtc.SpecialID=" + de.Value.ToString());
                        break;
                    case "CheckType":
                        sbCondition.Append(" AND mis.CheckType=" + de.Value.ToString());
                        break;
                    case "ModelIsoCheckID":
                        sbCondition.Append(" AND dtc.ModelIsoCheckID=" + de.Value.ToString());
                        break;
                }
            }
            //判断PageModel中查询条件是否为空
            if (queryContext.PredicateValue != null && queryContext.PredicateValue.Length > 0 && queryContext.Predicate != "")
            {
                string selectT = "";
                queryContext.SetSqlPrams(sqlParameters, ref selectT);
                sbCondition.Append(selectT);
            }
            var rowColumns = "dtc.Id,p.ProjNumber,p.ProjName,bdp.BaseName AS PhaseName,bds.BaseName AS SpecialtyName,dt.TaskName,dt.TaskEmpName,dtc.CheckNote,CheckEmpIDName,dtc.CheckDate";
            queryContext.PageTotleRowCount = JQ.Util.TypeParse.parse<int>(DAL.DBExecute.ExecuteScalar("SELECT COUNT(1) AS A " + sbSQL.ToString() + sbCondition.ToString(), sqlParameters.ToArray()));
            var pageIndex = queryContext.PageIndex;
            if (pageIndex == 0)
            {
                pageIndex = 1;
            }
            var pageSize = queryContext.PageSize;
            if (pageSize == 0)
            {
                pageSize = 20;
            }
            sbSQL.Append(" LEFT JOIN BaseData bds ON bds.BaseID = dtc.SpecialID LEFT JOIN BaseData bdp ON bdp.BaseID = dtc.PhaseID");
            return DBExecute.ExecuteDataTable("SELECT * FROM (SELECT " + rowColumns + ",ROW_NUMBER() OVER(ORDER BY bdp.BaseOrder, bds.BaseOrder) AS RowNumber " + sbSQL.ToString() + sbCondition.ToString() + ") AS table1 WHERE table1.RowNumber BETWEEN " + ((pageIndex - 1) * pageSize) + " AND " + (pageIndex * pageSize), sqlParameters.ToArray());
        }

        public DataTable GetDetailsList(Common.SqlPageInfo queryContext)
        {
            string RowColumn = " c.Id,ProjNumber,ProjName";
            RowColumn += ",b.BaseName AS PhaseName,t.TaskName";
            RowColumn += ",bs.BaseName AS  ErrorTypeName,c.CheckNote,c.CheckEmpIDName,c.CheckDate,be.EmpName  AS DesignEmpName,be1.EmpName AS CheckEmpName ";
            RowColumn += ",(case when c.SpecialID=0 then '汇总专业'else  b1.BaseName end) AS SpecialName ";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(" select Count(1) from dbo.DesTaskCheck AS c INNER JOIN dbo.DesTask AS t ON c.TaskID = t.Id   INNER JOIN dbo.Project AS p ON c.ProjID = p.Id  INNER JOIN dbo.BaseData AS b ON c.PhaseID = b.BaseID   INNER JOIN dbo.BaseData AS b1 ON c.SpecialID = b1.BaseID INNER JOIN dbo.BaseDataSystem AS bs ON c.CheckErrTypeID = bs.BaseID  INNER JOIN dbo.BaseEmployee AS be ON c.CheckEmpId = be.EmpID INNER JOIN dbo.BaseEmployee AS be1 ON t.TaskEmpID = be1.EmpID where 1=1 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@IsExtract",SqlDbType.Int),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
                new SqlParameter("@ModelIsoCheckID",SqlDbType.Int)
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (c.CheckNote like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ModelIsoCheckID":
                            if (de.Value.ToString() == "-1")
                            {
                                strSql.Append(" and ModelIsoCheckID=0 ");
                            }
                            else if (de.Value.ToString() != "0")
                            {
                                strSql.Append(" and ModelIsoCheckID=@ModelIsoCheckID ");
                                paras[4].Value = Convert.ToInt32(de.Value);
                            }
                            else
                            {
                                strSql.Append(" and ModelIsoCheckID=@ModelIsoCheckID ");
                                paras[4].Value = 0;
                            }
                            break;
                        case "PhaseID":
                            if (de.Value.ToString() != "0")
                            {
                                strSql.Append(string.Format(" AND c.PhaseID in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "SpecialID":
                            if (de.Value.ToString() != "0")
                            {
                                strSql.Append(string.Format(" AND c.SpecialID in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "CheckErrTypeID":
                            if (de.Value.ToString() != "0")
                            {
                                strSql.Append(string.Format(" AND c.CheckErrTypeID in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "IsExtract":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.IsExtract=@IsExtract ");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and be.EmpDepID=@CreatorDepId");
                                    paras[2].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and c.CheckEmpId=@CreatorEmpId");
                                    paras[3].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            //判断PageModel中查询条件是否为空
            if (queryContext.PredicateValue != null && queryContext.PredicateValue.Length > 0 && queryContext.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                queryContext.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "c.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }
        public void setExtract(string idSet, EmpSession emp)
        {
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }

            using (var accessor = base.DbContext)
            {
                accessor.Database.Connection.Open();
                using (var tran = base.DbContext.Database.BeginTransaction())
                {

                    string[] list = idSet.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                    foreach (string s in list)
                    {
                        int id = TypeHelper.parseInt(s);
                        var data = accessor.Set<DataModel.Models.DesTaskCheck>().FirstOrDefault(m => m.Id == id);
                        if (data == null)
                        {
                            continue;
                        }
                        data.IsExtract = 1;
                        accessor.Entry(data).State = System.Data.Entity.EntityState.Modified;
                        accessor.SaveChanges();

                        DataModel.Models.ModelIsoCheck model = new DataModel.Models.ModelIsoCheck();
                        model.PhaseID = data.PhaseID;
                        model.SpecialID = data.SpecialID;
                        model.CheckType = 19;
                        model.CheckItem = data.CheckNote;
                        model.CheckNote = "";
                        model.DesTaskCheckId = data.Id;
                        model.CheckErrTypeID = data.CheckErrTypeID;
                        Common.ModelConvert.MvcDefaultSave<DataModel.Models.ModelIsoCheck>(model, emp);

                        accessor.Set<DataModel.Models.ModelIsoCheck>().Add(model);
                        accessor.SaveChanges();

                    }
                    accessor.SaveChanges();
                    tran.Commit();
                }
            }

        }


    }
}
