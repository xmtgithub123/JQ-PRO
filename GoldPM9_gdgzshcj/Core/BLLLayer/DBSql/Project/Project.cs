#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Web;
using System.Xml;
using System.Collections;
using System.Data.SqlClient;
using JQ.Util;
using DataModel;
using System.Web.Script.Serialization;

namespace DBSql.Project
{
    public class Project : EFRepository<DataModel.Models.Project>
    {
        private DBSql.Sys.BaseData baseData = new Sys.BaseData();
        /// <summary>
        /// 获取工程的各个阶段
        /// </summary>
        /// <param name="PhaseIDs"></param>
        /// <returns></returns>
        public string GetProjPhase(string PhaseIDs)
        {
            string PhaseName = string.Empty;
            if (!string.IsNullOrEmpty(PhaseIDs))
            {
                string[] PhaseID = PhaseIDs.Split(',');
                foreach (string phaseID in PhaseID)
                {
                    int ID = JQ.Util.TypeHelper.parseInt(phaseID);
                    DataModel.Models.BaseData data = baseData.Get(ID);
                    if (data != null)
                    {
                        if (PhaseName != "")
                        {
                            PhaseName = PhaseName + ",";
                        }

                        PhaseName += data.BaseName;
                    }
                }
            }
            return PhaseName;
        }
        /// <summary>
        /// 获取所有的底层无孩子节点的项目信息
        /// </summary>
        public IEnumerable<DataModel.Models.Project> GetAllLeafNodeProjInfo(Common.SqlPageInfo pageModel)
        {
            List<int> parentId = GetList(p => p.ParentId != 0).Select(p => p.ParentId).Distinct().ToList();//获取父节点的集合
            IEnumerable<DataModel.Models.Project> project = GetPagedList(p => !parentId.Contains(p.Id) && p.DeleterEmpId == 0, pageModel).ToList();//排除为父节点的信息
            return project;
        }

        /// <summary>
        /// 获取所有的底层节点的项目信息(绩效专用)
        /// </summary>
        public IEnumerable<DataModel.Models.Project> GetAllLeafNodeProjInfo()
        {
            List<int> parentId = GetList(p => p.ParentId != 0).Select(p => p.ParentId).Distinct().ToList();//获取父节点的集合
            IEnumerable<DataModel.Models.Project> project = GetList(p => !parentId.Contains(p.Id) && p.DeleterEmpId == 0).ToList();//排除为父节点的信息
            return project;
        }

        /// <summary>
        /// 获取出最顶层的Project
        /// </summary>
        public DataModel.Models.Project GetTopProject(int projectID)
        {
            if (projectID == 0)
            {
                return null;
            }
            var project = GetQuery().FirstOrDefault(m => m.Id == projectID);
            if (project == null)
            {
                return null;
            }
            if (project.ColAttVal2 == "")
            {
                return project;
            }
            var topProjectID = Common.ModelConvert.ConvertToDefault<int>(project.ColAttVal2.Substring(0, project.ColAttVal2.IndexOf('/')));
            if (topProjectID == 0)
            {
                return null;
            }
            return GetQuery().FirstOrDefault(m => m.Id == topProjectID);
        }

        public string GetProjectListForTree(int projectID)
        {
            using (var dt = DBExecute.ExecuteDataTable("SELECT Id,ParentId,ProjNumber,ProjName,(SELECT Id,ProjId,TaskGroupParentId,TaskGroupPathIds,TaskGroupName,TaskGroupType,TaskGroupStatus FROM DesTaskGroup WHERE ProjId=p.Id ORDER BY TaskGroupOrderNum FOR XML PATH('Item')) AS TaskGroup FROM Project p WHERE p.ID=" + projectID + " OR p.ColAttVal2 LIKE '" + projectID + "/%'"))
            {
                var topRow = dt.Select("Id=" + projectID);
                if (topRow.Length == 0)
                {
                    return "[]";
                }
                StringBuilder sbJson = new StringBuilder("[");
                RecuriseBuildTreeString(dt, topRow[0], sbJson);
                return sbJson.Append("]").ToString();
            }
        }

        private string GetXmlNodeText(XmlNode xmlNode, string path)
        {
            var node = xmlNode.SelectSingleNode(path);
            if (node == null)
            {
                return "";
            }
            return node.InnerText;
        }

        private void RecuriseBuildTreeString(DataTable dt, DataRow parentRow, StringBuilder sbJson)
        {
            sbJson.Append("{");
            XmlDocument xmlDocument = new XmlDocument();
            sbJson.Append("\"id\":\"P_" + parentRow["Id"].ToString() + "\"");
            sbJson.Append(",\"projectid\":" + parentRow["Id"].ToString());
            if (!string.IsNullOrEmpty(parentRow["TaskGroup"].ToString()))
            {
                xmlDocument.LoadXml("<Root>" + parentRow["TaskGroup"].ToString() + "</Root>");
                var xItem = (XmlElement)xmlDocument.SelectSingleNode("Root/Item[TaskGroupParentId=\"0\"]");
                if (xItem != null)
                {
                    sbJson.Append(",\"taskgroupid\":" + GetXmlNodeText(xItem, "Id"));
                }
                else
                {
                    sbJson.Append(",\"taskgroupid\":0");
                }
            }
            sbJson.Append(",\"text\":\"" + HttpUtility.UrlEncode("[" + parentRow["ProjNumber"].ToString() + "]" + parentRow["ProjName"].ToString()) + "\"");
            sbJson.Append(",\"type\":0");
            var nexts = dt.Select("ParentId=" + parentRow["Id"].ToString());
            if (nexts.Length > 0 || xmlDocument.DocumentElement != null)
            {
                sbJson.Append(",\"state\":\"open\"");
                sbJson.Append(",\"children\":[");
                var amount = 0;
                if (xmlDocument.DocumentElement != null)
                {
                    //获取出顶级的数据
                    var xItem = (XmlElement)xmlDocument.SelectSingleNode("Root/Item[TaskGroupParentId=\"0\"]");
                    if (xItem != null)
                    {
                        //获取出阶段
                        foreach (XmlElement xPhase in xmlDocument.SelectNodes("Root/Item[TaskGroupParentId=\"" + GetXmlNodeText(xItem, "Id") + "\"]"))
                        {
                            if (amount != 0)
                            {
                                sbJson.Append(",");
                            }
                            amount++;
                            sbJson.Append("{");
                            sbJson.Append("\"id\":\"T_" + GetXmlNodeText(xPhase, "Id") + "\"");
                            sbJson.Append(",\"text\":\"" + HttpUtility.UrlEncode(GetXmlNodeText(xPhase, "TaskGroupName")) + "\"");
                            sbJson.Append(",\"projectid\":" + GetXmlNodeText(xPhase, "ProjId"));
                            sbJson.Append(",\"taskgroupid\":" + GetXmlNodeText(xPhase, "Id"));
                            sbJson.Append(",\"type\":" + GetXmlNodeText(xPhase, "TaskGroupType"));
                            sbJson.Append(",\"iconCls\":\"" + GetTaskGroupStatusIconCls(GetXmlNodeText(xPhase, "TaskGroupStatus")) + "\"");
                            //sbJson.Append("");
                            var groups = xmlDocument.SelectNodes("Root/Item[TaskGroupParentId=\"" + GetXmlNodeText(xPhase, "Id") + "\"]");
                            if (groups.Count > 0)
                            {
                                sbJson.Append(",\"children\":[");
                                var amount1 = 0;
                                foreach (XmlElement xGroup in groups)
                                {
                                    if (amount1 != 0)
                                    {
                                        sbJson.Append(",");
                                    }
                                    amount1++;
                                    sbJson.Append("{");
                                    sbJson.Append("\"id\":\"" + GetXmlNodeText(xGroup, "Id") + "\"");
                                    sbJson.Append(",\"projectid\":" + GetXmlNodeText(xGroup, "ProjId"));
                                    sbJson.Append(",\"taskgroupid\":" + GetXmlNodeText(xGroup, "Id"));
                                    sbJson.Append(",\"phaseid\":" + GetXmlNodeText(xPhase, "Id"));
                                    sbJson.Append(",\"text\":\"" + HttpUtility.UrlEncode(GetXmlNodeText(xGroup, "TaskGroupName")) + "\"");
                                    sbJson.Append(",\"type\":" + GetXmlNodeText(xGroup, "TaskGroupType"));
                                    sbJson.Append(",\"iconCls\":\"" + GetTaskGroupStatusIconCls(GetXmlNodeText(xGroup, "TaskGroupStatus")) + "\"");
                                    sbJson.Append("}");
                                }
                                sbJson.Append("]");
                            }
                            sbJson.Append("}");
                        }
                    }
                }
                for (var i = 0; i < nexts.Length; i++)
                {
                    if (amount != 0)
                    {
                        sbJson.Append(",");
                    }
                    amount++;
                    RecuriseBuildTreeString(dt, nexts[i], sbJson);
                }
                sbJson.Append("]");
            }
            sbJson.Append("}");
        }

        public string GetProjectListForTree2(int projectID)
        {
            using (var dt = DBExecute.ExecuteDataTable("SELECT Id,ParentId,ProjNumber,ProjName,(SELECT Id,ProjId,TaskGroupParentId,TaskGroupPathIds,TaskGroupName,TaskGroupType,TaskGroupStatus FROM DesTaskGroup WHERE ProjId=p.Id AND DeleterEmpId=0 ORDER BY TaskGroupOrderNum FOR XML PATH('Item')) AS TaskGroup FROM Project p WHERE p.DeleterEmpId=0 and (p.ID=" + projectID + " OR p.ColAttVal2 LIKE '" + projectID + "/%')"))
            {
                var topRow = dt.Select("Id=" + projectID);
                if (topRow.Length == 0)
                {
                    return "[]";
                }
                StringBuilder sbJson = new StringBuilder("[");
                RecuriseBuildTreeString2(dt, topRow[0], sbJson);
                return sbJson.Append("]").ToString();
            }
        }

        private void RecuriseBuildTreeString2(DataTable dt, DataRow parentRow, StringBuilder sbJson)
        {
            sbJson.Append("{");
            XmlDocument xmlDocument = new XmlDocument();
            sbJson.Append("\"id\":\"P_" + parentRow["Id"].ToString() + "\"");
            sbJson.Append(",\"text\":\"" + HttpUtility.UrlEncode("[" + parentRow["ProjNumber"].ToString() + "]" + parentRow["ProjName"].ToString()) + "\"");
            sbJson.Append(",\"userdata\":{");
            sbJson.Append("\"projectid\":" + parentRow["Id"].ToString());
            sbJson.Append(",\"taskgrouptype\":0");
            if (!string.IsNullOrEmpty(parentRow["TaskGroup"].ToString()))
            {
                xmlDocument.LoadXml("<Root>" + parentRow["TaskGroup"].ToString() + "</Root>");
                var xItem = (XmlElement)xmlDocument.SelectSingleNode("Root/Item[TaskGroupParentId=\"0\"]");
                if (xItem != null)
                {
                    sbJson.Append(",\"taskgroupid\":" + GetXmlNodeText(xItem, "Id"));
                }
                else
                {
                    sbJson.Append(",\"taskgroupid\":0");
                }
            }
            sbJson.Append("}");
            var nexts = dt.Select("ParentId=" + parentRow["Id"].ToString());
            if (nexts.Length > 0 || xmlDocument.DocumentElement != null)
            {
                sbJson.Append(",\"open\":1");
                sbJson.Append(",\"items\":[");
                var amount = 0;
                if (xmlDocument.DocumentElement != null)
                {
                    //获取出顶级的数据
                    var xItem = (XmlElement)xmlDocument.SelectSingleNode("Root/Item[TaskGroupParentId=\"0\"]");
                    if (xItem != null)
                    {
                        //获取出阶段
                        foreach (XmlElement xPhase in xmlDocument.SelectNodes("Root/Item[TaskGroupParentId=\"" + GetXmlNodeText(xItem, "Id") + "\"]"))
                        {
                            if (amount != 0)
                            {
                                sbJson.Append(",");
                            }
                            amount++;
                            sbJson.Append("{");
                            sbJson.Append("\"id\":\"T_" + GetXmlNodeText(xPhase, "Id") + "\"");
                            sbJson.Append(",\"text\":\"" + HttpUtility.UrlEncode(GetXmlNodeText(xPhase, "TaskGroupName")) + "\"");
                            sbJson.Append(",\"userdata\":{");
                            sbJson.Append("\"projectid\":" + GetXmlNodeText(xPhase, "ProjId"));
                            sbJson.Append(",\"taskgroupid\":" + GetXmlNodeText(xPhase, "Id"));
                            sbJson.Append(",\"taskgrouptype\":" + GetXmlNodeText(xPhase, "TaskGroupType"));
                            sbJson.Append(",\"phaseid\":" + GetXmlNodeText(xPhase, "Id"));
                            sbJson.Append("}");
                            sbJson.Append(",\"icons\":{\"file\":\"" + GetTaskGroupStatusIconCls(GetXmlNodeText(xPhase, "TaskGroupStatus")) + "\"}");
                            //sbJson.Append("");
                            var groups = xmlDocument.SelectNodes("Root/Item[TaskGroupParentId=\"" + GetXmlNodeText(xPhase, "Id") + "\"]");
                            if (groups.Count > 0)
                            {
                                sbJson.Append(",\"open\":1");
                                sbJson.Append(",\"items\":[");
                                var amount1 = 0;
                                foreach (XmlElement xGroup in groups)
                                {
                                    if (amount1 != 0)
                                    {
                                        sbJson.Append(",");
                                    }
                                    amount1++;
                                    sbJson.Append("{");
                                    sbJson.Append("\"id\":\"" + GetXmlNodeText(xGroup, "Id") + "\"");
                                    sbJson.Append(",\"text\":\"" + HttpUtility.UrlEncode(GetXmlNodeText(xGroup, "TaskGroupName")) + "\"");
                                    sbJson.Append(",\"userdata\":{");
                                    sbJson.Append("\"projectid\":" + GetXmlNodeText(xGroup, "ProjId"));
                                    sbJson.Append(",\"taskgroupid\":" + GetXmlNodeText(xGroup, "Id"));
                                    sbJson.Append(",\"phaseid\":" + GetXmlNodeText(xPhase, "Id"));
                                    sbJson.Append(",\"taskgrouptype\":" + GetXmlNodeText(xGroup, "TaskGroupType"));
                                    sbJson.Append("}");
                                    sbJson.Append(",\"icons\":{\"file\":\"" + GetTaskGroupStatusIconCls(GetXmlNodeText(xGroup, "TaskGroupStatus")) + "\"}");
                                    sbJson.Append("}");
                                }
                                sbJson.Append("]");
                            }
                            sbJson.Append("}");
                        }
                    }
                }
                for (var i = 0; i < nexts.Length; i++)
                {
                    if (amount != 0)
                    {
                        sbJson.Append(",");
                    }
                    amount++;
                    RecuriseBuildTreeString2(dt, nexts[i], sbJson);
                }
                sbJson.Append("]");
            }
            sbJson.Append("}");
        }


        /// <summary>
        /// 获取 分组状态 图标
        /// </summary>
        /// <param name="status"></param>
        /// <returns></returns>
        private string GetTaskGroupStatusIconCls(string status)
        {
            var icon = "";
            switch (status)
            {
                case "0":
                    icon = "fa fa-circle-o";
                    break;
                case "1":
                    icon = "fa fa-dot-circle-o";
                    break;
                case "2":
                    icon = "fa fa-play-circle";
                    break;
                case "3":
                    icon = "fa fa-check-circle";
                    break;
                case "4":
                    icon = "fa fa-minus-circle";
                    break;
            }
            return icon;
        }

        public DataTable GetListInfo(Common.SqlPageInfo queryContext, int filter, List<string> baseOrder = null)
        {
            string RowColumn = "p.Id,p.ProjNumber,p.ProjName,p.ParentId,p.DateCreate,p.DatePlanFinish,p.ColAttType5,p.BridgeFact";
            RowColumn += ",p.CustName,p.ProjTaskContent,p.ProjFeeSource,p.DatePlanDeliver,p.ProjDemand,p.ProjNoteOther";
            if (filter == 1)
            {
                RowColumn += ",'open' as state";
            }
            else
            {
                RowColumn += ",(case when (select Count(Id) from Project where  DeleterEmpId=0 and ParentId=p.Id)>0 then 'closed' else 'open' end ) as state";
            }
            RowColumn += ", isnull((select EmpName from BaseEmployee where  DeleterEmpId=0 and EmpId=p.ProjEmpId),'') as ProjEmpName";
            RowColumn += ",ProjPhaseIds,isnull((SELECT  BaseName + ','FROM BaseData  WHERE  CHARINDEX(','+CAST(BaseID AS  nvarchar(5))+',',','+p.ProjPhaseIds+',')>0 FOR XML PATH('')),'') as PhaseNames";
            RowColumn += ",isnull((SELECT BaseName FROM BaseData  WHERE  BaseId=p.ProjTypeID),'') as ProjTypeName";
            RowColumn += ",isnull((SELECT BaseName FROM BaseData  WHERE  BaseId=p.ProjPropertyID),'') as ProjPropertyName";
            RowColumn += ",isnull((SELECT BaseName FROM BaseData  WHERE  BaseId=p.ProjVoltID),'') as ProjVoltName";
            RowColumn += ",case p.CompanyID when 0 then 'FGS' when 1 then 'SJ' when 2 then 'GC' end as CompanyType";
            RowColumn += ",p.ColAttType1,(select BaseName from BaseData aa where aa.BaseId=p.ColAttType1) as ColAttType1Name";
            //RowColumn += ",f.Id AS FlowID, f.FlowName,f.FlowStatusID,f.FlowStatusName,f.FlowXml.value('(Root/TurnedEmpIDs/text())[1]', 'nvarchar(200)') AS FlowTurnedEmpIDs ";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(" select Count(1) from dbo.Project AS p inner  join BaseData as b on p.ProjTypeID=b.baseID  where p.DeleterEmpId=0 and p.ParentId=0 and p.ColAttType6=0");
            if (baseOrder != null && baseOrder.Count > 0)
            {
                strSql.Append(" and  ( ");
                for (int i = 0; i < baseOrder.Count; i++)
                {
                    if (i > 0)
                    {
                        strSql.Append(" or  ");
                    }
                    strSql.Append(" b.BaseOrder LIKE '" + baseOrder[i] + "%'");
                }
                strSql.Append("  ) ");
            }


            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@DateCreateS",SqlDbType.DateTime),
                new SqlParameter("@DateCreateE",SqlDbType.DateTime),
                new SqlParameter("@DatePlanFinishS",SqlDbType.DateTime),
                new SqlParameter("@DatePlanFinishE",SqlDbType.DateTime),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
                new SqlParameter("@ProjEmpID",SqlDbType.Int),
                new SqlParameter("@CompanyID",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and id in (SELECT ParentId FROM dbo.Project as p1 WHERE  p1.DeleterEmpId=0  and  (p1.ProjNumber like '%'+@TextCondtion+'%' or p1.ProjName like '%'+@TextCondtion+'%' )) ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "DateCreateS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DateCreate>=@DateCreateS");
                                paras[1].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "DateCreateE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DateCreate<=@DateCreateE");
                                paras[2].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "DatePlanFinishS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DatePlanFinish>=@DatePlanFinishS");
                                paras[3].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "DatePlanFinishE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DatePlanFinish<=@DatePlanFinishE");
                                paras[4].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "ProjPropertyID":
                            {
                                strSql.Append(string.Format(" and p.ProjPropertyID in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "ProjDepId":
                            {
                                strSql.Append(string.Format(" and p.ProjDepId in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "ProjJoinDepIds":
                            strSql.Append(string.Format(@" and EXISTS (
                                            SELECT * FROM(
                                            (SELECT ID FROM dbo.Split(p.ProjJoinDepIds, ',')) x INNER JOIN
                                            (SELECT ID FROM dbo.Split('{0}', ',')) z ON x.ID = z.ID))", de.Value.ToString()));
                            break;
                        case "ProjectType":
                            {
                                strSql.Append(string.Format(" and p.ProjTypeID in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "ProjVoltID":
                            {
                                strSql.Append(string.Format(" and p.ProjVoltID in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and p.CreatorDepId=@CreatorDepId");
                                    paras[5].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and p.CreatorEmpId=@CreatorEmpId");
                                    paras[6].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "ProjEmpID":
                            if (de.Value.ToString() != "0")
                            {
                                strSql.Append(" and (p.CreatorEmpId=@ProjEmpID or p.ProjEmpId=@ProjEmpID ");//项目负责人
                                strSql.Append(" or (select count(1) from DesTaskGroup dtp where dtp.ProjID in (select id from Project ps where ps.ParentId=p.Id ) and dtp.DeleterEmpId=0 and TaskGroupEmpID=@ProjEmpID )>0 ");//阶段负责人
                                strSql.Append(" or (select count(1) from DesTask dtk where dtk.ProjID in (select id from Project ps where ps.ParentId=p.Id ) and dtk.DeleterEmpId=0 and TaskEmpID=@ProjEmpID)>0 ");//任务负责人
                                strSql.Append(" ) ");
                                paras[7].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "CompanyID":
                            strSql.Append(" and p.CompanyID=@CompanyID ");//项目负责人
                            paras[8].Value = Convert.ToInt32(de.Value.ToString());
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "p.Id desc";
            }
            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);
            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        public DataTable GetChildrenListInfo(int ParentId, string refTable = "")
        {
            string RowColumn = "SELECT p.Id,p.ProjNumber,p.ProjName,p.DateCreate,p.DatePlanFinish";
            RowColumn += ", isnull((select EmpName from BaseEmployee where  DeleterEmpId=0 and EmpId=p.ProjEmpId),'') as ProjEmpName";
            RowColumn += ",isnull((SELECT  BaseName + ','FROM BaseData  WHERE  CHARINDEX(','+CAST(BaseID AS  nvarchar(5))+',',','+p.ProjPhaseIds+',')>0 FOR XML PATH('')),'') as PhaseNames";
            RowColumn += ",isnull((SELECT BaseName FROM BaseData WHERE BaseId=p.ProjTypeID),'') as ProjTypeName";
            RowColumn += ",isnull((SELECT BaseName FROM BaseData WHERE BaseId=p.ProjPropertyID),'') as ProjPropertyName";
            RowColumn += ",isnull((SELECT BaseName FROM BaseData WHERE BaseId=p.ProjVoltID),'') as ProjVoltName";
            RowColumn += string.Format(",p.CreatorEmpId,f.Id AS FlowID,f.FlowName,f.FlowStatusID,f.FlowStatusName,f.FlowXml.value('(Root/TurnedEmpIDs/text())[1]','nvarchar(200)') AS FlowTurnedEmpIDs,p.BridgeGuid, p.BridgeFact,(select COUNT(1) from BusProjContractRelation where ProjID = p.Id) as Number from Project as p LEFT JOIN Flow f ON f.FlowRefID=p.Id and f.FlowRefTable IN ({1}) where p.DeleterEmpId=0 and p.ParentId={0} and p.ColAttType6=0 AND (f.FlowRefTable  in ({1}) OR f.FlowRefTable IS NULL)", ParentId, refTable);
            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, RowColumn);

        }

        public void Favourite(int projectID, int empID)
        {
            var data = this.DbContext.Set<DataModel.Models.ProjectFavourite>().FirstOrDefault(m => m.ProjectId == projectID && m.EmpID == empID);
            if (data == null)
            {
                this.DbContext.Set<DataModel.Models.ProjectFavourite>().Add(new DataModel.Models.ProjectFavourite()
                {
                    CreationTime = DateTime.Now,
                    EmpID = empID,
                    Note = "",
                    ProjectId = projectID
                });
                this.DbContext.SaveChanges();
            }
        }

        public void UnFavourite(int projectID, int empID)
        {
            DAL.DBExecute.ExecuteNonQuery("DELETE FROM ProjectFavourite WHERE ProjectId=" + projectID + " AND EmpID=" + empID);
        }

        public int GetProjNameCount(string ProjName, int Id = 0)
        {
            int Res = 0;
            string sql = "select count(*) from Project where ColAttType6=1 and ParentId!=0 and ProjName=@ProjName and DeleterEmpId = 0 ";

            if (Id > 0)
            {
                sql += " and Id!=" + Id;
            }

            SqlParameter[] sqlp = {
                new SqlParameter("@ProjName",SqlDbType.NVarChar)
            };
            sqlp[0].Value = ProjName.Trim();
            try
            {
                Res = Convert.ToInt32(DBExecute.ExecuteScalar(sql, sqlp));
            }
            catch { }
            return Res;
        }

        public DataTable GetBiddingFileList(Common.SqlPageInfo queryContext)
        {
            string RowColumn = "p.Id,b.BiddingNumber,b.BiddingBatch,b.EngineeringName,p.ProjName,p.ParentId";
            RowColumn += ",p.DateCreate,p.DatePlanStart,p.DatePlanFinish";
            RowColumn += ",isnull((select EmpName from BaseEmployee where EmpID=p.ProjEmpId),'') as ProjEmpName";
            RowColumn += ",isnull((select EmpName from BaseEmployee where EmpID=p.ColAttType9),'') as BusinessEmpName";
            RowColumn += ",isnull((select EmpName from BaseEmployee where EmpID=p.ColAttType10),'') as TechnologyEmpName";
            RowColumn += ",fl.Id as FlowID,fl.FlowName,fl.FlowStatusID,fl.FlowStatusName,FlowXml.value('(/Root/TurnedEmpIDs)[1]','varchar(50)') as TurnedEmpIDs,p.CreatorEmpId";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(@" select Count(1) from dbo.Project AS p  inner join dbo.BussBiddingInfo AS  b ON p.ColAttType7=b.Id
                        left join dbo.BussCustomer AS cust ON b.CustID=cust.Id
                        left join Flow fl on p.Id=fl.FlowRefID and FlowRefTable='BussBiddingFile'
                        where p.ParentId!=0 and p.ColAttType6=1 and p.DeleterEmpId=0 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),

                new SqlParameter("@DateCreateS",SqlDbType.DateTime),
                new SqlParameter("@DateCreateE",SqlDbType.DateTime),

                new SqlParameter("@DatePlanStartS",SqlDbType.DateTime),
                new SqlParameter("@DatePlanStartE",SqlDbType.DateTime),

                new SqlParameter("@DatePlanFinishS",SqlDbType.DateTime),
                new SqlParameter("@DatePlanFinishE",SqlDbType.DateTime),

                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
                new SqlParameter("@CompanyID",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (b.BiddingNumber like '%'+@TextCondtion+'%' or b.BiddingBatch like '%'+@TextCondtion+'%' or bp.PackageNumber like '%'+@TextCondtion+'%'  or p.ProjName like '%'+@TextCondtion+'%'  or cust.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "DateCreateS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DateCreate>=@DateCreateS");
                                paras[1].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "DateCreateE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DateCreate<=@DateCreateE");
                                paras[2].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "DatePlanStartS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DatePlanStart>=@DatePlanStartS");
                                paras[3].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "DatePlanStartE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DatePlanStart<=@DatePlanStartE");
                                paras[4].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "DatePlanFinishS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DatePlanFinish>=@DatePlanFinishS");
                                paras[5].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "DatePlanFinishE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.DatePlanFinish<=@DatePlanFinishE");
                                paras[6].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and b.CreatorDepId=@CreatorDepId");
                                    paras[7].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and b.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[8].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "CompanyID":
                            strSql.AppendFormat(" and p.CompanyID={0}", de.Value.ToString());
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "p.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public void UpdateProjInfoList(int[] ids, DataModel.EmpSession userInfo)
        {
            if (ids.Length == 0)
            {
                return;
            }
            string idSet = string.Join(",", ids);
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }
            var sbSQL = new StringBuilder();

            sbSQL.AppendFormat(@"UPDATE  dbo.Project
                                SET     DeleterEmpId = {0},
                                        DeleterEmpName = '{1}',
                                        DeletionTime = '{2}'
                                WHERE   Id IN({3})
                                        OR ParentId IN({3}); ", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet);
            DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
        }

        /// <summary>
        /// 项目统计信息
        /// </summary>
        /// <returns></returns>
        public DataTable ProjectStati()
        {
            string sql = "SELECT *FROM dbo.VIEW_ProjectStatistics";
            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql);
        }

        public DataTable GetProjReportByMajorList(Common.SqlPageInfo queryContext, string menuOrder)
        {
            string RowColumn = "p.Id,p.ProjNumber,p.ProjName,p.CustName,b.EmpName,YEAR(CreationTime) as BelongYear";
            RowColumn += ",getdate() as  ProductionTime";

            RowColumn += ",isnull((select baseName from BaseData where  baseID=p.ProjVoltID),'') as ProjVoltName";

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS XBeginTime", (int)ProjectPhase.选址选线);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS XEndTime", (int)ProjectPhase.选址选线);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS KBeginTime", (int)ProjectPhase.可研);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS KEndTime", (int)ProjectPhase.可研);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS CBeginTime", (int)ProjectPhase.初设);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS CEndTime", (int)ProjectPhase.初设);



            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS SBeginTime", (int)ProjectPhase.施工图);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS SEndTime", (int)ProjectPhase.施工图);


            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS ZBeginTime", (int)ProjectPhase.竣工图);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS ZEndTime", (int)ProjectPhase.竣工图);

            RowColumn += string.Format(",cast(isnull((SELECT TOP 1 Progress FROM DesTaskGantt AS t INNER JOIN dbo.DesTaskGroup AS g ON t.TaskId=g.id WHERE t.DeleterEmpId = 0  and g.DeleterEmpId = 0  AND t.KeyPointType = {0} AND g.ProjId IN(SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) AND g.TaskGroupPhaseId = {1} ORDER BY t.id desc),0) as varchar)+'%' as WProgress", (int)KeyPointType.工代, (int)ProjectPhase.施工图);

            RowColumn += string.Format(",isnull((SELECT TOP 1 EventContent FROM DesEvent WHERE DeleterEmpId = 0 AND EventGroupId = {0} AND ProjId IN(SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0)  ORDER BY id desc),'') as EventContent", (int)ProjEventType.问题记录);

            RowColumn += ",isnull((SELECT  BaseName + ','FROM BaseData  WHERE  CHARINDEX(','+CAST(BaseID AS  nvarchar(5))+',',','+p.ProjPhaseIds+',')>0 FOR XML PATH('')),'') as PhaseNames";

            StringBuilder strSql = new StringBuilder();

            strSql.Append(string.Format(@" select Count(1) from dbo.Project  AS  p  
                                    inner join dbo.BaseEmployee AS b ON p.ProjEmpId=b.EmpID
                                    where p.ColAttType6=0 and p.ParentId=0 and p.DeleterEmpId=0 and p.ProjTypeID in (SELECT baseID FROM BaseData  WHERE BaseOrder LIKE '{0}%') ", menuOrder));

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ProjVoltID",SqlDbType.Int),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (p.ProjNumber like '%'+@TextCondtion+'%' or p.ProjName like '%'+@TextCondtion+'%' or p.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "ProjVoltID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(string.Format(" and p.ProjVoltID=@ProjVoltID"));
                                    paras[1].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and p.CreatorDepId=@CreatorDepId");
                                    paras[2].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and p.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[3].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "ProjectPhase":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and charindex('," + de.Value + ",',','+p.ProjPhaseIds+',')>1");
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "p.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        public DataTable GetProjReportByDistributionList(Common.SqlPageInfo queryContext, string menuOrder)
        {
            string RowColumn = "p.Id,p.ProjNumber,p.ProjName,p.CustName,b.EmpName,YEAR(CreationTime) as BelongYear";

            RowColumn += ",isnull((select Count(Id) from project where ParentId=p.Id and DeleterEmpId=0 ),0 ) as ProjCount";

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS KBeginTime", (int)ProjectPhase.可研);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS KEndTime", (int)ProjectPhase.可研);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS ZBeginTime", (int)ProjectPhase.竣工图);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS ZEndTime", (int)ProjectPhase.竣工图);

            RowColumn += string.Format(",cast(isnull((SELECT TOP 1 Progress FROM DesTaskGantt AS t INNER JOIN dbo.DesTaskGroup AS g ON t.TaskId=g.id WHERE t.DeleterEmpId = 0  and g.DeleterEmpId = 0  AND t.KeyPointType = {0} AND g.ProjId IN(SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) AND g.TaskGroupPhaseId = {1} ORDER BY t.id desc),0) as varchar)+'%' as WProgress", (int)KeyPointType.工代, (int)ProjectPhase.施工图);

            RowColumn += string.Format(",isnull((SELECT TOP 1 EventContent FROM DesEvent WHERE DeleterEmpId = 0 AND EventGroupId = {0} AND ProjId IN(SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 )  ORDER BY id desc),'') as EventContent", (int)ProjEventType.问题记录);

            RowColumn += string.Format(",isnull((SELECT AuxiliaryUnit FROM ProjectAuxiliary where ProjId=p.Id),'') as SNote1 ");
            RowColumn += string.Format(",isnull((SELECT KCNum FROM ProjectAuxiliary where ProjId=p.Id),0) as SNote2 ");
            RowColumn += string.Format(",isnull((SELECT AKCNum FROM ProjectAuxiliary where ProjId=p.Id),0) as SNote3 ");
            RowColumn += string.Format(",isnull((SELECT SGJH FROM ProjectAuxiliary where ProjId=p.Id),'1900-01-01') as SNote4 ");
            RowColumn += string.Format(",isnull((SELECT SGWCJH FROM ProjectAuxiliary where ProjId=p.Id),'1900-01-01') as SNote5 ");
            RowColumn += string.Format(",isnull((SELECT DDJH FROM ProjectAuxiliary where ProjId=p.Id),'1900-01-01') as SNote6 ");
            RowColumn += string.Format(",isnull((SELECT DDWCNum FROM ProjectAuxiliary where ProjId=p.Id),0) as SNote7 ");


            StringBuilder strSql = new StringBuilder();

            strSql.Append(string.Format(@" select Count(1) from dbo.Project  AS  p  
                                    inner join dbo.BaseEmployee AS b ON p.ProjEmpId=b.EmpID
                                    where p.ColAttType6=0 and p.ParentId=0 and p.DeleterEmpId=0 and p.ProjTypeID in (SELECT baseID FROM BaseData  WHERE BaseOrder LIKE '{0}%') ", menuOrder));

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ProjVoltID",SqlDbType.Int),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (p.ProjNumber like '%'+@TextCondtion+'%' or p.ProjName like '%'+@TextCondtion+'%' or p.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "ProjVoltID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(string.Format(" and p.ProjVoltID=@ProjVoltID"));
                                    paras[1].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and p.CreatorDepId=@CreatorDepId");
                                    paras[2].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and p.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[3].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "ProjectPhase":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and charindex('," + de.Value + ",',','+p.ProjPhaseIds+',')>1");
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "p.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        public DataTable GetProjReportByPlanningList(Common.SqlPageInfo queryContext, string menuOrder)
        {
            string RowColumn = "p.Id,p.ProjNumber,p.ProjName,p.CustName,b.EmpName";

            RowColumn += ",isnull((select baseName from BaseData where  baseID=p.ProjVoltID),'') as ProjVoltName";

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS ABeginTime", (int)ProjectPhase.立项);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS AEndTime", (int)ProjectPhase.立项);


            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS RBeginTime", (int)ProjectPhase.研发);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS REndTime", (int)ProjectPhase.研发);


            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS JBeginTime", (int)ProjectPhase.评审);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS JEndTime", (int)ProjectPhase.评审);


            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 DatePlanStart FROM DesTaskGroup WHERE ProjId IN(SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0 AND TaskGroupPhaseId ={0} ORDER BY id DESC  ), '1900-01-01') AS CPBeginTime", (int)ProjectPhase.结题宣贯);

            RowColumn += string.Format(",ISNULL(( SELECT TOP 1 CAST(( CASE TaskTotalCount WHEN 0 THEN 0  ELSE(TaskFinishCount * 100 / TaskTotalCount)  END) AS VARCHAR) +'%' FROM dbo.DesTaskGroup  WHERE  ProjId IN ((SELECT Id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 ) ) AND TaskGroupType = 1 AND DeleterEmpId = 0  AND TaskGroupPhaseId = {0} ORDER BY id DESC  ), '-') AS CPEndTime", (int)ProjectPhase.结题宣贯);




            RowColumn += string.Format(",isnull((SELECT TOP 1 EventContent FROM DesEvent WHERE DeleterEmpId = 0 AND EventGroupId = {0} AND ProjId IN(SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 )  ORDER BY id desc),'') as EventContent", (int)ProjEventType.问题记录);


            StringBuilder strSql = new StringBuilder();

            strSql.Append(string.Format(@" select Count(1) from dbo.Project  AS  p  
                                    inner join dbo.BaseEmployee AS b ON p.ProjEmpId=b.EmpID
                                    where p.ColAttType6=0 and p.ParentId=0 and p.DeleterEmpId=0 and p.ProjTypeID in (SELECT baseID FROM BaseData  WHERE BaseOrder LIKE '{0}%') ", menuOrder));

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ProjVoltID",SqlDbType.Int),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (p.ProjNumber like '%'+@TextCondtion+'%' or p.ProjName like '%'+@TextCondtion+'%' or p.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "ProjVoltID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(string.Format(" and p.ProjVoltID=@ProjVoltID"));
                                    paras[1].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and p.CreatorDepId=@CreatorDepId");
                                    paras[2].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and p.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[3].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "ProjectPhase":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and charindex('," + de.Value + ",',','+p.ProjPhaseIds+',')>1");
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "p.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        public DataTable GetProjReportByQTList(Common.SqlPageInfo queryContext, string menuOrder)
        {
            string RowColumn = "p.Id,p.ProjNumber,p.ProjName,p.CustName,b.EmpName,YEAR(CreationTime) as BelongYear";

            RowColumn += string.Format(",isnull((SELECT TOP 1 EventContent FROM DesEvent WHERE DeleterEmpId = 0 AND EventGroupId = {0} AND ProjId IN(SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0 )  ORDER BY id desc),'') as EventContent", (int)ProjEventType.问题记录);

            RowColumn += ",isnull((select baseName from BaseData where  baseID=p.ProjVoltID),'') as ProjVoltName";

            RowColumn += ",(SELECT (CASE WHEN SUM(TaskTotalCount) = 0 THEN 0 ELSE(SUM(TaskFinishCount) * 100 / SUM(TaskTotalCount)) END) FROM dbo.DesTaskGroup WHERE ProjId IN (SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0) as Rate";

            RowColumn += ",isnull((SELECT Max(DateActualFinish) from dbo.DesTaskGroup WHERE ProjId IN (SELECT id FROM project WHERE ParentId = p.Id AND DeleterEmpId = 0) AND TaskGroupType = 1 AND DeleterEmpId = 0),'') as DateActualFinish";

            RowColumn += ",isnull((SELECT  BaseName + ','FROM BaseData  WHERE  CHARINDEX(','+CAST(BaseID AS  nvarchar(5))+',',','+p.ProjPhaseIds+',')>0 FOR XML PATH('')),'') as PhaseNames";

            StringBuilder strSql = new StringBuilder();

            strSql.Append(string.Format(@" select Count(1) from dbo.Project  AS  p  
                                    inner join dbo.BaseEmployee AS b ON p.ProjEmpId=b.EmpID
                                    where p.ColAttType6=0 and p.ParentId=0 and p.DeleterEmpId=0 and p.ProjTypeID in (SELECT baseID FROM BaseData  WHERE BaseOrder LIKE '{0}%') ", menuOrder));

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ProjVoltID",SqlDbType.Int),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (p.ProjNumber like '%'+@TextCondtion+'%' or p.ProjName like '%'+@TextCondtion+'%' or p.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "ProjVoltID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(string.Format(" and p.ProjVoltID=@ProjVoltID"));
                                    paras[1].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and p.CreatorDepId=@CreatorDepId");
                                    paras[2].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and p.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[3].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "ProjectPhase":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and charindex('," + de.Value + ",',','+p.ProjPhaseIds+',')>1");
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "p.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        public int GetProjCount(int mainId, string ProjNumber, int projId, string projXml)
        {
            List<DataModel.Models.Project> listProjPhase = new JavaScriptSerializer().Deserialize<List<DataModel.Models.Project>>(projXml);
            List<string> list = listProjPhase.Select(p => p.ProjNumber).Distinct().ToList();
            if (listProjPhase.Count != list.Count())
            {
                return -1;
            }
            int t = listProjPhase.Where(p => p.ProjNumber == ProjNumber).Count();
            if (t > 0)
            {
                return -2;
            }
            int Res = 0;
            string str = string.Join(",", listProjPhase.Select(p => "'" + p.ProjNumber + "'").ToArray());
            string sql = "select count(*) from Project where DeleterEmpId = 0 and ColAttType6=0";
            if (mainId == 0)
            {
                if (projId == 0)
                {
                    sql += string.Format(" and ProjNumber in ({0})", "'" + ProjNumber + "'," + str);
                }
                else
                {
                    sql += string.Format(" and ProjNumber in ({0})", str);
                }

            }
            else
            {
                string ids = string.Join(",", listProjPhase.Select(p => p.Id).ToArray());
                sql += string.Format(" and  id  not IN({0}) and id not IN(SELECT id FROM Project WHERE ParentId IN({0}) )", mainId.ToString() + ',' + projId.ToString() + "," + ids);
                sql += string.Format(" and ProjNumber in ({0})", "'" + ProjNumber + "'," + str);
            }

            SqlParameter[] sqlp = { };
            try
            {
                Res = Convert.ToInt32(DBExecute.ExecuteScalar(sql, sqlp));
            }
            catch { }
            return Res;
        }
    }
}
