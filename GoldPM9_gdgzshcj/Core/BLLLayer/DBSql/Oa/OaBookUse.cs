#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-30 08:42:15
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Collections;
using EntityFramework.Extensions;

namespace DBSql.Oa
{
    public class OaBookUse : EFRepository<DataModel.Models.OaBookUse>
    {
        DBSql.Sys.BaseEmployee emp = new Sys.BaseEmployee();
        public List<dynamic> GetList(Common.SqlPageInfo queryContext)
        {
            var query1 = from book in this.DbContext.Set<DataModel.Models.OaBook>()
                         join basedata in this.DbContext.Set<DataModel.Models.BaseData>()
                         on book.BookTypeID equals basedata.BaseID
                         select new
                         {
                             book.Id,
                             BookName = book.BookName,
                             BookNameNumber = book.BookNameNumber,
                             BookQuantity = book.BookQuantity,
                             BookPrice = book.BookPrice,
                             BookPublisher = book.BookPublisher,
                             BookAuthor = book.BookAuthor,
                             BookDateBought = book.BookDateBought,
                             BookNote = book.BookNote,
                             BookTypeID = book.BookTypeID,
                             CreationTime = book.CreationTime,
                             CreatorEmpId = book.CreatorEmpId,
                             CreatorEmpName = book.CreatorEmpName,
                             BookTypeName = basedata.BaseName
                         };
            var query2 = from use in this.DbContext.Set<DataModel.Models.OaBookUse>()
                         join book in query1
                         on use.BookID equals book.Id
                         select new
                         {
                             BookID = book.Id,
                             BookName = book.BookName,
                             BookNameNumber = book.BookNameNumber,
                             BookQuantity = book.BookQuantity,
                             BookPrice = book.BookPrice,
                             BookPublisher = book.BookPublisher,
                             BookAuthor = book.BookAuthor,
                             BookDateBought = book.BookDateBought,
                             BookNote = book.BookNote,
                             BookTypeID = book.BookTypeID,
                             CreationTime = book.CreationTime,
                             CreatorEmpId = book.CreatorEmpId,
                             CreatorEmpName = book.CreatorEmpName,
                             BookTypeName = book.BookTypeName,
                             LendCount = use.LendCount,
                             DateLend = use.DateLend,
                             ReturnEmpId = use.ReturnEmpId,
                             use.Id,
                             use.DateReturnFact,
                             use.DateReturnPlan,
                             ReturnEmpName = use.ReturnEmpName,
                             use.BookLoseType,
                         };
            var query = from be in this.DbContext.Set<DataModel.Models.BaseEmployee>()
                        join book in query2
                        on be.EmpID equals book.ReturnEmpId
                        select new
                        {
                            BookID = book.Id,
                            BookName = book.BookName,
                            BookNameNumber = book.BookNameNumber,
                            BookQuantity = book.BookQuantity,
                            BookPrice = book.BookPrice,
                            BookPublisher = book.BookPublisher,
                            BookAuthor = book.BookAuthor,
                            BookDateBought = book.BookDateBought,
                            BookNote = book.BookNote,
                            BookTypeID = book.BookTypeID,
                            CreationTime = book.CreationTime,
                            CreatorEmpId = book.CreatorEmpId,
                            CreatorEmpName = book.CreatorEmpName,
                            BookTypeName = book.BookTypeName,
                            LendCount = book.LendCount,
                            DateLend = book.DateLend,
                            ReturnEmpId = book.ReturnEmpId,
                            ReturnEmpName = book.ReturnEmpName,
                            book.Id,
                            book.DateReturnFact,
                            book.DateReturnPlan,
                            be.EmpName,
                            book.BookLoseType,
                        };
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                query = query.Where(m => m.BookName.Contains(queryContext.TextCondtion) || m.BookNameNumber.Contains(queryContext.TextCondtion));
            }
            if (queryContext.SelectCondtion != null)
            {
                foreach (DictionaryEntry item in queryContext.SelectCondtion)
                {
                    if (item.Value == null || item.Value.ToString() == "")
                    {
                        continue;
                    }
                    switch (item.Key.ToString())
                    {
                        case "BookTypeID":
                            {
                                var temp = 0;
                                if (int.TryParse(item.Value.ToString(), out temp))
                                {
                                    query = query.Where(m => m.BookTypeID == temp);
                                }
                            }
                            break;
                        case "LendEmpID":
                            {
                                var temp = 0;
                                if (int.TryParse(item.Value.ToString(), out temp))
                                {
                                    query = query.Where(m => m.ReturnEmpId == temp);
                                }
                            }
                            break;
                        case "DateReturnFact":
                            {
                                DateTime _time = Convert.ToDateTime("1900-01-01");
                                DateTime _now = System.DateTime.Now;
                                query = query.Where(m => m.DateReturnFact == _time && m.DateReturnPlan < _now);
                            }
                            break;
                        case "BookID":
                            {
                                var temp = 0;
                                DateTime _time = Convert.ToDateTime("1900-01-01");
                                if (int.TryParse(item.Value.ToString(), out temp))
                                {
                                    query = query.Where(m => m.BookID == temp);
                                }
                            }
                            break;

                    }
                }
            }
            query = query.OrderByDescending(m => m.Id);
            if (!queryContext.ToPageData)
            {
                if (queryContext.PageIndex < 1)
                {
                    queryContext.PageIndex = 1;
                }
                if (queryContext.PageSize == 0)
                {
                    queryContext.PageSize = 10;
                }
                var itemIndex = (queryContext.PageIndex - 1) * queryContext.PageSize;
                queryContext.PageTotleRowCount = query.FutureCount();
                query = query.Skip(itemIndex).Take(queryContext.PageSize);
            }
            else
            {
                queryContext.PageTotleRowCount = 0;
            }
            return query.ToList<dynamic>();
        }

        public List<dynamic> GetListHistory(Common.SqlPageInfo queryContext)
        {
            var query1 = from book in this.DbContext.Set<DataModel.Models.OaBook>()
                         join basedata in this.DbContext.Set<DataModel.Models.BaseData>()
                         on book.BookTypeID equals basedata.BaseID
                         select new
                         {
                             book.Id,
                             BookName = book.BookName,
                             BookNameNumber = book.BookNameNumber,
                             BookQuantity = book.BookQuantity,
                             BookPrice = book.BookPrice,
                             BookPublisher = book.BookPublisher,
                             BookAuthor = book.BookAuthor,
                             BookDateBought = book.BookDateBought,
                             BookNote = book.BookNote,
                             BookTypeID = book.BookTypeID,
                             CreationTime = book.CreationTime,
                             CreatorEmpId = book.CreatorEmpId,
                             CreatorEmpName = book.CreatorEmpName,
                             BookTypeName = basedata.BaseName
                         };
            var query2 = from use in this.DbContext.Set<DataModel.Models.OaBookUse>()
                         join book in query1
                         on use.BookID equals book.Id
                         select new
                         {
                             BookID = book.Id,
                             BookName = book.BookName,
                             BookNameNumber = book.BookNameNumber,
                             BookQuantity = book.BookQuantity,
                             BookPrice = book.BookPrice,
                             BookPublisher = book.BookPublisher,
                             BookAuthor = book.BookAuthor,
                             BookDateBought = book.BookDateBought,
                             BookNote = book.BookNote,
                             BookTypeID = book.BookTypeID,
                             CreationTime = book.CreationTime,
                             CreatorEmpId = book.CreatorEmpId,
                             CreatorEmpName = book.CreatorEmpName,
                             BookTypeName = book.BookTypeName,
                             LendCount = use.LendCount,
                             DateLend = use.DateLend,
                             ReturnEmpId = use.ReturnEmpId,
                             ReturnEmpName = use.ReturnEmpName,
                             use.Id,
                             use.DateReturnFact,
                             use.DateReturnPlan,
                             use.BookLoseType
                         };
            //var query = from be in this.DbContext.Set<DataModel.Models.BaseEmployee>()
            //            join book in query2
            //            on be.EmpID equals book.ReturnEmpId
            //            select new
            //            {
            //                BookID = book.Id,
            //                BookName = book.BookName,
            //                BookNameNumber = book.BookNameNumber,
            //                BookQuantity = book.BookQuantity,
            //                BookPrice = book.BookPrice,
            //                BookPublisher = book.BookPublisher,
            //                BookAuthor = book.BookAuthor,
            //                BookDateBought = book.BookDateBought,
            //                BookNote = book.BookNote,
            //                BookTypeID = book.BookTypeID,
            //                CreationTime = book.CreationTime,
            //                CreatorEmpId = book.CreatorEmpId,
            //                CreatorEmpName = book.CreatorEmpName,
            //                BookTypeName = book.BookTypeName,
            //                LendCount = book.LendCount,
            //                DateLend = book.DateLend,
            //                ReturnEmpId = book.ReturnEmpId,
            //                book.Id,
            //                book.DateReturnFact,
            //                book.DateReturnPlan,
            //                be.EmpName
            //            };
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                query2 = query2.Where(m => m.BookName.Contains(queryContext.TextCondtion) || m.BookNameNumber.Contains(queryContext.TextCondtion));
            }
            if (queryContext.SelectCondtion != null)
            {
                foreach (DictionaryEntry item in queryContext.SelectCondtion)
                {
                    if (item.Value == null || item.Value.ToString() == "")
                    {
                        continue;
                    }
                    switch (item.Key.ToString())
                    {
                        case "BookTypeID":
                            {
                                var temp = 0;
                                if (int.TryParse(item.Value.ToString(), out temp))
                                {
                                    query2 = query2.Where(m => m.BookTypeID == temp);
                                }
                            }
                            break;
                        case "LendEmpID":
                            {
                                var temp = 0;
                                if (int.TryParse(item.Value.ToString(), out temp))
                                {
                                    query2 = query2.Where(m => m.ReturnEmpId == temp);
                                }
                            }
                            break;
                        case "DateReturnFact":
                            {
                                DateTime _time = Convert.ToDateTime("1900-01-01");
                                DateTime _now = System.DateTime.Now;
                                query2 = query2.Where(m => m.DateReturnFact == _time && m.DateReturnPlan < _now);
                            }
                            break;
                        case "BookID":
                            {
                                var temp = 0;
                                DateTime _time = Convert.ToDateTime("1900-01-01");
                                if (int.TryParse(item.Value.ToString(), out temp))
                                {
                                    query2 = query2.Where(m => m.BookID == temp);
                                }
                            }
                            break;

                    }
                }
            }
            query2 = query2.OrderByDescending(m => m.Id);
            if (!queryContext.ToPageData)
            {
                if (queryContext.PageIndex < 1)
                {
                    queryContext.PageIndex = 1;
                }
                if (queryContext.PageSize == 0)
                {
                    queryContext.PageSize = 10;
                }
                var itemIndex = (queryContext.PageIndex - 1) * queryContext.PageSize;
                queryContext.PageTotleRowCount = query2.Count();
                query2 = query2.Skip(itemIndex).Take(queryContext.PageSize);
            }
            else
            {
                queryContext.PageTotleRowCount = 0;
            }
            return query2.ToList<dynamic>();
        }


        public int SendMessage(DataModel.Models.OaBookUse bookUseModel, DataModel.EmpSession empSession)
        {
            DataModel.Models.OaMess oaMessModel = new DataModel.Models.OaMess();
            int EmpId = 0;
            string EmpName = string.Empty;
            string BookName = string.Empty;
            if (bookUseModel != null)
            {
                EmpId = bookUseModel.ReturnEmpId;
                EmpName = bookUseModel.ReturnEmpName;
                DataModel.Models.OaBook book = new DBSql.Oa.OaBook().Get(bookUseModel.BookID);
                if (book != null)
                {
                    BookName = book.BookName;
                }
            }
            int result = 0;
            DBSql.Oa.OaMessRead read = new Oa.OaMessRead();
            DBSql.OA.OaMess mess = new OA.OaMess();
            read.DbContextRepository(this.UnitOfWork, this.DbContext);
            read.DbContextRepository(this.UnitOfWork, this.DbContext);
            oaMessModel.MessDate = DateTime.Now;
            oaMessModel.MessEmpId = empSession.EmpID;
            oaMessModel.MessEmpName = empSession.EmpName;
            oaMessModel.MessIsAutoReturn = false;
            oaMessModel.MessIsDeleted = false;
            oaMessModel.MessIsSystem = true;
            oaMessModel.MessLinkTitle = BookName + "[图书催还]";
            oaMessModel.MessNote = "";
            oaMessModel.MessTitle = BookName + "[图书催还]";
            oaMessModel.MessRefID = bookUseModel.Id;
            oaMessModel.MessRefTable = "OaBook";
            oaMessModel.MessLinkUrl = string.Format("Oa/OaBookUse/returnBackBook?borrID={0}", bookUseModel.Id);//
            try
            {
                UnitOfWork.BeginTransaction();
                mess.Add(oaMessModel);
                mess.DbContext.SaveChanges();
                DataModel.Models.OaMessRead oaMessRead = new DataModel.Models.OaMessRead();
                oaMessRead.Id = oaMessModel.Id;
                oaMessRead.MessReadDate = new DateTime(1900, 1, 1);
                oaMessRead.MessReadEmpId = EmpId;
                oaMessRead.MessReadEmpName = EmpName;
                oaMessRead.MessReadIsDeleted = false;
                oaMessRead.MessReadNote = oaMessModel.MessTitle;
                read.Add(oaMessRead);
                UnitOfWork.CommitTransaction();
                result++;
            }
            catch
            {
                UnitOfWork.RollBackTransaction();
            }

            Oa.OaMessRead.CacheRemove();
            var t = JQ.Util.IO.MessageMonitor.NotifyAsync(EmpId, delegate (int empID)
            {
                return new Oa.OaMessRead().GetNotifyDatas(empID);
            });
            return result;
        }

    }
}
