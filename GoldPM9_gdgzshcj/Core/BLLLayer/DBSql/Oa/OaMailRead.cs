#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-30 08:42:15
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
namespace DBSql.Oa
{
    public class OaMailRead : EFRepository<DataModel.Models.OaMailRead>
    {
        public Expression<Func<DataModel.Models.OaMailRead, bool>> GetFunc(Common.SqlPageInfo condition)
        {
            var TWhere = QueryBuild<DataModel.Models.OaMailRead>.True();
            #region   筛选条件
            if (!String.IsNullOrEmpty(condition.TextCondtion))
            {
                TWhere = TWhere.And(p => p.FK_OaMailRead_Id.MailTitle.Contains(condition.TextCondtion)
                    || p.FK_OaMailRead_Id.CreatorEmpName.Contains(condition.TextCondtion)
                    );
            }
            foreach (System.Collections.DictionaryEntry de in condition.SelectCondtion)
            {
                if (de.Value == null || de.Value.ToString().Trim() == "") continue;
                switch (de.Key.ToString())
                {
                    case "MailID":
                        var MailID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.Id == MailID);
                        break;
                    case "DateLower":
                        var DateLower = Common.ModelConvert.ConvertToDefaultType<DateTime>(de.Value);
                        TWhere = TWhere.And(p => p.MailReadDate >= DateLower);
                        break;
                    case "DateUpper":
                        var DateUpper = Common.ModelConvert.ConvertToDefaultType<DateTime>(de.Value).AddDays(1);
                        TWhere = TWhere.And(p => p.MailReadDate < DateUpper);
                        break;
                    case "MailInBoxEmpID":
                        var MailInBoxEmpID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.MailReadEmpId == MailInBoxEmpID);
                        break;
                    case "MailReadIsDelete":
                        var MailReadIsDelete = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.MailReadIsDelete == MailReadIsDelete);
                        break;
                    case "MailFlag":
                        var MailFlag = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.FK_OaMailRead_Id.MailFlag == MailFlag);
                        break;
                    case "NotRead":
                        TWhere = TWhere.And(p => p.MailReadDate.Year == 1900);
                        break;
                }
            }
            #endregion
            if (String.IsNullOrEmpty(condition.SelectOrder)) condition.SelectOrder = "MailReadDate asc,Id desc";
            return TWhere;
        }

        #region

        private static readonly string CacheName = "OaMailRead";

        /// <summary>
        /// 移除缓存
        /// </summary>
        public void CacheRemove()
        {
            Common.CacheManager.CacheRemove(CacheName);
        }

        public IEnumerable<dynamic> AllData
        {
            get
            {
                if (Common.CacheManager.GetCache(CacheName) == null)
                {
                    var result = this.DbContext.Set<DataModel.Models.OaMailRead>().Join(this.DbContext.Set<DataModel.Models.OaMail>(), t => t.Id, t1 => t1.Id, (t, t1) => new { t.Id, t.MailReadDate, t.MailReadEmpId, t.MailReadEmpName, t.MailReadIsDelete, t1.MailDate, t1.MailFlag, t1.MailIsBBC, t1.CreationTime, t1.CreatorEmpName, t1.MailTitle }).Where(m => m.MailReadIsDelete == 0 && m.MailReadDate.Year == 1900 && m.MailDate.Year != 1900 && m.MailFlag == 0).OrderByDescending(m => m.CreationTime).Select(m => new { m.Id, m.MailReadEmpId, m.MailReadEmpName, m.MailReadIsDelete, m.MailIsBBC, m.CreationTime, m.MailTitle, m.CreatorEmpName }).ToList<dynamic>();
                    Common.CacheManager.SetCache(CacheName, result);
                    return result;
                }
                else
                {
                    return (IEnumerable<dynamic>)Common.CacheManager.GetCache(CacheName);
                }
            }
        }

        /// <summary>
        /// 获取未读邮件条数
        /// </summary>
        /// <param name="EmpID">用户ID</param>
        /// <returns></returns>
        public int GetUnreadMail(int EmpID)
        {
            return AllData.Where(p => p.MailReadEmpId == EmpID).Count();
        }

        /// <summary>
        /// 更新为已读
        /// </summary>
        /// <param name="ID"></param>
        /// <param name="empID"></param>
        public void UpdateRead(int ID, int empID)
        {
            var Model = FirstOrDefault(p => p.Id == ID && p.MailReadEmpId == empID && p.MailReadDate == new DateTime(1900, 1, 1));
            if (Model == null) return;
            Model.MailReadDate = DateTime.Now;
            Edit(Model);
            UnitOfWork.SaveChanges();
            CacheRemove();
            //发送首页通知
            var t = JQ.Util.IO.MessageMonitor.NotifyAsync(empID, delegate (int _empID)
            {
                return GetNotifyDatas(_empID);
            });
        }

        /// <summary>
        /// 获取邮件收信人
        /// </summary>
        /// <param name="MailID"></param>
        /// <returns></returns>
        public List<int> GetMailInBoxEmp(int MailID)
        {
            var TWhere = Common.Data.Extenstions.QueryBuild<DataModel.Models.OaMailRead>.True();
            TWhere = TWhere.And(p => p.Id == MailID);
            var result = from s in GetQuery(TWhere) select s.MailReadEmpId;
            return result.ToList();
        }

        public string GetMailInBoxEmpName(int MailID)
        {
            var result = from s in GetQuery(p => p.Id == MailID) select s.MailReadEmpName;
            return string.Join(",", result);
        }

        public int DelMail(List<int> arr, int EmpID, bool DelType = false, bool IsResum = false)
        {
            int Result = 0;
            if (!IsResum)
            {
                if (!DelType)
                {
                    Edit(s => arr.Contains(s.Id) && s.MailReadEmpId == EmpID, u => new DataModel.Models.OaMailRead { MailReadIsDelete = 1 });
                }
                else
                {
                    Edit(s => arr.Contains(s.Id) && s.MailReadEmpId == EmpID, u => new DataModel.Models.OaMailRead { MailReadIsDelete = 2 });
                }
            }
            else
            {
                Edit(s => arr.Contains(s.Id) && s.MailReadEmpId == EmpID, u => new DataModel.Models.OaMailRead { MailReadIsDelete = 0 });
            }
            Result = DbContext.SaveChanges();
            CacheRemove();
            //发送首页通知
            var t = JQ.Util.IO.MessageMonitor.NotifyAsync(EmpID, delegate (int empID)
            {
                return GetNotifyDatas(empID);
            });
            return Result;
        }
        #endregion

        public List<dynamic> GetUnReadMailDetail(int empID, int topAmount)
        {
            //从缓存中获取中前topAmount条数据
            return AllData.Where(p => p.MailReadEmpId == empID).Take(topAmount).ToList();
            //获取出邮件
            //return DbContext.Set<DataModel.Models.OaMail>().Where(m => s.Contains(m.Id)).OrderByDescending(m => m.CreationTime).Select(m => new { m.CreationTime, m.CreatorEmpName, m.MailTitle, m.Id }).ToList<dynamic>();
        }

        public dynamic GetNotifyDatas(int empID)
        {
            return new { action = "ChangeMailAmount", data = GetToDisplayDatas(empID) };
        }


        public dynamic GetToDisplayDatas(int empID)
        {
            return new { Result = true, Total = this.GetUnreadMail(empID), Datas = this.GetUnReadMailDetail(empID, 5) };
        }
    }
}
