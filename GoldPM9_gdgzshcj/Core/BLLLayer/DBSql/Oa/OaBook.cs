#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-30 08:42:15
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Collections;
using EntityFramework.Extensions;
using DataModel.Models;

namespace DBSql.Oa
{
    public class OaBook : EFRepository<DataModel.Models.OaBook>
    {
        public List<dynamic> GetList(Common.SqlPageInfo queryContext)
        {
            var _datetime = Convert.ToDateTime("1900-01-01");
            var query1 = from book in this.DbContext.Set<DataModel.Models.OaBook>()
                         join basedata in this.DbContext.Set<DataModel.Models.BaseData>()
                         on book.BookTypeID equals basedata.BaseID
                         select new
                         {
                             book.Id,
                             BookName = book.BookName,
                             BookNameNumber = book.BookNameNumber,
                             BookQuantity = book.BookQuantity,
                             BookPrice = book.BookPrice,
                             BookPublisher = book.BookPublisher,
                             BookAuthor = book.BookAuthor,
                             BookDateBought = book.BookDateBought,
                             BookNote = book.BookNote,
                             BookTypeID = book.BookTypeID,
                             CreationTime = book.CreationTime,
                             CreatorEmpId = book.CreatorEmpId,
                             CreatorEmpName = book.CreatorEmpName,
                             BookTypeName = basedata.BaseName
                         };
            var bookuseQuery = from use in this.DbContext.Set<DataModel.Models.OaBookUse>().Where(u => u.DateReturnFact == _datetime)
                               group use by use.BookID into lendBybookID
                               select new
                               {
                                   BookID = lendBybookID.Key,
                                   lendNum = lendBybookID.Sum(u => u.LendCount)
                               };
            var query = from book in query1
                        join bookuse in bookuseQuery
                        on book.Id equals bookuse.BookID into bookuseList
                        from t in bookuseList.DefaultIfEmpty()
                        select new
                        {
                            book.Id,
                            BookName = book.BookName,
                            BookNameNumber = book.BookNameNumber,
                            BookQuantity = book.BookQuantity,
                            BookPrice = book.BookPrice,
                            BookPublisher = book.BookPublisher,
                            BookAuthor = book.BookAuthor,
                            BookDateBought = book.BookDateBought,
                            BookNote = book.BookNote,
                            BookTypeID = book.BookTypeID,
                            CreationTime = book.CreationTime,
                            CreatorEmpId = book.CreatorEmpId,
                            CreatorEmpName = book.CreatorEmpName,
                            BookTypeName = book.BookTypeName,
                            Count = book.BookQuantity - (t.lendNum != null ? t.lendNum : 0)
                        };


            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                query = query.Where(m => m.BookName.Contains(queryContext.TextCondtion) || m.BookNameNumber.Contains(queryContext.TextCondtion));
            }
            if (queryContext.SelectCondtion != null)
            {
                foreach (DictionaryEntry item in queryContext.SelectCondtion)
                {
                    if (item.Value == null || item.Value.ToString() == "")
                    {
                        continue;
                    }
                    switch (item.Key.ToString())
                    {
                        case "BookTypeID":
                            {
                                //var temp = 0;
                                //if (int.TryParse(item.Value.ToString(), out temp))
                                //{
                                //    query = query.Where(m => m.BookTypeID == temp);
                                //}
                                query = query.Where(m => item.Value.ToString().Contains(m.BookTypeID.ToString()));
                            }
                            break;
                    }
                }
            }
            query = query.OrderByDescending(m => m.CreationTime);
            if (!queryContext.ToPageData)
            {
                if (queryContext.PageIndex < 1)
                {
                    queryContext.PageIndex = 1;
                }
                if (queryContext.PageSize == 0)
                {
                    queryContext.PageSize = 10;
                }
                var itemIndex = (queryContext.PageIndex - 1) * queryContext.PageSize;
                queryContext.PageTotleRowCount = query.FutureCount();
                query = query.Skip(itemIndex).Take(queryContext.PageSize);
            }
            else
            {
                queryContext.PageTotleRowCount = 0;
            }
            return query.ToList<dynamic>();
        }

        private object GetCanBorrNum(IEnumerable<DataModel.Models.OaBookUse> oaBookUseList, int total)
        {
            int borrNum = 0;
            if (oaBookUseList == null)
            {
                return total - borrNum;
            }
            if (oaBookUseList.Count() > 0)
            {
                foreach (var item in oaBookUseList)
                {
                    if (item.DateReturnFact.ToString("yyyy-MM-dd") == "1900-01-01")
                    {
                        borrNum += item.LendCount;
                    }
                }
            }
            return total - borrNum;
        }
    }
}
