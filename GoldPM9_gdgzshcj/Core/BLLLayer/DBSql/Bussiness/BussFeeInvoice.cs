#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;

namespace DBSql.Bussiness
{
    public class BussFeeInvoice : EFRepository<DataModel.Models.BussFeeInvoice>
    {
        /// <summary>
        /// 合同列表SQL 查询
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable GetFeeInvoiceList(Common.SqlPageInfo condition)
        {
            string RowColumn = "F.*,c.ConName,c.ConNumber,c.ConFee,c.ConBalanceFee,c.CustName,c.ConFulfilType,p.ProjName,p.ProjNumber";
            RowColumn += ",(select EmpName from BaseEmployee be where be.EmpID=F.EmpId) as EmpName";
            RowColumn += ",ifm.FormDate,ifm.CreatorEmpName as FormCreator,ifm.FormID  ";
            RowColumn += ",(select BaseName from BaseData where BaseID=InvoiceType ) as InvoiceTypeName  ";
            RowColumn += ",flw.Id as FlowIDD, flw.FlowName,flw.FlowStatusID,flw.FlowStatusName,flw.FlowXml.value('(Root/TurnedEmpIDs/text())[1]', 'nvarchar(200)') AS FlowTurnedEmpIDs ";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(" select Count(1) from dbo.BussFeeInvoice F left join BussContract c on F.ConID=c.ID left join project p on p.Id=F.ProjID left join IsoForm ifm on F.FormTableID=FormID and RefTable='ContractInvoiceFee' left join flow flw on FlowRefID=ifm.FormID and FlowRefTable=@RefTable where 1=1 ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@FormID",SqlDbType.Int),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
                new SqlParameter("@CompanyID",SqlDbType.Int),
                new SqlParameter("@RefTable",SqlDbType.VarChar),
            };

            paras[5].Value = "BussFeeInvoiceISO";

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() == "")
            {
                strSql.Append(" and (c.ConNumber like '%'+@TextCondtion+'%' or c.ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        //扩展查询列
                        case "OtherColumn":
                            if (de.Value.ToString() != "")
                            {
                                RowColumn += de.Value.ToString();
                            }
                            break;
                        case "DeleterEmpId":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and f.DeleterEmpId=" + de.Value.ToString() + " ");
                            }
                            else
                            {
                                //如果是-1，显示全部
                            }
                            break;
                        case "ISODeleterEmpId":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and ifm.DeleterEmpId=" + de.Value.ToString() + " ");
                            }
                            else
                            {
                                //如果是-1，显示全部
                            }
                            break;
                        case "FormTable":
                            if (de.Value.ToString() == "MustTable")
                            {
                                strSql.Append(" and FormTableID!=0");
                            }
                            break;
                        case "FormTableID":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and FormTableID=@FormID ");
                                paras[1].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "CreatorDepId":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and ifm.CreatorDepId=@CreatorDepId ");
                                paras[2].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "CreatorEmpId":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and ifm.CreatorEmpId=@CreatorEmpId ");
                                paras[3].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "CompanyID":
                            strSql.Append(" and c.CompanyID=@CompanyID ");
                            paras[4].Value = de.Value.ToString();
                            break;
                        case "RefTable":
                            paras[5].Value = de.Value.ToString();
                            break;
                        default:
                            break;
                    }
                }
            }
            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = "InvoiceDate desc,F.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        /// <summary>
        /// 删除表单
        /// </summary>
        /// <param name="IsoFormID"></param>
        /// <param name="EmpID"></param>
        /// <returns></returns>
        public int DelIsoForm(int[] IsoFormID, int EmpID)
        {
            int result = 0;
            Iso.IsoForm _op = new Iso.IsoForm();
            _op.DbContextRepository(this.UnitOfWork, this.DbContext);

            try
            {
                this.UnitOfWork.BeginTransaction();
                foreach (DataModel.Models.IsoForm item in _op.GetList(p => IsoFormID.Contains(p.FormID)))
                {
                    item.DeleterEmpId = EmpID;
                    item.DeleterEmpName = new DBSql.Sys.BaseEmployee().Get(EmpID).EmpName;
                    item.DeletionTime = System.DateTime.Now;
                    _op.Edit(item);

                    foreach (DataModel.Models.BussFeeInvoice InvoiceItem in GetList(p => p.FormTableID == item.FormID))
                    {
                        InvoiceItem.DeleterEmpId = EmpID;
                        InvoiceItem.DeleterEmpName = new DBSql.Sys.BaseEmployee().Get(EmpID).EmpName;
                        InvoiceItem.DeletionTime = System.DateTime.Now;
                        Edit(InvoiceItem);
                    }
                }
                this.UnitOfWork.CommitTransaction(); result = 1;
            }
            catch
            {
                this.UnitOfWork.RollBackTransaction();
                result = -1;
            }

            return result;
        }
    }
}
