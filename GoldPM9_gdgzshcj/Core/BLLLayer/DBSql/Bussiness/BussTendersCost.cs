#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;

namespace DBSql.Bussiness
{
    public class BussTendersCost : EFRepository<DataModel.Models.BussTendersCost>
    {

        public DataTable GetTendersCostList(Common.SqlPageInfo queryContext)
        {
            string RowColumn = "c.Id, t.TendersName,t.TendersNumber,cust.CustName";
            RowColumn += ",c.TenderFee,c.TenderFeePayTime, c.TenderAgentFee, c.TenderAgentFeePayTime, c.BidBondPay, c.BidBondPayTime";
            RowColumn += ",c.BidBondBack, c.BidBondBackTime, c.PerformanceBondPay, c.PerformanceBondPayTime, c.PerformanceBondBack, c.PerformanceBondBackTime,c.CostNote";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(@" select Count(1) from dbo.BussTendersCost  AS  c  
                                    INNER JOIN dbo.BussTendersInfoDetail AS d ON c.BussTendersInfoDetailID=d.id
                                    INNER JOIN dbo.BussTendersInfo AS t ON c.BussTendersInfoID = t.id
                                    INNER JOIN dbo.BussCustomer AS cust ON d.CustomerID = cust.Id where 1=1 and c.DeleterEmpId=0 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),

                new SqlParameter("@BidBondPayTimeS",SqlDbType.DateTime),
                new SqlParameter("@BidBondPayTimeE",SqlDbType.DateTime),

                new SqlParameter("@BidBondBackTimeS",SqlDbType.DateTime),
                new SqlParameter("@BidBondBackTimeE",SqlDbType.DateTime),

                new SqlParameter("@WinTimeS",SqlDbType.DateTime),
                new SqlParameter("@WinTimeE",SqlDbType.DateTime),

                new SqlParameter("@PerformanceBondPayTimeS",SqlDbType.DateTime),
                new SqlParameter("@PerformanceBondPayTimeE",SqlDbType.DateTime),

                new SqlParameter("@PerformanceBondBackTimeS",SqlDbType.DateTime),
                new SqlParameter("@PerformanceBondBackTimeE",SqlDbType.DateTime),

                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (t.TendersName like '%'+@TextCondtion+'%' or t.TendersNumber like '%'+@TextCondtion+'%' or cust.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "BidBondPayTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondPayTime>=@BidBondPayTimeS");
                                paras[1].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "BidBondPayTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondPayTime<=@BidBondPayTimeE");
                                paras[2].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "BidBondBackTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondBackTime>=@BidBondBackTimeS");
                                paras[3].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "BidBondBackTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondBackTime<=@BidBondBackTimeE");
                                paras[4].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "WinTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and d.WinTime>=@WinTimeS");
                                paras[5].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "WinTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and d.WinTime<=@WinTimeE");
                                paras[6].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "PerformanceBondPayTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondPayTime>=@PerformanceBondPayTimeS");
                                paras[7].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "PerformanceBondPayTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondPayTime<=@PerformanceBondPayTimeE");
                                paras[8].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "PerformanceBondBackTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondBackTime>=@PerformanceBondBackTimeS");
                                paras[9].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "PerformanceBondBackTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondBackTime<=@PerformanceBondBackTimeE");
                                paras[10].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and t.CreatorDepId=@CreatorDepId");
                                    paras[11].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")                                   
                                {
                                    strSql.Append(" and t.CreatorEmpId=@CreatorEmpId");
                                    paras[12].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "WinState":
                            {
                                strSql.Append(string.Format(" and d.WinState in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "BidBondBack":
                            {
                                var str = de.Value.ToString();
                                string[] array = str.Split(',');
                                var strsql = "";
                                if (array.Contains("0"))
                                {
                                    strsql += " c.BidBondBack>0";
                                }
                                if (array.Contains("1"))
                                {
                                    if (strsql.Length > 0)
                                    {
                                        strsql += " or ";
                                    }
                                    strsql += "  c.BidBondBack=0";
                                }

                                strSql.Append("and  (" + strsql + ")");
                            }
                            break;
                        case "PerformanceBondBack":
                            {
                                var str = de.Value.ToString();
                                string[] array = str.Split(',');
                                var strsql = "";
                                if (array.Contains("0"))
                                {
                                    strsql += " c.PerformanceBondBack>0";
                                }
                                if (array.Contains("1"))
                                {
                                    if (strsql.Length > 0)
                                    {
                                        strsql += " or ";
                                    }
                                    strsql += "  c.PerformanceBondBack=0";
                                }

                                strSql.Append("and  (" + strsql + ")");
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "c.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public void UpdateTendersCostList(int[] ids, DataModel.EmpSession userInfo)
        {
            if (ids.Length == 0)
            {
                return;
            }
            string idSet = string.Join(",", ids);
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }
            var sbSQL = new StringBuilder();
            sbSQL.Append(string.Format("Update BussTendersCost set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE ID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));
            DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
        }
    }
}
