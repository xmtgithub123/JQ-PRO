#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;

namespace DBSql.Bussiness
{
    public class BussBiddingCost : EFRepository<DataModel.Models.BussBiddingCost>
    {
        public DataTable GetList(Common.SqlPageInfo queryContext)
        {
            var sbSQL = new StringBuilder(" FROM BussBiddingCost c LEFT JOIN BussBiddingInfo b on c.BussBiddingInfoID=b.id LEFT JOIN BussBiddingInfoPackage p on c.BussBiddingInfoPackageID=p.id");
            var sbCondition = new StringBuilder(" WHERE 1=1 ");
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                sbCondition.Append(" AND (b.BiddingBatch like @text OR b.BiddingNumber like @text OR p.PackageNumber like @text)");
                sqlParameters.Add(new SqlParameter("@text", "%" + queryContext.TextCondtion + "%"));
            }
            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "")
                    {
                        continue;
                    }
                    //switch (de.Key.ToString())
                    //{


                    //}
                }
            }           
            queryContext.PageTotleRowCount = Common.ModelConvert.ConvertToDefault<int>(DAL.DBExecute.ExecuteScalar("SELECT Count(1)" + sbSQL.ToString() + sbCondition.ToString(), sqlParameters.ToArray()));
            string sql = @"SELECT * FROM (SELECT  c.Id ,
                    b.BiddingBatch,
                    b.BiddingNumber,
                    p.PackageNumber,
                    (SELECT    BaseName
                      FROM      dbo.BaseData
                      WHERE     baseID = p.BiddingProgress
                    ) AS ProgressName,
                    c.TenderFee ,
                    c.TenderFeePayTime ,
                    c.TenderAgentFee ,
                    c.TenderAgentFeePayTime ,
                    c.BidBondPay ,
                    c.BidBondPayTime ,
                    c.BidBondBack ,
                    c.BidBondBackTime ,
                    c.PerformanceBondPay ,
                    c.PerformanceBondPayTime ,
                    c.PerformanceBondBack ,
                    c.PerformanceBondBackTime ,
                    c.CostNote ,
                    row_number() OVER (ORDER BY " + queryContext.SelectOrder + ") AS row_number" + sbSQL.ToString() + sbCondition.ToString() + ") AS tb WHERE tb.row_number BETWEEN " + (((queryContext.PageIndex - 1) * queryContext.PageSize) + 1) + " AND " + (queryContext.PageIndex * queryContext.PageSize);
            return DAL.DBExecute.ExecuteDataTable(sql, sqlParameters.ToArray());
        }

        public void UpdateBussBiddingCostList(int[] ids, DataModel.EmpSession userInfo)
        {
            if (ids.Length == 0)
            {
                return;
            }
            string idSet = string.Join(",", ids);
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }
            var sbSQL = new StringBuilder();
            sbSQL.Append(string.Format("Update BussBiddingCost set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE ID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));
            DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
        }
    }
}
