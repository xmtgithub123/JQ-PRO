#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Xml;
using System.Data.Entity;
using JQ.Util;

namespace DBSql.Bussiness
{
    public class BussBiddingInfo : EFRepository<DataModel.Models.BussBiddingInfo>
    {
        public int GetBiddingsCount(int Id, string BiddingNumber, string Json)
        {
            int resault = 0;
            int Res1 = 0;
            int Res2 = 0;
            string sql1 = "select count(*) from BussBiddingInfo where BiddingNumber=@BiddingNumber and DeleterEmpId = 0 ";
            string sql2 = "select count(*) from BussBiddingInfoPackage  AS p INNER JOIN dbo.BussBiddingInfo  AS b  ON  p.BussBiddingInfoID  =b.id where b.DeleterEmpId=0 ";
            if (Id > 0)
            {
                sql1 += " and Id!=" + Id;
                sql2 += " and BussBiddingInfoID!=" + Id;
            }

            sql2 += string.Format(" and   PackageNumber in ({0})", Json);
            SqlParameter[] sqlp1 = { new SqlParameter("@BiddingNumber", SqlDbType.NVarChar) };

            try
            {
                sqlp1[0].Value = BiddingNumber.Trim();
                Res1 = Convert.ToInt32(DBExecute.ExecuteScalar(sql1, sqlp1));
                Res2 = Convert.ToInt32(DBExecute.ExecuteScalar(sql2));

            }
            catch
            {

            }
            if (Res1 > 0)
            {
                resault = -1;
            }
            if (Res2 > 0)
            {
                resault = -2;
            }
            return resault;
        }
        public void CreateOrUpdate(DataModel.Models.BussBiddingInfo model, XmlDocument xml)
        {
            using (var accessor = base.DbContext)
            {
                accessor.Database.Connection.Open();
                int MainTableID = -1;
                using (var tran = base.DbContext.Database.BeginTransaction())
                {
                    #region 新增/修改数据
                    if (model.Id > 0)
                    {

                        accessor.Entry(model).State = System.Data.Entity.EntityState.Modified;
                        accessor.SaveChanges();
                        MainTableID = model.Id;
                    }
                    else
                    {
                        accessor.Set<DataModel.Models.BussBiddingInfo>().Add(model);
                        accessor.SaveChanges();
                        MainTableID = model.Id;
                    }
                    #endregion

                    var source = accessor.Set<DataModel.Models.BussBiddingInfoPackage>().Where(m => m.BussBiddingInfoID == MainTableID).ToList();
                    RecuriseCreateOrUpdate(xml.DocumentElement, 0, source, accessor, "", MainTableID);
                    RecuriseDelete(source, xml.DocumentElement, accessor);
                    accessor.SaveChanges();
                    tran.Commit();
                }
            }
        }
        private void RecuriseCreateOrUpdate(XmlElement xmlElement, int parentID, List<DataModel.Models.BussBiddingInfoPackage> source, DbContext accessor, string path, int mainTableID)
        {
            var items = xmlElement.SelectNodes("Item");
            foreach (XmlElement item in items)
            {
                var id = TypeHelper.parseInt(item.GetAttribute("Id"));
                if (id < 0)
                {
                    //插入
                    var data = new DataModel.Models.BussBiddingInfoPackage()
                    {
                        BussBiddingInfoID = mainTableID,
                        PackageNumber = item.GetAttribute("PackageNumber"),
                        BiddingProgress = TypeHelper.parseInt(item.GetAttribute("BiddingProgress")),
                        WinTime = TypeHelper.parseDateTime(item.GetAttribute("WinTime")),
                    };
                    accessor.Set<DataModel.Models.BussBiddingInfoPackage>().Add(data);
                    accessor.SaveChanges();
                    id = data.Id;
                }
                else if (id > 0)
                {
                    var data = accessor.Set<DataModel.Models.BussBiddingInfoPackage>().FirstOrDefault(m => m.Id == id);
                    if (data == null)
                    {
                        continue;
                    }
                    data.PackageNumber = item.GetAttribute("PackageNumber");
                    data.BiddingProgress = TypeHelper.parseInt(item.GetAttribute("BiddingProgress"));
                    data.WinTime = TypeHelper.parseDateTime(item.GetAttribute("WinTime"));
                    accessor.Entry(data).State = System.Data.Entity.EntityState.Modified;
                    accessor.SaveChanges();
                    id = data.Id;
                }
                RecuriseCreateOrUpdate(item, id, source, accessor, path.ToString() + id.ToString() + "/", mainTableID);
            }
        }
        private void RecuriseDelete(List<DataModel.Models.BussBiddingInfoPackage> sources, XmlElement xmlElement, DbContext accessor)
        {
            var allItems = xmlElement.GetElementsByTagName("Item");
            foreach (var source in sources)
            {
                var isIn = false;
                foreach (XmlElement item in allItems)
                {
                    if (TypeHelper.parseInt(item.GetAttribute("Id")) == source.Id)
                    {
                        isIn = true;
                        break;
                    }
                }
                if (!isIn)
                {
                    var obj = accessor.Set<DataModel.Models.BussBiddingInfoPackage>().FirstOrDefault(m => m.Id == source.Id);
                    accessor.Set<DataModel.Models.BussBiddingInfoPackage>().Remove(obj);
                }
            }
        }

        public DataTable GetBiddingList(Common.SqlPageInfo queryContext, DataModel.EmpSession userInfo = null)
        {
            string RowColumn = "b.Id,b.BiddingNumber,b.BiddingBatch,b.EngineeringName,b.BiddingOpeningTime,cust.CustName as CustomerName,b.CreatorEmpId";
            RowColumn += ",b.BiddingSourse,isnull(c.ID,0) as CostID";
            RowColumn += ",(case when b.IsTemporary=0 then '否' else '是' end ) as  IsTemporaryName";
            RowColumn += ",BiddingDeptName as DeptName,b.TemporaryIsBack,b.TemporaryMoney";
            RowColumn += ",isnull((select EmpName from BaseEmployee where EmpID=b.BiddingManageID),'') as BiddingManageName";
            RowColumn += ",f.Id AS FlowID, f.FlowName,f.FlowStatusID,f.FlowStatusName,f.FlowXml.value('(Root/TurnedEmpIDs/text())[1]', 'nvarchar(200)') AS FlowTurnedEmpIDs ";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(@" select Count(1) from
                    dbo.BussBiddingInfo AS  b
                    left join dbo.BussBiddingCost c on b.Id=c.BussBiddingInfoID  
                    left join dbo.BussCustomer AS cust ON b.CustID=cust.Id  
                    LEFT JOIN Flow f ON f.FlowRefID=b.Id and f.FlowRefTable=@FlowRefTable
                    where 1=1 and b.DeleterEmpId=0 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),

                new SqlParameter("@BiddingOpeningTimeS",SqlDbType.DateTime),
                new SqlParameter("@BiddingOpeningTimeE",SqlDbType.DateTime),

                new SqlParameter("@BidBondPayTimeS",SqlDbType.DateTime),
                new SqlParameter("@BidBondPayTimeE",SqlDbType.DateTime),

                new SqlParameter("@BidBondBackTimeS",SqlDbType.DateTime),
                new SqlParameter("@BidBondBackTimeE",SqlDbType.DateTime),

                new SqlParameter("@WinTimeS",SqlDbType.DateTime),
                new SqlParameter("@WinTimeE",SqlDbType.DateTime),

                new SqlParameter("@PerformanceBondPayTimeS",SqlDbType.DateTime),
                new SqlParameter("@PerformanceBondPayTimeE",SqlDbType.DateTime),

                new SqlParameter("@PerformanceBondBackTimeS",SqlDbType.DateTime),
                new SqlParameter("@PerformanceBondBackTimeE",SqlDbType.DateTime),

                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
                new SqlParameter("@CompanyID",SqlDbType.Int),
                new SqlParameter("@FlowRefTable",SqlDbType.VarChar)
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (b.BiddingNumber like '%'+@TextCondtion+'%' or b.BiddingBatch like '%'+@TextCondtion+'%'  or cust.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "BiddingOpeningTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and b.BiddingOpeningTime>=@BiddingOpeningTimeS");
                                paras[1].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "BiddingOpeningTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and b.BiddingOpeningTime<=@BiddingOpeningTimeE");
                                paras[2].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and b.CreatorDepId=@CreatorDepId");
                                    paras[13].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and b.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[14].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "CompanyID":
                            strSql.Append(" and b.CompanyID=@CompanyID");
                            paras[15].Value = Convert.ToInt32(de.Value.ToString());
                            switch (de.Value.ToString())
                            {
                                case "0":
                                    paras[16].Value = "BussBiddingInfo";
                                    break;
                                case "1":
                                    paras[16].Value = "BussBiddingInfo_SJ";
                                    break;
                                case "2":
                                    paras[16].Value = "BussBiddingInfo_GC";
                                    break;
                                case "3":
                                    paras[16].Value = "BussBiddingInfo_CJ";
                                    break;
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "b.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public DataTable GetCostList(Common.SqlPageInfo queryContext)
        {
            string RowColumn = "c.Id,b.BiddingNumber,b.BiddingBatch,b.BiddingOpeningTime,cust.CustName as CustomerName";
            RowColumn += ",c.TenderFee,c.TenderFeePayTime,c.TenderAgentFee,c.TenderAgentFeePayTime,c.BidBondPay,c.BidBondPayTime,c.BidBondBack";
            RowColumn += ",c.BidBondBackTime,c.PerformanceBondPay,c.PerformanceBondPayTime,c.PerformanceBondBack,c.PerformanceBondBackTime,c.CostNote";
            RowColumn += ",(case when b.IsTemporary=0 then '否' else '是' end ) as  IsTemporaryName";
            RowColumn += ",b.BiddingDeptName";
            RowColumn += ",isnull((select EmpName from BaseEmployee where EmpID=b.BiddingManageID),'') as BiddingManageName";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(@" select Count(1) from dbo.BussBiddingCost AS  c
                    inner join dbo.BussBiddingInfo AS  b ON c.BussBiddingInfoID=b.Id
                    left join dbo.BussCustomer AS cust ON b.CustID=cust.Id
                    where 1=1 and c.DeleterEmpId=0 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),

                new SqlParameter("@WinTimeS",SqlDbType.DateTime),
                new SqlParameter("@WinTimeE",SqlDbType.DateTime),

                new SqlParameter("@BidBondPayTimeS",SqlDbType.DateTime),
                new SqlParameter("@BidBondPayTimeE",SqlDbType.DateTime),

                new SqlParameter("@BidBondBackTimeS",SqlDbType.DateTime),
                new SqlParameter("@BidBondBackTimeE",SqlDbType.DateTime),

                new SqlParameter("@PerformanceBondPayTimeS",SqlDbType.DateTime),
                new SqlParameter("@PerformanceBondPayTimeE",SqlDbType.DateTime),

                new SqlParameter("@PerformanceBondBackTimeS",SqlDbType.DateTime),
                new SqlParameter("@PerformanceBondBackTimeE",SqlDbType.DateTime),

                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreatorEmpId",SqlDbType.Int),
                new SqlParameter("@CompanyID",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (b.BiddingNumber like '%'+@TextCondtion+'%' or b.BiddingBatch like '%'+@TextCondtion+'%' or cust.CustName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "WinTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.WinTime>=@WinTimeS");
                                paras[1].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "WinTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and p.WinTime<=@WinTimeE");
                                paras[2].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "BidBondPayTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondPayTime>=@BidBondPayTimeS");
                                paras[3].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "BidBondPayTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondPayTime<=@BidBondPayTimeE");
                                paras[4].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "BidBondBackTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondBackTime>=@BidBondBackTimeS");
                                paras[5].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "BidBondBackTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.BidBondBackTime<=@BidBondBackTimeE");
                                paras[6].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;

                        case "PerformanceBondPayTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondPayTime>=@PerformanceBondPayTimeS");
                                paras[7].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "PerformanceBondPayTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondPayTime<=@PerformanceBondPayTimeE");
                                paras[8].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "PerformanceBondBackTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondBackTime>=@PerformanceBondBackTimeS");
                                paras[9].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "PerformanceBondBackTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and c.PerformanceBondBackTime<=@PerformanceBondBackTimeE");
                                paras[10].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;

                        case "BiddingProgress":
                            {
                                strSql.Append(string.Format(" and p.BiddingProgress in ({0})", de.Value.ToString()));
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and b.CreatorDepId=@CreatorDepId");
                                    paras[13].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                    strSql.Append(" and b.CreatorEmpId=@CreatorEmpId");
                                {
                                    paras[14].Value = Convert.ToInt32(de.Value.ToString());
                                }
                            }
                            break;
                        case "BidBondBack":
                            {
                                var str = de.Value.ToString();
                                string[] array = str.Split(',');
                                var strsql = "";
                                if (array.Contains("0"))
                                {
                                    strsql += " c.BidBondBack>0";
                                }
                                if (array.Contains("1"))
                                {
                                    if (strsql.Length > 0)
                                    {
                                        strsql += " or ";
                                    }
                                    strsql += "  c.BidBondBack=0";
                                }

                                strSql.Append("and  (" + strsql + ")");
                            }
                            break;
                        case "PerformanceBondBack":
                            {
                                var str = de.Value.ToString();
                                string[] array = str.Split(',');
                                var strsql = "";
                                if (array.Contains("0"))
                                {
                                    strsql += " c.PerformanceBondBack>0";
                                }
                                if (array.Contains("1"))
                                {
                                    if (strsql.Length > 0)
                                    {
                                        strsql += " or ";
                                    }
                                    strsql += "  c.PerformanceBondBack=0";
                                }

                                strSql.Append("and  (" + strsql + ")");
                            }
                            break;
                        case "CompanyID":
                            strSql.Append(" and b.CompanyID=@CompanyID ");
                            paras[13].Value = Convert.ToInt32(de.Value.ToString());
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "c.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public DataTable GetListInfo(Common.SqlPageInfo queryContext)
        {
            string RowColumn = "b.Id,b.BiddingBatch,b.EngineeringName,b.BiddingNumber,b.BiddingOpeningTime,BiddingManageID,b.Delegator ";
            RowColumn += ",isnull((select EmpName from BaseEmployee where EmpID=b.BiddingManageID),'') as BiddingManageName,isnull((select EmpName from BaseEmployee where EmpID=b.Delegator),'') as DelegatorName";
            RowColumn += ",isnull((select EmpDepID from BaseEmployee where EmpID=b.BiddingManageID),'') as BiddingManageDeptId,isnull((select EmpDepID from BaseEmployee where EmpID=b.Delegator),'') as DelegatorDeptId";
            RowColumn += ",BidStatus,BidStatusTime";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(@" select Count(1) from dbo.BussBiddingInfo AS b  where b.DeleterEmpId=0");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@BiddingOpeningTimeS",SqlDbType.DateTime),
                new SqlParameter("@BiddingOpeningTimeE",SqlDbType.DateTime),
                new SqlParameter("@FlowRefTable",SqlDbType.VarChar),
                new SqlParameter("@CompanyID",SqlDbType.Int),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (b.BiddingNumber like '%'+@TextCondtion+'%' or b.BiddingBatch like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "BiddingOpeningTimeS":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and b.BiddingOpeningTime>=@BiddingOpeningTimeS");
                                paras[1].Value = Convert.ToDateTime(de.Value);
                            }
                            break;
                        case "BiddingOpeningTimeE":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and b.BiddingOpeningTime<=@BiddingOpeningTimeE");
                                paras[2].Value = Convert.ToDateTime(de.Value).AddHours(23.99);
                            }
                            break;
                        case "IsAudit":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.Append(" and (SELECT COUNT(*) FROM dbo.Flow WHERE FlowRefTable=@FlowRefTable AND FlowRefID=b.id AND  FlowStatusID=3)>0");
                                }
                            }
                            break;
                        case "CompanyID":
                            strSql.Append(" and b.CompanyID=@CompanyID");
                            paras[4].Value = de.Value.ToString();
                            switch (de.Value.ToString())
                            {
                                case "0":
                                    paras[3].Value = "BussBiddingInfo";
                                    break;
                                case "1":
                                    paras[3].Value = "BussBiddingInfo_SJ";
                                    break;
                                case "2":
                                    paras[3].Value = "BussBiddingInfo_GC";
                                    break;
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "b.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public DataTable FilterBiddingInfoPackage(Common.SqlPageInfo queryContext)
        {
            string RowColumn = "p.Id,b.Id as BussBiddingInfoID,p.PackageNumber,p.WinTime";
            RowColumn += ",b.BiddingBatch,b.BiddingNumber";
            RowColumn += ",isnull((select BaseName from BaseData where BaseID=p.BiddingProgress),'') as ProgressName";

            StringBuilder strSql = new StringBuilder();
            strSql.Append(" select Count(1) from dbo.BussBiddingInfoPackage AS p  inner join BussBiddingInfo as b on p.BussBiddingInfoID=b.Id where 1=1 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@BussBiddingInfoID", SqlDbType.Int)
        };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (p.PackageNumber like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }
            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "") continue;

                    switch (de.Key.ToString())
                    {
                        case "Id":
                            if (de.Value.ToString() != "0")
                            {
                                strSql.Append(" and p.BussBiddingInfoID=@BussBiddingInfoID");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "IsFilter":
                            if (de.Value.ToString() != "0")
                            {
                                strSql.Append(" and (select Count(c.Id) from dbo.BussBiddingCost c WHERE p.Id=c.BussBiddingInfoPackageID and DeleterEmpId=0)=0");
                            }
                            break;
                        case "IsProgress":
                            if (de.Value.ToString() == "1")
                            {
                                strSql.Append(" and p.BiddingProgress=" + (int)DataModel.ProgressStatus.中标);
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "p.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public void UpdateBussBiddingInfoList(int[] ids, DataModel.EmpSession userInfo)
        {
            if (ids.Length == 0)
            {
                return;
            }
            string idSet = string.Join(",", ids);
            if (string.IsNullOrEmpty(idSet))
            {
                return;
            }
            var sbSQL = new StringBuilder();
            sbSQL.Append(string.Format("Update BussBiddingInfo set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE ID IN ({3})", userInfo.EmpID, userInfo.EmpName, DateTime.Now, idSet));
            DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
        }

    }
}
