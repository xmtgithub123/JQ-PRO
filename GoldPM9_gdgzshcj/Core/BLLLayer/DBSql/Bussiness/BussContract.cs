#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Data.Entity;

namespace DBSql.Bussiness
{

    public class BussContract : EFRepository<DataModel.Models.BussContract>
    {
        /// <summary>
        /// 合同列表SQL 查询
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable GetContractList(Common.SqlPageInfo condition)
        {
            string RowColumn = "c.*,";
            RowColumn += "isnull((select Sum(FeeMoney) from BussFeeFact bf where bf.ConID=c.Id and bf.DeleterEmpId=0),0) as FeeFact,";
            RowColumn += "isnull((select Sum(InvoiceMoney) from dbo.BussFeeInvoice bfi where bfi.ConID=c.Id and bfi.DeleterEmpId=0 and bfi.FlowID>=0),0) as FeeInvoice ";
            RowColumn += ",isnull((select BaseName from BaseData where BaseID=ConFulfilType),'') as ConFulfilTypeName ";
            RowColumn += ",f.Id as FlowIDD, f.FlowName,f.FlowStatusID,f.FlowStatusName,f.FlowXml.value('(Root/TurnedEmpIDs/text())[1]', 'nvarchar(200)') AS FlowTurnedEmpIDs ";
            RowColumn += ",isnull((SELECT CAST(ProjID as varchar)+'x' FROM BusProjContractRelation bpcr where bpcr.ConID=c.Id FOR XML PATH('')),-1) as ProjId";
            RowColumn += @",ISNULL(( SELECT    DISTINCT
                                            CAST(p.ProjNumber AS NVARCHAR(50)) + ','
                                     FROM   BusProjContractRelation x
                                            LEFT JOIN dbo.Project p ON x.ProjID = p.Id
                                     WHERE  ConID = c.ID
                                            AND ProjID <> ''
                                            AND ProjID IS NOT NULL
                                   FOR
                                     XML PATH('')
                                   ), '') AS EngineeringNumber ,
                            ( SELECT    BaseName
                              FROM      dbo.BaseData
                              WHERE     BaseID = c.ConStatus
                            ) AS ConStatusShow";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(" select Count(1) from dbo.BussContract c left join  Flow f ON f.FlowRefID=c.Id and f.FlowRefTable=@RefTable where 1=1 ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@FatherID",SqlDbType.Int),
                new SqlParameter("@CustName",SqlDbType.VarChar),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@CreateEmpId",SqlDbType.Int),
                new SqlParameter("@ProjID",SqlDbType.Int),
                new SqlParameter("@CompanyID",SqlDbType.Int),
                new SqlParameter("@RefTable",SqlDbType.VarChar)
            };

            paras[7].Value = "BussContract";

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        //扩展查询列
                        case "OtherColumn":
                            if (de.Value.ToString() != "")
                            {
                                RowColumn += de.Value.ToString();
                            }
                            break;
                        case "DeleterEmpId":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and DeleterEmpId=" + de.Value.ToString() + " ");
                            }
                            break;
                        case "FatherID":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and FatherID=@FatherID ");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "IsFatherID":
                            strSql.Append(" and FatherID<>0 ");
                            break;
                        case "CustName":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and CustName=''+@CustName+'' ");
                                paras[2].Value = de.Value.ToString();
                            }
                            break;
                        case "CreatorDepId":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and f.CreatorDepId=@CreatorDepId ");
                                paras[3].Value = de.Value.ToString();
                            }
                            break;
                        case "CreateEmpId":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and f.CreatorEmpId=@CreateEmpId ");
                                paras[4].Value = de.Value.ToString();
                            }
                            break;
                        case "ProjID":
                            strSql.Append(" and (select count(1) from BusProjContractRelation bp where bp.ConID=c.Id and bp.ProjID=@ProjID )>0 ");
                            paras[5].Value = Convert.ToInt32(de.Value);
                            break;
                        case "CompanyID":
                            strSql.Append(" and CompanyID=@CompanyID ");
                            paras[6].Value = Convert.ToInt32(de.Value);
                            break;
                        case "RefTable":
                            paras[7].Value = de.Value.ToString();
                            break;
                        default:
                            break;
                    }
                }
            }
            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = "ConDate desc,ConNumber desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        /// <summary>
        /// 新增合同
        /// </summary>
        /// <param name="model"></param>
        public int Add(DataModel.Models.BussContract model, List<DataModel.Models.BussFeePlan> PlanList, List<DataModel.Models.BusProjContractRelation> ProjList)
        {
            int result = 0;
            //BussContract op = new BussContract();
            //op.DbContextRepository(this.UnitOfWork, this.DbContext);
            BussFeePlan planOp = new BussFeePlan();
            planOp.DbContextRepository(this.UnitOfWork, this.DbContext);
            BusProjContractRelation ProjOp = new BusProjContractRelation();
            ProjOp.DbContextRepository(this.UnitOfWork, this.DbContext);

            try
            {
                //开始事务
                Add(model);
                this.DbContext.SaveChanges();
                //计划收款
                foreach (var ItPlan in PlanList)
                {
                    ItPlan.ConID = model.Id;
                    planOp.Add(ItPlan);
                }

                //工程信息,合同关系
                foreach (var ItProj in ProjList)
                {
                    ItProj.ConID = model.Id;
                    ProjOp.Add(ItProj);
                }

                result = model.Id;
            }
            catch
            {

            }

            return result;
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="model"></param>
        /// <param name="ProjList"></param>
        /// <returns></returns>
        public int Edit(DataModel.Models.BussContract model, List<DataModel.Models.BusProjContractRelation> ProjList)
        {
            int result = 0;

            this.DbContextRepository(this.UnitOfWork, this.DbContext);
            BusProjContractRelation ProjOp = new BusProjContractRelation();
            ProjOp.DbContextRepository(this.UnitOfWork, this.DbContext);

            try
            {
                Edit(model);
                //删除所有
                ProjOp.Delete(p => p.ConID == model.Id);
                //在新增
                foreach (var ItProj in ProjList)
                {
                    ItProj.ConID = model.Id;
                    ProjOp.Add(ItProj);
                }

                result = model.Id;
            }
            catch
            {

            }
            return result;
        }

        /// <summary>
        /// 合同统计
        /// </summary>
        /// <returns></returns>
        public DataTable ConStati()
        {
            string sql = "SELECT *FROM dbo.View_ContractStatistics";
            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql);
        }

        /// <summary>
        /// 获取合同金额
        /// </summary>
        /// <param name="ConID"></param>
        /// <returns></returns>
        public decimal GetConFee(int ConID)
        {
            decimal ConFee = 0m;
            DataModel.Models.BussContract dmCon = Get(ConID);
            if (dmCon != null)
            {
                if (dmCon.ConFulfilType == (int)DataModel.ConDealWays.闭口)
                {
                    ConFee = GetList(p => p.FatherID == dmCon.Id).Sum(p => p.ConBalanceFee);
                    ConFee += dmCon.ConBalanceFee;
                }
                else
                {
                    //取出变更合同
                    if (dmCon.BGConFee != 0)
                    {
                        ConFee = GetList(p => p.FatherID == dmCon.Id && p.ColAttVal1 != "1").Sum(p => p.ConFee);
                        ConFee += dmCon.BGConFee;
                    }
                    else
                    {
                        ConFee = GetList(p => p.FatherID == dmCon.Id).Sum(p => p.ConFee);
                        ConFee += dmCon.ConFee;
                    }
                }
            }
            return ConFee;
        }

        /// <summary>
        /// 获取合同大小报表
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractDecisionData(Common.SqlPageInfo condition)
        {
           
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"  select aa.m, ISNULL( ConCount,0) ConCount,'1' FeeType from (    select 1 m union all  
                        select 2 union all  
                        select 3 union all  
                        select 4 union all  
                        select 5 union all  
                        select 6 union all  
                        select 7 union all  
                        select 8 union all  
                        select 9 union all  
                        select 10 union all  
                        select 11 union all  
                        select 12) aa left join (
select COUNT(*) ConCount,month(ConDate) ConMonth  from  BussContract where YEAR(ConDate)=@ConYear   and confee<100 and  DeleterEmpId = 0 
 group by month(ConDate)) a  on aa.m=a.ConMonth
union all
select aa.m, ISNULL( ConCount,0) ConCount,'2' FeeType from (    select 1 m union all  
                        select 2 union all  
                        select 3 union all  
                        select 4 union all  
                        select 5 union all  
                        select 6 union all  
                        select 7 union all  
                        select 8 union all  
                        select 9 union all  
                        select 10 union all  
                        select 11 union all  
                        select 12) aa left join (
select COUNT(*) ConCount,month(ConDate) ConMonth  from  BussContract where YEAR(ConDate)=@ConYear   and confee>100 and confee<=500 and  DeleterEmpId = 0 
 group by month(ConDate)) a  on aa.m=a.ConMonth
 
union all
select aa.m, ISNULL( ConCount,0) ConCount,'3' FeeType from (    select 1 m union all  
                        select 2 union all  
                        select 3 union all  
                        select 4 union all  
                        select 5 union all  
                        select 6 union all  
                        select 7 union all  
                        select 8 union all  
                        select 9 union all  
                        select 10 union all  
                        select 11 union all  
                        select 12) aa left join (
select COUNT(*) ConCount,month(ConDate) ConMonth  from  BussContract where YEAR(ConDate)=@ConYear   and confee>500 and confee<=1000 and  DeleterEmpId = 0 
 group by month(ConDate)) a  on aa.m=a.ConMonth
union all
select aa.m, ISNULL( ConCount,0) ConCount,'4' FeeType from (    select 1 m union all  
                        select 2 union all  
                        select 3 union all  
                        select 4 union all  
                        select 5 union all  
                        select 6 union all  
                        select 7 union all  
                        select 8 union all  
                        select 9 union all  
                        select 10 union all  
                        select 11 union all  
                        select 12) aa left join (
select COUNT(*) ConCount,month(ConDate) ConMonth  from  BussContract where YEAR(ConDate)=@ConYear and confee>1000 and  DeleterEmpId = 0 
group by month(ConDate)) a  on aa.m=a.ConMonth
");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        
                        
                        case "ConYear":
                            if (de.Value.ToString() != "-1")
                            {
                                
                                paras[1].Value = de.Value.ToString();
                            }
                            else
                            {
                                //如果是-1，显示全部
                            }
                            break;
                        case "FatherID":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and FatherID=@FatherID ");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "IsFatherID":
                            strSql.Append(" and FatherID<>0 ");
                            break;
                        case "CustName":
                            break;
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and CustName=''+@CustName+'' ");
                                paras[2].Value = de.Value.ToString();
                            }
                            break;
                        case "CreatorDepId":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and CreatorDepId=@CreatorDepId ");
                                paras[3].Value = de.Value.ToString();
                            }
                            break;
                        case "CreateEmpId":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and CreatorEmpId=@CreateEmpId ");
                                paras[4].Value = de.Value.ToString();
                            }
                            break;
                        case "ProjID":
                            strSql.Append(" and (select count(1) from BusProjContractRelation bp where bp.ConID=c.Id and bp.ProjID=@ProjID )>0 ");
                            paras[5].Value = Convert.ToInt32(de.Value);
                            break;
                        default:
                            break;
                    }
                }
            }



            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }


        /// <summary>
        /// 获取合同年度报表
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractYearDecision(Common.SqlPageInfo condition)
        {

            StringBuilder strSql = new StringBuilder();
            var ConYear = string.Empty;

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
 
                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                ConYear = de.Value.ToString();
                            }
                            break;
                            
                    }
                }
            }

            strSql.AppendFormat(@"  select  * from (
select COUNT(*) ConCount,year(ConDate) ConYear,'1' FeeType  from  BussContract where CONVERT(varchar, YEAR(ConDate)) IN ( {0} ) 
   and   confee<1100 and  DeleterEmpId = 0 
 group by year(ConDate) 
 
 union all
 select COUNT(*) ConCount,year(ConDate) ConYear ,'2' FeeType from  BussContract where CONVERT(varchar, YEAR(ConDate))  IN ( {0} ) 
   and confee>100 and confee<=500 and  DeleterEmpId = 0 
 group by year(ConDate) 
  union all
 select COUNT(*) ConCount,year(ConDate) ConYear ,'3' FeeType from  BussContract where CONVERT(varchar, YEAR(ConDate)) IN (  {0}) 
   and confee>500 and confee<=1000 and  DeleterEmpId = 0 
 group by year(ConDate) 
  union all
 select COUNT(*) ConCount,year(ConDate) ConYear  ,'4' FeeType from  BussContract where CONVERT(varchar, YEAR(ConDate)) IN ( {0} ) 
   and  confee>1000 and  DeleterEmpId = 0 
 group by year(ConDate) ) a 
 order by a.ConYear ,a.FeeType",ConYear);
            
            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), null);

        }



        /// <summary>
        /// 获取合同期间统计分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractCyclen(Common.SqlPageInfo condition)
        {

            StringBuilder strSql = new StringBuilder();


            strSql.Append(@"  select COUNT(*) ConCount,'1' MonthType,'1' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)=0
 union all 
  select isnull(sum(ConFee),0) ConFee,'1' MonthType, '2' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)=0 and  DeleterEmpId = 0 
   union all 
   select COUNT(*) ConCount,'2' MonthType,'1' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)<=3 and  DeleterEmpId = 0 
 union all 
  select isnull(sum(ConFee),0) ConFee,'2' MonthType, '2' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)<=3 and  DeleterEmpId = 0 
     union all 
   select COUNT(*) ConCount,'3' MonthType,'1' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)<=6 and  DeleterEmpId = 0 
 union all 
  select isnull(sum(ConFee),0) ConFee,'3' MonthType, '2' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)<=6 and  DeleterEmpId = 0 
       union all 
   select COUNT(*) ConCount,'4' MonthType,'1' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)<=12 and  DeleterEmpId = 0 
 union all 
  select isnull(sum(ConFee),0) ConFee,'4' MonthType, '2' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)<=12 and  DeleterEmpId = 0 
    union all 
   select COUNT(*) ConCount,'5' MonthType,'1' FeeType from  BussContract where DATEDIFF(month, ConDate ,@ConYear)>12 and  DeleterEmpId = 0 
 ");

            
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.VarChar),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {


                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = de.Value.ToString();
                            }
                           
                            break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }

         /// <summary>
        /// 获取合同费用月度分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractFeeMonth(Common.SqlPageInfo condition)
        {

            StringBuilder strSql = new StringBuilder();


            strSql.Append(@"   
  select * from (
   select isnull(sum(ConFee),0) ConFee,  month(condate) as monthType,  '1' FeeType from  BussContract where  YEAR(condate)=@ConYear and  DeleterEmpId = 0 
   group by month(condate)
   
   union all
   select isnull(sum(FeeMoney),0) ConFee,  month(FeeDate) as monthType,  '2' FeeType  from BussFeeFact
    where  YEAR(FeeDate)=@ConYear and  DeleterEmpId = 0 
     group by month(FeeDate)
       union all
   select isnull(sum(SubFeeFactMoney),0) ConFee,  month(SubFeeFactDate) as monthType,  '3' FeeType  from  BussSubFeeFact
    where  YEAR(SubFeeFactDate)=@ConYear and  DeleterEmpId = 0 
     group by month(SubFeeFactDate)
      
          union all
   select isnull(sum(InvoiceMoney),0) ConFee,  month(InvoiceDate) as monthType,  '4' FeeType  from  BussFeeInvoice
    where  YEAR(InvoiceDate)=@ConYear and  DeleterEmpId = 0 
     group by month(InvoiceDate) ) a
     order by a.FeeType,a.monthType asc  ");

            
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {


                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value =Convert.ToInt32( de.Value.ToString());
                            }
                           
                            break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }

        /// <summary>
        /// 获取合同费用年度分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractFeeYear(Common.SqlPageInfo condition)
        {

            StringBuilder strSql = new StringBuilder();
            var ConYear = string.Empty;

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {

                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                ConYear = de.Value.ToString();
                            }
                            break;

                    }
                }
            }

            strSql.AppendFormat(@"    select * from (
  select isnull(sum(ConFee),0) ConFee,  YEAR(condate) as monthType,  '1' FeeType from  BussContract 
       where  YEAR(condate) in ({0}) and  DeleterEmpId = 0 
   group by YEAR(condate)
   
   union all
   select isnull(sum(FeeMoney),0) ConFee,  YEAR(FeeDate) as monthType,  '2' FeeType  from BussFeeFact
    where  YEAR(FeeDate) in ({0}) and  DeleterEmpId = 0 
     group by YEAR(FeeDate)
       union all
   select isnull(sum(SubFeeFactMoney),0) ConFee,  YEAR(SubFeeFactDate) as monthType,  '3' FeeType  from  BussSubFeeFact
    where  YEAR(SubFeeFactDate) in ({0}) and  DeleterEmpId = 0 
     group by YEAR(SubFeeFactDate)
      
          union all
   select isnull(sum(InvoiceMoney),0) ConFee,  YEAR(InvoiceDate) as monthType,  '4' FeeType  from  BussFeeInvoice
    where  YEAR(InvoiceDate) in ({0}) and  DeleterEmpId = 0 
     group by YEAR(InvoiceDate) ) a
     order by a.FeeType,a.monthType asc", ConYear);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), null);


        }




        /// <summary>
        /// 获取合同分类月度金额统计
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractTypeMonthFee(Common.SqlPageInfo condition)
        {

            StringBuilder strSql = new StringBuilder();


            strSql.Append(@"        select ISNULL( sum(ConFee),0) as confee,count(*) as conNumber,BussContract.ConType,month(BussContract.ConDate) TypeMonth from  BussContract
   inner join BaseData on BussContract.ConType =BaseData.BaseID
     where BaseOrder like '059_%'
     and year(BussContract.ConDate)=@ConYear
     group by BussContract.ConType,month(BussContract.ConDate),  BaseData.BaseOrder
     order by BaseData.BaseOrder , month(BussContract.ConDate) asc ");


            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {


                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }

                            break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }


        /// <summary>
        /// 合同金额类别年度分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractTypeFeeYear(Common.SqlPageInfo condition)
        {

            StringBuilder strSql = new StringBuilder();
            var ConYear = string.Empty;

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {

                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                ConYear = de.Value.ToString();
                            }
                            break;

                    }
                }
            }

            strSql.AppendFormat(@"     select ISNULL( sum(ConFee),0) as confee,count(*) as conNumber,BussContract.ConType,year(BussContract.ConDate) TypeYear from  BussContract
   inner join BaseData on BussContract.ConType =BaseData.BaseID
     where BaseOrder like '059_%'
     and year(BussContract.ConDate) in ({0})
     group by BussContract.ConType,year(BussContract.ConDate),  BaseData.BaseOrder
     order by BaseData.BaseOrder , year(BussContract.ConDate) asc", ConYear);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), null);


        }


        
        /// <summary>
        /// 设计差错分析析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ProjectQuality(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"      select * from (
SELECT COUNT(*) numbers,BaseEmployee.EmpDepID,DesTaskCheck.CheckErrTypeID
 
  FROM  DesTaskCheck 
inner join DesTask on DesTaskCheck.TaskID=DesTask.Id
inner join BaseEmployee on DesTask.TaskEmpID=BaseEmployee.EmpID
inner join BaseData on BaseEmployee.EmpDepID=BaseData.BaseID
where BaseData.BaseAtt5='D'
group by BaseEmployee.EmpDepID,DesTaskCheck.CheckErrTypeID


union all
SELECT COUNT(*) numbers,BaseEmployee.EmpDepID ,'0' CheckErrTypeID 
  FROM   DesTask  
inner join BaseEmployee on DesTask.TaskEmpID=BaseEmployee.EmpID
inner join BaseData on BaseEmployee.EmpDepID=BaseData.BaseID
where BaseData.BaseAtt5='D' 
group by BaseEmployee.EmpDepID 
union all
SELECT COUNT(*) numbers,BaseEmployee.EmpDepID,'1' CheckErrTypeID
 
  FROM  DesTaskCheck 
inner join DesTask on DesTaskCheck.TaskID=DesTask.Id
inner join BaseEmployee on DesTask.TaskEmpID=BaseEmployee.EmpID
inner join BaseData on BaseEmployee.EmpDepID=BaseData.BaseID
where BaseData.BaseAtt5='D'
group by BaseEmployee.EmpDepID 
  ) a
order by a.EmpDepID,a.CheckErrTypeID ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            //if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            //{
            //    foreach (DictionaryEntry de in condition.SelectCondtion)
            //    {
            //        switch (de.Key.ToString())
            //        {
            //            case "StartDate":
            //                if (de.Value.ToString() != "")
            //                {

            //                    paras[1].Value = Convert.ToInt32(de.Value.ToString());
            //                }

            //                break;
            //            case "endDate":
            //                if (de.Value.ToString() != "")
            //                {

            //                    paras[1].Value = Convert.ToInt32(de.Value.ToString());
            //                }
            //                break;
            //        }
            //    }
            //}


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }



        /// <summary>
        /// 月度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ProjectMonthFinish(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"     select * from (
select COUNT(*) number , month(CreationTime) totalMonth ,'1' finishType from  DesTask 
where YEAR(CreationTime)=@ConYear
group by month(CreationTime)
union all
select COUNT(*) number , month(CreationTime) totalMonth ,'2' finishType from  DesTask 
where YEAR(CreationTime)=@ConYear and YEAR(DatePlanFinish)!=1900 and  YEAR(DateActualFinish)!=1900
and    DateActualFinish  <DatePlanFinish
group by month(CreationTime)
union all
select COUNT(*) number , month(CreationTime) totalMonth ,'3' finishType from  DesTask 
where YEAR(CreationTime)=@ConYear and YEAR(DatePlanFinish)!=1900 and  YEAR(DateActualFinish)!=1900
and      DateActualFinish  >DatePlanFinish
group by month(CreationTime) ) a
order by a.finishType ,totalMonth asc
 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }

                            break;
                        //case "endDate":
                        //    if (de.Value.ToString() != "")
                        //    {

                        //        paras[1].Value = Convert.ToInt32(de.Value.ToString());
                        //    }
                        //    break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }



        /// <summary>
        /// 年度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ProjectYearFinish(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();

            var ConYear = string.Empty;

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {

                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                ConYear = de.Value.ToString();
                            }
                            break;

                    }
                }
            }

            strSql.AppendFormat(@"    select * from (
select COUNT(*) number , YEAR(CreationTime) totalYEAR ,'1' finishType from  DesTask 
where YEAR(CreationTime) in ({0})
group by YEAR(CreationTime)
union all
select COUNT(*) number , YEAR(CreationTime) totalYEAR ,'2' finishType from  DesTask 
where YEAR(CreationTime) in ({0}) and YEAR(DatePlanFinish)!=1900 and  YEAR(DateActualFinish)!=1900
and    DateActualFinish  <DatePlanFinish
group by YEAR(CreationTime)
union all
select COUNT(*) number , YEAR(CreationTime) totalYEAR ,'3' finishType from  DesTask 
where YEAR(CreationTime) in ({0}) and YEAR(DatePlanFinish)!=1900 and  YEAR(DateActualFinish)!=1900
and      DateActualFinish  >DatePlanFinish
group by YEAR(CreationTime) ) a
order by a.finishType ,totalYEAR asc
 ", ConYear);

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        //case "ConYear":
                        //    if (de.Value.ToString() != "")
                        //    {

                        //        paras[1].Value = Convert.ToInt32(de.Value.ToString());
                        //    }

                        //    break;
                        //case "endDate":
                        //    if (de.Value.ToString() != "")
                        //    {

                        //        paras[1].Value = Convert.ToInt32(de.Value.ToString());
                        //    }
                        //    break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }



        /// <summary>
        /// 年度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ProjectPhaseFinish(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();


            strSql.Append(@"    select * from (
select COUNT(*) number , DesTask.TaskPhaseId  PhaseId ,'1' finishType 
from  DesTask inner join BaseData on DesTask.TaskPhaseId=BaseData.BaseID
where YEAR(CreationTime)=@ConYear
group by DesTask.TaskPhaseId
union all
select COUNT(*) number , DesTask.TaskPhaseId  PhaseId ,'2' finishType 
from  DesTask inner join BaseData on DesTask.TaskPhaseId=BaseData.BaseID
where YEAR(CreationTime)=@ConYear and YEAR(DatePlanFinish)!=1900 and  YEAR(DateActualFinish)!=1900
and    DateActualFinish  <DatePlanFinish
group by DesTask.TaskPhaseId

union all
select COUNT(*) number , DesTask.TaskPhaseId  PhaseId ,'3' finishType 
from  DesTask inner join BaseData on DesTask.TaskPhaseId=BaseData.BaseID
where YEAR(CreationTime)=@ConYear and YEAR(DatePlanFinish)!=1900 and  YEAR(DateActualFinish)!=1900
and      DateActualFinish  >DatePlanFinish
group by DesTask.TaskPhaseId ) a
order by a.finishType ,PhaseId asc
 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }

                            break;
                        //case "endDate":
                        //    if (de.Value.ToString() != "")
                        //    {

                        //        paras[1].Value = Convert.ToInt32(de.Value.ToString());
                        //    }
                        //    break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }


        /// <summary>
        /// 年度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable DepFinish(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();


            strSql.Append(@"   select COUNT(*) number ,Project.ProjDepId ,'1' taskType from Project 
where Project.DeleterEmpId=0 and Project.ProjDepId!=0 and Project.ParentId=0
group by Project.ProjDepId
union all

SELECT  COUNT(*) number , DesTask.CreatorDepID,'2' taskType FROM  DesTask 
group by  DesTask.CreatorDepID
union all
select COUNT(*) number ,Project.ProjDepId ,'3' taskType from Project 
where Project.DeleterEmpId=0 and Project.ProjDepId!=0 and Project.ParentId!=0
group by Project.ProjDepId
union all
SELECT  COUNT(*) number , DesTask.CreatorDepID,'4' taskType FROM  DesTask 
where TaskParentId!=0 and TaskStatus= 3
group by  DesTask.CreatorDepID
union all
SELECT  COUNT(*) number , DesTask.CreatorDepID,'5' taskType FROM  DesTask 
where TaskParentId!=0 and TaskStatus= 3
group by  DesTask.CreatorDepID
union all
SELECT  COUNT(*) number , DesTask.CreatorDepID,'6' taskType FROM  DesTask 
where TaskParentId!=0 and TaskStatus= 3
group by  DesTask.CreatorDepID

 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }

                            break;
                        //case "endDate":
                        //    if (de.Value.ToString() != "")
                        //    {

                        //        paras[1].Value = Convert.ToInt32(de.Value.ToString());
                        //    }
                        //    break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }



        /// <summary>
        /// 月度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable PayMonthReport(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"     select tMoney. *,BaseData.BaseName as depName from (
  select  BaseEmployee.EmpDepID,SUM( PayBalanceUserAccount.BalanceMoney) TotalMoney,MONTH(CreationTime) totalMonth from PayBalanceUserAccount
  inner join BaseEmployee on PayBalanceUserAccount.EmpId=BaseEmployee.EmpID
  where CreatorEmpId!=0 and BalanceType=1 and YEAR(CreationTime) = @ConYear
  group by BaseEmployee.EmpDepID,MONTH(CreationTime)
   ) tMoney  inner join BaseData on tMoney.EmpDepID=BaseData.BaseID  order by BaseData.BaseOrder asc
 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }

                            break;
                        //case "endDate":
                        //    if (de.Value.ToString() != "")
                        //    {

                        //        paras[1].Value = Convert.ToInt32(de.Value.ToString());
                        //    }
                        //    break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }


        
            
        /// <summary>
        /// 年度绩效统计
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable PayYearReport(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"       select tMoney. *,BaseData.BaseName as depName from (
  select  BaseEmployee.EmpDepID,SUM( PayBalanceUserAccount.BalanceMoney) TotalMoney,YEAR(CreationTime) totalYEAR from PayBalanceUserAccount
  inner join BaseEmployee on PayBalanceUserAccount.EmpId=BaseEmployee.EmpID
  where CreatorEmpId!=0 and BalanceType=1 
  group by BaseEmployee.EmpDepID,YEAR(CreationTime)
   ) tMoney  inner join BaseData on tMoney.EmpDepID=BaseData.BaseID 
   order by totalYEAR asc
 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                //new SqlParameter("@CustName",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }

                            break;
                        //case "endDate":
                        //    if (de.Value.ToString() != "")
                        //    {

                        //        paras[1].Value = Convert.ToInt32(de.Value.ToString());
                        //    }
                        //    break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }


        // <summary>
        /// 月度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable PayEmpManMonthReport(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"     select tMoney. * from (
  select  BaseEmployee.EmpID,SUM( PayBalanceUserAccount.BalanceMoney) TotalMoney,MONTH(CreationTime) totalMonth from PayBalanceUserAccount
  inner join BaseEmployee on PayBalanceUserAccount.EmpId=BaseEmployee.EmpID
  where CreatorEmpId!=0 and BalanceType=1 and YEAR(CreationTime) = @ConYear and BaseEmployee.EmpDepID =@EmpDepID
  group by BaseEmployee.EmpID,MONTH(CreationTime)
   ) tMoney  
 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                 new SqlParameter("@EmpDepID",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ConYear":
                            if (de.Value.ToString() != "")
                            {

                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }

                            break;
                        case "EmpDepID":
                            if (de.Value.ToString() != "")
                            {

                                paras[2].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }


        
                    // <summary>
        /// 月度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ContractReport(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"       
   select con.*,BaseData.BaseName from (
  select ConType,COUNT(*) number ,SUM(ConFee) TotalFee,MONTH(condate) as conMonth
   from dbo.BussContract
  where ConStatus = 290 and year(ConDate )=@ConYear and MONTH(condate)<=@ConMonth
  group by ConType,MONTH(condate) ) con
  inner join BaseData on con.ConType=BaseData.BaseID
  order by BaseData.BaseOrder asc
 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                 new SqlParameter("@ConMonth",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }
           
            if (condition.Filter != null && condition.Filter.Count > 0)
            {
                for (int i = 0; i < condition.Filter.Count; i++)
              
                {
                    switch (condition.Filter[i].list[0].Key)
                    {
                        case "ConYear":
                            if (condition.Filter[i].list[0].Value.ToString() != "")
                            {
                                //获取前一年的合同数据
                                if (condition.SelectCondtion.ContainsKey("IsFrontYear"))
                                {
                                    paras[1].Value = Convert.ToInt32(condition.Filter[i].list[0].Value)-1;
                                }
                                else
                                {

                                    paras[1].Value = Convert.ToInt32(condition.Filter[i].list[0].Value);
                                }
                            }

                            break;
                        case "ConMonth":
                            if (condition.Filter[i].list[0].Value.ToString() != "")
                            {

                                paras[2].Value = Convert.ToInt32(condition.Filter[i].list[0].Value);
                            }
                            break;
                    }
                }
            }


            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, strSql.ToString(), paras);

        }


        // <summary>
        /// 月度完成情况分析
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable ProjectReportList(Common.SqlPageInfo condition)
        {
            string RowColumn = @" parent.ProjNumber,parent.ProjName,projType.BaseName projType,ProjVolt.BaseName ProjVolt,ProjArea.BaseName ProjArea,
				ProjTask.BaseName ProjTask,parent.CustName,parent.CustLinkMan,parent.CustLinkTel,parent.DateCreate,parent.DatePlanFinish,
				parent.DatePlanStart,p.ProjNumber subNumber,p.ProjName subProjName,SubprojType.BaseName SubprojType,p.ColAttVal4,p.ColAttVal3,
                g.ProjNumber groupProjNumber ,ColAttType.BaseName ColAttType,p.DatePlanFinish as subDatePlanFinish,
                g.ProjName groupProjName,
                ISNULL(g.Id, 0) AS TaskGroupId ,
                ISNULL(g.TaskGroupPhaseId, 0) AS ProjPhaseId ,
                ISNULL(g.TaskGroupName, '') AS ProjPhaseName ,
                ISNULL(g.TaskGroupEmpName, '') AS ProjPhaseEmpName , -- 阶段负责人
                ISNULL(g.TaskFinishCount, 0) AS TaskFinishCount ,
                ISNULL(g.TaskTotalCount, 0) AS TaskTotalCount ,
                ISNULL(s.TaskSpecId, 0) AS ProjSpecId ,
                ISNULL(s.TaskName, '') AS ProjSpecName,
                ISNULL(s.TaskEmpName, '') AS ProjSpecEmpName,
                ISNULL(s.DatePlanStart, '1900-01-01') AS desTaskDatePlanStart,
                ISNULL(s.DatePlanFinish, '1900-01-01') AS desTaskDatePlanFinish 
            ";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"     
select   Count(1) 
from dbo.Project parent
inner join Project p on parent.Id=p.ParentId   INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                                                        AND g.DeleterEmpId = 0
                                                        AND g.TaskGroupType = 1 -- 分组类型 0 开始 1 阶段 2 分组
                        INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                                                   AND s.DeleterEmpId = 0
                                                   AND s.TaskType = 1 -- 任务类型： 0 普通任务 1 专业任务
                        left join BaseData projType on parent.ProjTypeID=projType.BaseID
                         left join BaseData ProjVolt on parent.ProjVoltID=ProjVolt.BaseID
                             left join BaseData ProjArea on parent.ProjAreaID=ProjArea.BaseID
                              left join BaseData ProjTask on parent.ProjTaskSource=ProjTask.BaseID
                          left join BaseData SubprojType on parent.ProjTypeID=SubprojType.BaseID
                           left join BaseData ColAttType on p.ColAttType3=ColAttType.BaseID
                WHERE   p.DeleterEmpId = 0 

 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@ConYear",SqlDbType.Int),
                 new SqlParameter("@ConMonth",SqlDbType.VarChar),
                //new SqlParameter("@CreatorDepId",SqlDbType.Int),
                //new SqlParameter("@CreateEmpId",SqlDbType.Int),
                //new SqlParameter("@ProjID",SqlDbType.Int)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and (ConNumber like '%'+@TextCondtion+'%' or ConName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }
           
            if (condition.Filter != null && condition.Filter.Count > 0)
            {
                for (int i = 0; i < condition.Filter.Count; i++)
              
                {
                    switch (condition.Filter[i].list[0].Key)
                    {
                        case "ConYear":
                            if (condition.Filter[i].list[0].Value.ToString() != "")
                            {
                                //获取前一年的合同数据
                                if (condition.SelectCondtion.ContainsKey("IsFrontYear"))
                                {
                                    paras[1].Value = Convert.ToInt32(condition.Filter[i].list[0].Value)-1;
                                }
                                else
                                {

                                    paras[1].Value = Convert.ToInt32(condition.Filter[i].list[0].Value);
                                }
                            }

                            break;
                        case "ConMonth":
                            if (condition.Filter[i].list[0].Value.ToString() != "")
                            {

                                paras[2].Value = Convert.ToInt32(condition.Filter[i].list[0].Value);
                            }
                            break;
                    }
                }
            }

            //判断PageModel中查询条件是否为空
            //if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            //{
            //    string selectT = "";
            //    List<SqlParameter> _paramList = paras.ToList();
            //    condition.SetSqlPrams(_paramList, ref selectT);
            //    paras = _paramList.ToArray();
            //    sbCondition.Append(selectT);
            //}
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString() , paras);
            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//
            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = " p.Id DESC, g.TaskGroupPath ASC ";
            }
             
            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql );
            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
          
        }


    }
}
