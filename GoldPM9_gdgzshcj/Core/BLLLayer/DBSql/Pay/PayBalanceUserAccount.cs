#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Xml;
using JQ.Util;
using System.Data.Entity;

namespace DBSql.Pay
{
    public class PayBalanceUserAccount : EFRepository<DataModel.Models.PayBalanceUserAccount>
    {
        private PayBalanceLot lot = new PayBalanceLot();
        private PayBalanceEngineering engi = new PayBalanceEngineering();
        private DBSql.Sys.BaseEmployee emp = new Sys.BaseEmployee();
        /// <summary>
        /// 获取技术人员的总产值
        /// </summary>
        /// <returns></returns>
        public decimal GetTechSumAcount()
        {
            decimal sum = 0.00M;
            var list = GetList(p => p.BalanceLotID == 0 && p.BalanceType == 1);//获取技术人员的预结算信息
            if (list.Count() > 0)
            {
                sum = list.Select(p => p.BalanceAmount).Sum();
            }
            return sum;
        }

        /// <summary>
        /// 获取技术人员的数量
        /// </summary>
        /// <returns></returns>
        public int GetTotalTechPerson()
        {
            int totalPerson = 0;
            DataModel.Models.PayBalanceLot payLot = lot.Get(1);//寻找第一条记录信息
            var count = GetList(p => p.BalanceLotID == 0 && p.BalanceType == 1).Select(p => p.EmpId).Distinct().ToList().Count();//获取技术人员的数量
            if (payLot != null)
            {
                if (payLot.TechEmpCount != 0)
                {
                    totalPerson = payLot.TechEmpCount;
                }
                else
                {
                    totalPerson = count;
                }
            }
            else
            {
                totalPerson = count;
            }
            return totalPerson;
        }

        /// <summary>
        /// 计算出基值
        /// </summary>
        /// <returns></returns>
        public decimal GetAverage()
        {
            decimal average = 0.00M;
            decimal techAmount = GetTechSumAcount();
            int count = GetTotalTechPerson();
            if (count != 0)
            {
                average = techAmount / count;
            }
            return average;
        }
        /// <summary>
        /// （通过基值和管理系数）获取预结算批次的管理人员产值
        /// </summary>
        /// <returns></returns>
        public decimal GetManagerAmount()
        {
            decimal sum = 0.00M;
            decimal average = GetAverage();
            decimal coffee = 0.00M;
            if (average != 0.00M)
            {
                var list = GetList(p => p.BalanceLotID == 0 && p.BalanceType == 2);
                if (list.Count() > 0)
                {
                    coffee = list.Select(p => p.ManageCoeff).Sum();
                    sum = coffee * average;
                }
            }
            return sum;
        }
        /// <summary>
        /// 获取总产值
        /// </summary>
        /// <returns></returns>
        public decimal GetTotalAmount()
        {
            return GetManagerAmount() + GetTechSumAcount();
        }

        /// <summary>
        /// 获取某个技术人员的产值
        /// </summary>
        /// <param name="EmpID"></param>
        /// <returns></returns>
        public decimal GetTechPerson(int EmpID)
        {
            decimal techSum = 0.00M;
            var list = GetList(p => p.BalanceLotID == 0 && p.EmpId == EmpID && p.BalanceType == 1).Select(p => p.BalanceAmount);
            if (list.Count() > 0)
            {
                techSum = list.Sum();
            }
            return techSum;
        }

        /// <summary>
        /// 获取管理个人的产值记录
        /// </summary>
        /// <param name="EmpID"></param>
        /// <returns></returns>
        public decimal GetMangerAmountBySelf(int EmpID)
        {
            decimal Sum = 0.00M;
            decimal CoffeSum = 0.00M;
            var list = GetList(p => p.BalanceLotID == 0 && p.EmpId == EmpID && p.BalanceType == 2).Select(p => p.ManageCoeff);
            if (list.Count() > 0)
            {
                CoffeSum = list.Sum();
                Sum = CoffeSum * GetAverage();
            }
            return Sum;
        }

        /// <summary>
        /// 获取个人的全部产值
        /// </summary>
        /// <param name="EmpId"></param>
        /// <returns></returns>
        public decimal GetAllAmountByPerson(int EmpId)
        {
            return GetTechPerson(EmpId) + GetMangerAmountBySelf(EmpId);
        }

        /// <summary>
        /// 获取某个项目工程的结算信息
        /// </summary>
        /// <param name="ProjID"></param>
        /// <returns></returns>
        public decimal GetTechMoney(int ProjID)
        {
            decimal sum = 0.00M;
            var list = engi.GetList(p => p.EngineeringID == ProjID && p.BalanceState == (int)DataModel.BalanceStatus.已结算).Select(p => p.Id).ToList();
            foreach (int PayEngiID in list)
            {
                var payUserList = GetList(p => p.BalanceEngineeringID == PayEngiID && p.BalanceType == 1);
                decimal detailSum = 0.00M;
                if (payUserList.Count() > 0)
                {
                    detailSum = payUserList.Select(p => p.BalanceMoney).Sum();
                    sum += detailSum;
                }
            }
            return sum;
        }

        public Expression<Func<DataModel.Models.PayBalanceUserAccount, bool>> GetFun(Common.SqlPageInfo condition)
        {

            var TWhere = QueryBuild<DataModel.Models.PayBalanceUserAccount>.True();
            TWhere = TWhere.And(p => p.BalanceLotID != 0);
            #region   筛选条件
            foreach (System.Collections.DictionaryEntry de in condition.SelectCondtion)
            {
                if (de.Value == null || de.Value.ToString().Trim() == "") continue;
                if (de.Value.ToString().Trim() == "0") continue;
                switch (de.Key.ToString())
                {
                    case "EmpID":
                        var EmpID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        if (EmpID != 0)
                        {
                            TWhere = TWhere.And(p => p.EmpId == EmpID);//人员
                        }
                        break;
                    case "UserID":
                        var UserID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        if (UserID != 0)
                        {
                            TWhere = TWhere.And(p => p.EmpId == UserID);//个人权限
                        }
                        break;
                    case "DeptID":
                        var DeptID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        List<int> EmpId = emp.GetList(p=>p.EmpDepID==DeptID).Select(p=>p.EmpID).ToList();
                        TWhere = TWhere.And(p => EmpId.Contains(p.EmpId));
                        break;
                    case "KeyJQSearch":
                        var KeyJQSearch = Common.ModelConvert.ConvertToDefaultType<string>(de.Value);
                        TWhere = TWhere.And(p => p.FK_PayBalanceUserAccount_BalanceEngineeringID.FK_PayBalanceEngineering_BalanceLotID.BalanceLotName.Contains(KeyJQSearch));
                        break;
                    case "startTime":
                        var startTime = Common.ModelConvert.ConvertToDefaultType<DateTime>(de.Value);
                        TWhere = TWhere.And(p => lot.Get(p.BalanceLotID).BalanceDate >= startTime);
                        break;

                    case "endTime":
                        var endTime = Common.ModelConvert.ConvertToDefaultType<DateTime>(de.Value).AddDays(1);
                        TWhere = TWhere.And(p => lot.Get(p.BalanceLotID).BalanceDate < endTime);
                        break;

                }
            }
            #endregion
            return TWhere;
        }

    }
}
