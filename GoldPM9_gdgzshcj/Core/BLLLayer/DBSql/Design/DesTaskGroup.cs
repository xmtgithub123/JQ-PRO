#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-19 21:50:51
#endregion
using Common.Data.Extenstions;
using DAL;
using DataModel;
using DBSql.Design.Dto;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace DBSql.Design
{
    public class DesTaskGroup : EFRepository<DataModel.Models.DesTaskGroup>
    {
        private OA.OaSendMess __msg = new OA.OaSendMess();
        private Sys.BaseLog __log = new Sys.BaseLog();
        private DBSql.Project.ProjectDynamic ProjectDynamicDB = new Project.ProjectDynamic();
        private DBSql.Project.Project ProjectDB = new Project.Project();


        /// <summary>
        /// 插入项目分组节点
        /// </summary>
        /// <param name="projId">项目id</param>
        /// <param name="projName">项目名称</param>
        /// <param name="groupEmpId">项目负责人id</param>
        /// <param name="groupEmpName">项目负责人名称</param>
        /// <param name="planStart">项目计划开始时间</param>
        /// <param name="planFinish">项目计划完成时间</param>
        /// <param name="groupStatus">项目状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止</param>
        /// <param name="empSession">当前登录用户</param>
        /// <param name="projectNumber">项目编号</param>
        /// <param name="projName">项目名称</param>
        /// <returns></returns>
        public DataModel.Models.DesTaskGroup InsertProjGroupNode(
            int projId, string projName,
            int groupEmpId, string groupEmpName,
            DateTime planStart, DateTime planFinish,
            TaskGroupStatus groupStatus,
            DataModel.EmpSession empSession,
            string projectNumber = "",
            string projectName = "")
        {
            string logRefHTML = "";

            DataModel.Models.DesTaskGroup newTaskGroupModel = this.FirstOrDefault(p => p.ProjId == projId && p.TaskGroupType == (int)TaskGroupType.开始 && p.DeleterEmpId == 0);

            if (null == newTaskGroupModel)
            {
                newTaskGroupModel = new DataModel.Models.DesTaskGroup();
                Common.ModelConvert.MvcDefaultSave<DataModel.Models.DesTaskGroup>(newTaskGroupModel, empSession);
                newTaskGroupModel.ProjId = projId;
                newTaskGroupModel.TaskGroupParentId = 0;
                newTaskGroupModel.TaskGroupPathIds = "";
                newTaskGroupModel.TaskGroupLevel = 0;
                newTaskGroupModel.TaskGroupOrderNum = 0;
                newTaskGroupModel.TaskGroupPath = newTaskGroupModel.TaskGroupOrderNum.ToString("0000");
                newTaskGroupModel.TaskGroupName = JQ.Util.StringUtil.ReplaceStr(projName);
                newTaskGroupModel.TaskGroupEmpID = groupEmpId;
                newTaskGroupModel.TaskGroupEmpName = groupEmpName;
                newTaskGroupModel.DatePlanStart = planStart;
                newTaskGroupModel.DatePlanFinish = planFinish;
                newTaskGroupModel.DateActualStart = DateTime.Now;
                newTaskGroupModel.TaskGroupType = (int)TaskGroupType.开始;
                newTaskGroupModel.TaskGroupStatus = (int)groupStatus; // 默认为 DBSql.Design.TaskGroupStatus.进行中
                newTaskGroupModel.TaskStatus = (int)TaskStatus.已完成; // 项目节点插入后，任务状态默认为 已完成，应为项目节点不需要策划
                newTaskGroupModel.ProjNumber = JQ.Util.StringUtil.ReplaceStr(projectNumber);
                newTaskGroupModel.ProjName = JQ.Util.StringUtil.ReplaceStr(projectName);
                this.Add(newTaskGroupModel);
                this.UnitOfWork.SaveChanges();

                logRefHTML = String.Format("{1} 被 {0} 创建，项目负责人为 {2}", empSession.EmpName, projName, groupEmpName);
            }
            else
            {
                Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTaskGroup>(newTaskGroupModel, empSession);
                newTaskGroupModel.TaskGroupName = JQ.Util.StringUtil.ReplaceStr(projName);
                newTaskGroupModel.TaskGroupEmpID = groupEmpId;
                newTaskGroupModel.TaskGroupEmpName = groupEmpName;
                newTaskGroupModel.DatePlanStart = planStart;
                newTaskGroupModel.DatePlanFinish = planFinish;
                newTaskGroupModel.ProjNumber = JQ.Util.StringUtil.ReplaceStr(projectNumber);
                newTaskGroupModel.ProjName = JQ.Util.StringUtil.ReplaceStr(projectName);
                this.Edit(newTaskGroupModel);
                this.UnitOfWork.SaveChanges();

                logRefHTML = String.Format("{1} 被 {0} 修改，项目负责人为 {2}", empSession.EmpName, projName, groupEmpName);
            }

            // 写入 系统业务日志
            DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
            log.BaseLogRefTable = "DesTaskGroup";
            log.BaseLogRefID = (int)newTaskGroupModel.Id;
            log.BaseLogRefHTML = logRefHTML;
            log.BaseLogEmpID = empSession.EmpID;
            log.EmpName = empSession.EmpName;
            log.BaseLogIP = empSession.LoginIP;
            log.BaseLogDate = DateTime.Now;
            log.BaseLogTypeID = 10;
            __log.Add(log);
            __log.UnitOfWork.SaveChanges();

            // 写入 项目动态
            ProjectDynamicDB.AddDynamic(projId, "DesTaskGroup", (int)newTaskGroupModel.Id, logRefHTML, empSession);

            // 通知 项目负责人 刷新待办任务数
            //_Public.SendNotify("ChangeTodoTaskAmount", newTaskGroupModel.TaskGroupEmpID);

            return newTaskGroupModel;
        }

        /// <summary>
        /// 插入项目阶段分组节点
        /// </summary>
        /// <param name="projGroupNode">所属项目分组节点</param>
        /// <param name="phaseId">阶段ID</param>
        /// <param name="phaseName">阶段名称</param>
        /// <param name="groupEmpId">阶段负责人</param>
        /// <param name="groupEmpName">阶段负责人名称</param>
        /// <param name="planStart">阶段计划开始时间</param>
        /// <param name="planFinish">阶段计划完成时间</param>
        /// <param name="phaseStatus">阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止</param>
        /// <param name="empSession">当前登录用户</param>
        /// <param name="projNumber">项目编号</param>
        /// <param name="projName">项目名称</param>
        /// <param name="taskStatus">阶段分组节点状态，默认 -1 将自动根据 phaseStatus 参数设置状态，同任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色）</param>
        /// <returns></returns>
        public DataModel.Models.DesTaskGroup InsertPhaseGroupNode(
            DataModel.Models.DesTaskGroup projGroupNode,
            int phaseId, string phaseName,
            int groupEmpId, string groupEmpName,
            DateTime planStart, DateTime planFinish,
            TaskGroupStatus phaseStatus,
            DataModel.EmpSession empSession,
            string projNumber = "",
            string projName = "",
            int taskStatus = -1)
        {
            string logRefHTML = "";

            DataModel.Models.DesTaskGroup newTaskGroupModel = this.FirstOrDefault(x => x.ProjId == projGroupNode.ProjId && x.TaskGroupPhaseId == phaseId && x.DeleterEmpId == 0);

            if (null == newTaskGroupModel)
            {
                newTaskGroupModel = new DataModel.Models.DesTaskGroup();
                Common.ModelConvert.MvcDefaultSave<DataModel.Models.DesTaskGroup>(newTaskGroupModel, empSession);
                newTaskGroupModel.ProjId = projGroupNode.ProjId;
                newTaskGroupModel.TaskGroupParentId = projGroupNode.Id;
                newTaskGroupModel.TaskGroupPathIds = String.IsNullOrWhiteSpace(projGroupNode.TaskGroupPathIds) ? projGroupNode.Id.ToString() : projGroupNode.TaskGroupPathIds + "," + projGroupNode.Id.ToString();
                newTaskGroupModel.TaskGroupLevel = 1;
                newTaskGroupModel.TaskGroupOrderNum = this.GetQuery(x =>
                        x.TaskGroupParentId == newTaskGroupModel.TaskGroupParentId
                    //&& x.DeleterEmpId == 0
                    ).Count() + 1;
                newTaskGroupModel.TaskGroupPath = projGroupNode.TaskGroupPath + "_" + newTaskGroupModel.TaskGroupOrderNum.ToString("0000");
                newTaskGroupModel.TaskGroupPhaseId = phaseId;
                newTaskGroupModel.TaskGroupName = JQ.Util.StringUtil.ReplaceStr(phaseName);
                newTaskGroupModel.TaskGroupEmpID = groupEmpId;
                newTaskGroupModel.TaskGroupEmpName = groupEmpName;
                newTaskGroupModel.DatePlanStart = planStart;
                newTaskGroupModel.DatePlanFinish = planFinish;
                newTaskGroupModel.DateActualStart = (phaseStatus == TaskGroupStatus.进行中 ? DateTime.Now : new DateTime(1900, 1, 1));
                newTaskGroupModel.TaskGroupType = (int)TaskGroupType.阶段;
                newTaskGroupModel.TaskGroupStatus = (int)phaseStatus; // 默认 第一个阶段 为 TaskGroupStatus.进行中 后续阶段为 TaskGroupStatus.未启动
                newTaskGroupModel.ProjNumber = JQ.Util.StringUtil.ReplaceStr(projNumber);
                newTaskGroupModel.ProjName = JQ.Util.StringUtil.ReplaceStr(projName);
                if (taskStatus < 0)
                {
                    // 值为 -1 时，本方法自动设置任务状态
                    newTaskGroupModel.TaskStatus = (phaseStatus == TaskGroupStatus.进行中 ? (int)TaskStatus.进行中 : (int)TaskStatus.未启动); // 阶段状态理论不会有 已轮到，当阶段进入 进行中， 阶段负责人自动 轮到 项目策划
                }
                else
                {
                    newTaskGroupModel.TaskStatus = taskStatus;
                }
                this.Add(newTaskGroupModel);
                this.UnitOfWork.SaveChanges();

                logRefHTML = String.Format("[{3}]{4} > {1} 被 {0} 创建，阶段负责人为 {2}", empSession.EmpName, phaseName, groupEmpName, projNumber, projName);
            }
            else
            {
                Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTaskGroup>(newTaskGroupModel, empSession);
                newTaskGroupModel.TaskGroupName = JQ.Util.StringUtil.ReplaceStr(phaseName);
                newTaskGroupModel.TaskGroupEmpID = groupEmpId;
                newTaskGroupModel.TaskGroupEmpName = groupEmpName;
                newTaskGroupModel.DatePlanStart = planStart;
                newTaskGroupModel.DatePlanFinish = planFinish;
                newTaskGroupModel.ProjNumber = JQ.Util.StringUtil.ReplaceStr(projNumber);
                newTaskGroupModel.ProjName = JQ.Util.StringUtil.ReplaceStr(projName);
                this.Edit(newTaskGroupModel);
                this.UnitOfWork.SaveChanges();

                logRefHTML = String.Format("[{3}]{4} > {1} 被 {0} 修改，阶段负责人为 {2}", empSession.EmpName, phaseName, groupEmpName, projNumber, projName);
            }

            // 写入 系统业务日志
            DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
            log.BaseLogRefTable = "DesTaskGroup";
            log.BaseLogRefID = (int)newTaskGroupModel.Id;
            log.BaseLogRefHTML = logRefHTML;
            log.BaseLogEmpID = empSession.EmpID;
            log.EmpName = empSession.EmpName;
            log.BaseLogIP = empSession.LoginIP;
            log.BaseLogDate = DateTime.Now;
            log.BaseLogTypeID = 10;
            __log.Add(log);
            __log.UnitOfWork.SaveChanges();

            // 写入 项目动态
            ProjectDynamicDB.AddDynamic(projGroupNode.ProjId, "DesTaskGroup", (int)newTaskGroupModel.Id, logRefHTML, empSession);

            // 缓存项目组成员
            Task.Factory.StartNew(delegate () {
                var desTaskGroupDB2 = new DBSql.Design.DesTaskGroup();
                desTaskGroupDB2.SetTaskGroupEmps(newTaskGroupModel.ProjId, newTaskGroupModel.TaskGroupPhaseId, newTaskGroupModel.Id);
            });

            // 通知 阶段负责人 刷新待办任务数
            _Public.SendNotify("ChangeTodoTaskAmount", newTaskGroupModel.TaskGroupEmpID);

            return newTaskGroupModel;
        }

        /// <summary>
        /// 删除 项目开始节点
        /// </summary>
        /// <param name="projId">主项ID</param>
        /// <param name="empSession"></param>
        public void DeleteProjGroupNode(int projId, DataModel.EmpSession empSession)
        {
            var models = this.GetQuery(x => x.ProjId == projId && x.DeleterEmpId == 0);
            foreach (var model in models)
            {
                Common.ModelConvert.MvcDefaultDel<DataModel.Models.DesTaskGroup>(model, empSession);
                this.Edit(model);
                this.UnitOfWork.SaveChanges();

                // 通知 阶段负责人 刷新待办任务数
                _Public.SendNotify("ChangeTodoTaskAmount", model.TaskGroupEmpID);
            }
        }

        /// <summary>
        /// 删除 项目分组节点
        /// </summary>
        /// <param name="projId">子项ID</param>
        /// <param name="phaseId">子项阶段ID</param>
        /// <param name="empSession"></param>
        public void DeleteProjPhaseNode(int projId, int phaseId, DataModel.EmpSession empSession)
        {
            var models = this.GetQuery(x => x.ProjId == projId && x.TaskGroupPhaseId == phaseId && x.TaskGroupType != (int)TaskGroupType.开始 && x.DeleterEmpId == 0);
            foreach (var model in models)
            {
                Common.ModelConvert.MvcDefaultDel<DataModel.Models.DesTaskGroup>(model, empSession);
                this.Edit(model);

                // 通知 阶段负责人 刷新待办任务数
                _Public.SendNotify("ChangeTodoTaskAmount", model.TaskGroupEmpID);
            }
            this.UnitOfWork.SaveChanges();
        }

        /// <summary>
        /// 获取 任务 详情
        /// </summary>
        /// <param name="taskId"></param>
        /// <returns></returns>
        public DesTaskGroupInput GetTaskGroupInfo(long taskId)
        {
            DataModel.Models.DesTaskGroup taskGroupInfo = this.Get(taskId);
            DesTaskGroupInput taskGroupInput = new DesTaskGroupInput();
            Common.ModelConvert.MvcChangeTarget<DesTaskGroupInput, DataModel.Models.DesTaskGroup>(taskGroupInput, taskGroupInfo);
            return taskGroupInput;
        }

        /// <summary>
        /// 获取项目的所有分组节点
        /// </summary>
        /// <param name="projID"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetTaskGroupTree(int projID)
        {
            var listTaskGroup = this
                .GetList(x => x.DeleterEmpId == 0 && x.ProjId == projID)
                .Select(x => new
                {
                    Id = x.Id,
                    _parentId = x.TaskGroupParentId,
                    iconCls = GetTaskGroupStatusIconCls(x.TaskGroupStatus),
                    TaskGroupType = x.TaskGroupType,
                    TaskGroupStatus = x.TaskGroupStatus,
                    TaskGroupStatusName = ((DBSql.Design.TaskGroupStatus)x.TaskGroupStatus).ToString(),
                    TaskGroupName = x.TaskGroupName,
                    TaskGroupEmpID = x.TaskGroupEmpID,
                    TaskGroupEmpName = x.TaskGroupEmpName,
                    DatePlanStart = x.DatePlanStart,
                    DatePlanFinish = x.DatePlanFinish,
                    TaskGroupPath = x.TaskGroupPath,
                    TaskGroupPhaseId = x.TaskGroupPhaseId
                });
            return listTaskGroup;
        }

        /// <summary>
        /// 获取 任务分组路径
        /// </summary>
        /// <param name="TaskGroupId">任务分组Id</param>
        /// <param name="includMainProj">是否包含主项节点</param>
        public DataTable GetTaskGroupPath(long TaskGroupId, bool includMainProj = false)
        {
            string sql = @"
                -- 项目层级树 （任务分组ID向上搜）

                SELECT  'TaskGroup' AS 'Type' ,
                        g.Id AS 'Id' ,
                        g.TaskGroupName AS 'Name' ,
                        CASE g.TaskGroupType
                          WHEN 0 THEN 'Project'
                          --WHEN 1 THEN 'Project'
                          ELSE 'TaskGroup'
                        END AS 'ParentType' ,
                        CASE g.TaskGroupType
                          WHEN 0 THEN p.ParentId
                          --WHEN 1 THEN g.ProjId
                          ELSE g.TaskGroupParentId
                        END AS 'ParentId'
                INTO    #Directory5
                FROM    dbo.DesTaskGroup AS g
                        INNER JOIN Project AS p ON g.ProjId = p.Id
                WHERE   g.DeleterEmpId = 0
                        --AND g.TaskGroupType <> 0
                        AND g.Id IN (
                        SELECT  ID
                        FROM    dbo.Split(( SELECT  TaskGroupPathIds + ','
                                                    + CAST(Id AS VARCHAR)
                                            FROM    dbo.DesTaskGroup
                                            WHERE   Id = @TaskGroupId
                                          ), ',') )


                SELECT  'Project' AS 'Type' ,
                p.Id AS 'Id' ,
                '[' + p.ProjNumber + ']' + p.ProjName AS 'Name' ,
                'Project' AS 'ParentType',
                p.ParentId AS 'ParentId'
                INTO #Directory6
                FROM    dbo.Project AS p
                WHERE   p.DeleterEmpId = 0
                        --AND p.Id IN (
                        --SELECT  ID
                        --FROM    dbo.Split(( SELECT  ColAttVal2 
                        --                            --+ CAST(Id AS VARCHAR)
                        --                    FROM    dbo.Project
                        --                    WHERE   Id IN ( SELECT TOP 1  ParentId
                        --                                   FROM     #Directory5
                        --                                   WHERE    ParentType = 'Project'
                        --                                 )
                        --                  ), '/') )
						AND p.Id IN ( SELECT TOP 1  ParentId
							FROM     #Directory5
							WHERE    ParentType = 'Project'
                        )

                IF (@includMainProj = 1)
                    BEGIN
                        SELECT * FROM #Directory6
                        UNION ALL
                        SELECT * FROM #Directory5
                    END
                ELSE
                    BEGIN
                        SELECT * FROM #Directory5
                    END
                --END IF

		        IF OBJECT_ID('tempdb..#Directory5') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory5
                    END
                --END IF

		        IF OBJECT_ID('tempdb..#Directory6') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory6
                    END
                --END IF
            ";
            SqlParameter[] paras = {
                new SqlParameter("@TaskGroupId",SqlDbType.BigInt),
                new SqlParameter("@includMainProj",SqlDbType.Bit)
            };
            paras[0].Value = TaskGroupId;
            paras[1].Value = includMainProj ? 1 : 0;

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }


        /// <summary>
        /// 以文字显示表示任务路径
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <param name="includMainProj">是否包含主项节点</param>
        /// <returns></returns>
        public string GetTaskGroupTextPath(long TaskGroupId, bool includMainProj = false)
        {
            DataTable dtDir = this.GetTaskGroupPath(TaskGroupId, includMainProj);

            List<string> listPath = new List<string>();
            string ParentType = "Project";
            long ParentId = 0;
            DataRow item;
            if (includMainProj)
            {
                // 包含主项的话从ParentId = 0 查起
                item = dtDir.AsEnumerable().Where(x => x.Field<string>("ParentType") == ParentType && x.Field<long>("ParentId") == ParentId).FirstOrDefault();
            }
            else
            {
                // 不包含主项的话，只有一个 ParentType = "Project" 的节点
                item = dtDir.AsEnumerable().Where(x => x.Field<string>("ParentType") == ParentType).FirstOrDefault();
            }
            while (item != null)
            {
                listPath.Add(item.Field<string>("Name"));
                ParentType = item.Field<string>("Type");
                ParentId = item.Field<long>("Id");
                item = dtDir.AsEnumerable().Where(x => x.Field<string>("ParentType") == ParentType && x.Field<long>("ParentId") == ParentId).FirstOrDefault();
            }
            return String.Join(" ＞ ", listPath.ToArray());
        }



        /// <summary>
        /// 获取 任务分组路径
        /// </summary>
        /// <param name="TaskGroupId">任务分组Id</param>
        /// <param name="includMainProj">是否包含主项节点</param>
        private List<TaskGroupPathOutput> GetTaskGroupPath2(long TaskGroupId, bool includMainProj = false)
        {
            string sql = @"
                -- 项目层级树 （任务分组ID向上搜）

                SELECT  'TaskGroup' AS 'Type' ,
                        g.Id AS 'Id' ,
                        g.TaskGroupName AS 'Name' ,
                        CASE g.TaskGroupType
                          WHEN 0 THEN 'Project'
                          --WHEN 1 THEN 'Project'
                          ELSE 'TaskGroup'
                        END AS 'ParentType' ,
                        CASE g.TaskGroupType
                          WHEN 0 THEN p.ParentId
                          --WHEN 1 THEN g.ProjId
                          ELSE g.TaskGroupParentId
                        END AS 'ParentId'
                INTO    #Directory5
                FROM    dbo.DesTaskGroup AS g
                        INNER JOIN Project AS p ON g.ProjId = p.Id
                WHERE   g.DeleterEmpId = 0
                        --AND g.TaskGroupType <> 0
                        AND g.Id IN (
                        SELECT  ID
                        FROM    dbo.Split(( SELECT  TaskGroupPathIds + ','
                                                    + CAST(Id AS VARCHAR)
                                            FROM    dbo.DesTaskGroup
                                            WHERE   Id = @TaskGroupId
                                          ), ',') )


                SELECT  'Project' AS 'Type' ,
                p.Id AS 'Id' ,
                '[' + p.ProjNumber + ']' + p.ProjName AS 'Name' ,
                'Project' AS 'ParentType',
                p.ParentId AS 'ParentId'
                INTO #Directory6
                FROM    dbo.Project AS p
                WHERE   p.DeleterEmpId = 0
                        --AND p.Id IN (
                        --SELECT  ID
                        --FROM    dbo.Split(( SELECT  ColAttVal2 
                        --                            --+ CAST(Id AS VARCHAR)
                        --                    FROM    dbo.Project
                        --                    WHERE   Id IN ( SELECT TOP 1  ParentId
                        --                                   FROM     #Directory5
                        --                                   WHERE    ParentType = 'Project'
                        --                                 )
                        --                  ), '/') )
						AND p.Id IN ( SELECT TOP 1  ParentId
							FROM     #Directory5
							WHERE    ParentType = 'Project'
                        )

                IF (@includMainProj = 1)
                    BEGIN
                        SELECT * FROM #Directory6
                        UNION ALL
                        SELECT * FROM #Directory5
                    END
                ELSE
                    BEGIN
                        SELECT * FROM #Directory5
                    END
                --END IF

		        IF OBJECT_ID('tempdb..#Directory5') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory5
                    END
                --END IF

		        IF OBJECT_ID('tempdb..#Directory6') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory6
                    END
                --END IF
            ";
            SqlParameter[] paras = {
                new SqlParameter("@TaskGroupId",SqlDbType.BigInt),
                new SqlParameter("@includMainProj",SqlDbType.Bit)
            };
            paras[0].Value = TaskGroupId;
            paras[1].Value = includMainProj ? 1 : 0;
            return this.DbContext.Database.SqlQuery<TaskGroupPathOutput>(sql, paras).ToList();
        }

        /// <summary>
        /// 以文字显示表示任务路径
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <param name="includMainProj">是否包含主项节点</param>
        /// <returns></returns>
        public string GetTaskGroupTextPath2(long TaskGroupId, bool includMainProj = false)
        {
            var dtDir = this.GetTaskGroupPath2(TaskGroupId, includMainProj);

            List<string> listPath = new List<string>();
            string ParentType = "Project";
            long ParentId = 0;
            TaskGroupPathOutput item;
            if (includMainProj)
            {
                // 包含主项的话从ParentId = 0 查起
                item = dtDir.AsEnumerable().Where(x => x.ParentType == ParentType && x.ParentId == ParentId).FirstOrDefault();
            }
            else
            {
                // 不包含主项的话，只有一个 ParentType = "Project" 的节点
                item = dtDir.AsEnumerable().Where(x => x.ParentType == ParentType).FirstOrDefault();
            }
            while (item != null)
            {
                listPath.Add(item.Name);
                ParentType = item.Type;
                ParentId = item.Id;
                item = dtDir.AsEnumerable().Where(x => x.ParentType == ParentType && x.ParentId == ParentId).FirstOrDefault();
            }
            return String.Join(" ＞ ", listPath.ToArray());
        }

        /// <summary>
        /// 获取 分组状态 图标
        /// </summary>
        /// <param name="status"></param>
        /// <returns></returns>
        private string GetTaskGroupStatusIconCls(int status)
        {
            var icon = "";
            switch (status)
            {
                case 0:
                    icon = "fa fa-circle-o";
                    break;
                case 1:
                    icon = "fa fa-dot-circle-o";
                    break;
                case 2:
                    icon = "fa fa-play-circle";
                    break;
                case 3:
                    icon = "fa fa-check-circle";
                    break;
                case 4:
                    icon = "fa fa-minus-circle";
                    break;
            }
            return icon;
        }


        /// <summary>
        /// 修改项目绩效状态
        /// </summary>
        /// <param name="pID"></param>
        public void ChangeProjStatus(int pID, TaskGroupStatus status)
        {
            //DataModel.Models.Project pModel = new DataModel.Models.Project();
            DataModel.Models.Project pModel = ProjectDB.FirstOrDefault(p => p.Id == pID);
            if (pModel != null)
            {
                if (status == TaskGroupStatus.已完成)
                {
                    pModel.ProjStatus = (int)DataModel.ProjStatus.完成;
                }
                else
                {
                    pModel.ProjStatus = 0;
                }
                ProjectDB.Edit(pModel);
                ProjectDB.UnitOfWork.SaveChanges();
            }
        }

        /// <summary>
        /// 改变 任务分组 状态
        /// </summary>
        /// <param name="taskGroupId"></param>
        /// <param name="groupStatus"></param>
        /// <param name="empSession"></param>
        public void ChangeTaskGroupStatus(long taskGroupId, TaskGroupStatus groupStatus, EmpSession empSession)
        {
            var taskGroup = this.Get(taskGroupId);
            Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTaskGroup>(taskGroup, empSession);
            if (groupStatus == TaskGroupStatus.进行中 && taskGroup.DateActualStart.Year == 1900)
            {
                taskGroup.DateActualStart = DateTime.Now;
            }
            if (groupStatus == TaskGroupStatus.已完成)
            {
                taskGroup.DateActualFinish = DateTime.Now;
            }
            taskGroup.TaskGroupStatus = (int)groupStatus;
            taskGroup.TaskStatus = groupStatus == TaskGroupStatus.进行中 && taskGroup.TaskStatus == (int)TaskStatus.未启动 ? (int)groupStatus : taskGroup.TaskStatus;
            this.Edit(taskGroup);
            this.UnitOfWork.SaveChanges();

            // 写入 系统业务日志
            string taskGroupPath = this.GetTaskGroupTextPath(taskGroupId);
            string logRefHTML = String.Format("{0} 被 {1} 置为 {2}", taskGroupPath, empSession.EmpName, groupStatus.ToString());
            DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
            log.BaseLogRefTable = "DesTaskGroup";
            log.BaseLogRefID = (int)taskGroup.Id;
            log.BaseLogRefHTML = logRefHTML;
            log.BaseLogEmpID = empSession.EmpID;
            log.EmpName = empSession.EmpName;
            log.BaseLogIP = empSession.LoginIP;
            log.BaseLogDate = DateTime.Now;
            log.BaseLogTypeID = 10;
            __log.Add(log);
            __log.UnitOfWork.SaveChanges();

            // 写入 项目动态
            ProjectDynamicDB.AddDynamic(taskGroup.ProjId, "DesTaskGroup", (int)taskGroup.Id, logRefHTML, empSession);


            // 通知 阶段负责人 刷新待办任务数
            _Public.SendNotify("ChangeTodoTaskAmount", taskGroup.TaskGroupEmpID);

            if (groupStatus == TaskGroupStatus.已完成)
            {
                ChangeProjStatus(taskGroup.ProjId, TaskGroupStatus.已完成);
            }
            else
            {
                ChangeProjStatus(taskGroup.ProjId, TaskGroupStatus.进行中);
            }
        }

        /// <summary>
        /// 改变 任务分组 状态
        /// </summary>
        /// <param name="taskGroupId"></param>
        /// <param name="groupStatus"></param>
        /// <param name="taskStatus"></param>
        /// <param name="empSession"></param>
        public void ChangeTaskGroupStatus(long taskGroupId, TaskGroupStatus groupStatus, TaskStatus taskStatus, EmpSession empSession)
        {
            var model = this.Get(taskGroupId);
            Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTaskGroup>(model, empSession);
            if (groupStatus == TaskGroupStatus.进行中 && model.DateActualStart.Year == 1900)
            {
                model.DateActualStart = DateTime.Now;
            }
            if (groupStatus == TaskGroupStatus.已完成)
            {
                model.DateActualFinish = DateTime.Now;
            }
            model.TaskGroupStatus = (int)groupStatus;
            model.TaskStatus = (int)taskStatus;
            this.Edit(model);
            this.UnitOfWork.SaveChanges();
        }

        /// <summary>
        /// 获取项目组所有成员
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <returns></returns>
        public DataTable GetTaskGroupAllUsers(long TaskGroupId)
        {
            string sql = @"
                -- 获取项目组成员
		        DECLARE @JoinEmpIds VARCHAR(max)
		        SET @JoinEmpIds = (
                SELECT  t.JoinEmpIds + ','
                FROM    ( SELECT    CAST(g.TaskGroupEmpID AS VARCHAR) AS JoinEmpIds
                          FROM      dbo.DesTaskGroup g
                          WHERE     g.DeleterEmpId = 0
                                    AND g.Id = @TaskGroupID
                          UNION ALL
                          SELECT    CAST(t.TaskEmpID AS VARCHAR) + ','
                                    + CASE t.TaskJoinEmpIds
                                        WHEN '' THEN '0'
                                        ELSE t.TaskJoinEmpIds
                                      END AS JoinEmpIds
                          FROM      dbo.DesTaskGroup g
                                    INNER JOIN dbo.DesTask t ON g.Id = t.TaskGroupId
                          WHERE     t.DeleterEmpId = 0
                                    AND g.DeleterEmpId = 0
                                    AND t.TaskType = 1
                                    AND g.Id = @TaskGroupID
                          UNION ALL
                          SELECT    REPLACE(CAST(t.TaskFlowModel.query('  
								        for $i in /root/*  
									        return string($i/@FlowNodeEmpID) 
							        ') AS VARCHAR), ' ', ',') AS JoinEmpIds
                          FROM      dbo.DesTaskGroup g
                                    INNER JOIN dbo.DesTask t ON g.Id = t.TaskGroupId
                          WHERE     t.DeleterEmpId = 0
                                    AND g.DeleterEmpId = 0
                                    AND t.TaskType = 0
                                    AND g.Id = @TaskGroupID
                        ) AS t
                FOR     XML PATH(''))
		
                SELECT  [EmpID] ,
                        [EmpName] ,
                        [EmpDepName] ,
                        [EmpTitle] ,
                        [EmpTel] ,
                        [EmpIPAddress] ,
                        [EmpIsDeleted] ,
                        [EmpTelNX] ,
                        [EmpTelWX] ,
                        [EmpFJNum] ,
                        [EmpOaMail] ,
                        [EmpComMail] ,
                        [EmpNote] ,
                        [EmpHead] ,
                        [EmpIsSub] 
                FROM    dbo.BaseEmployee
                WHERE   EmpID IN ( SELECT   ID
                                   FROM     dbo.Split(@JoinEmpIds, ',') )
                        AND EmpID <> 0
            ";

            SqlParameter[] paras = {
                new SqlParameter("@TaskGroupID",SqlDbType.BigInt)
            };
            paras[0].Value = TaskGroupId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
            return dt;
        }

        /// <summary>
        /// 生成 项目组成员到缓存列表
        /// </summary>
        /// <param name="MainProjId"></param>
        /// <returns></returns>
        public void SetProjectEmps(int MainProjId)
        {

            string sql = @"
		        --清理上次记录
                DELETE  FROM dbo.DesTaskGroupEmps
                WHERE   MainProjId = @MainProjId20161105153830 AND TaskGroupId = 0

                INSERT  INTO [dbo].[DesTaskGroupEmps]
                        ( [MainProjId] ,
                          [ProjId] ,
                          ProjPhaseId ,
                          TaskGroupId ,
                          EmpID ,
                          EmpName ,
                          PortraitUri ,
                          Permission
                        )
                        SELECT  a.[MainProjId] ,
                                a.[ProjId] ,
                                a.[ProjPhaseId] ,
                                a.[TaskGroupId] ,
                                e.EmpID AS [EmpID] ,
                                e.EmpName AS [EmpName] ,
                                e.EmpHead AS [PortraitUri] ,
                                a.Permission AS [Permission]
                        FROM    (
						          -- 55 项目创建人
                                  SELECT    DISTINCT
                                            @MainProjId20161105153830 AS [MainProjId] ,
                                            0 AS [ProjId] ,
                                            0 AS [ProjPhaseId] ,
                                            0 AS [TaskGroupId] ,
                                            p.CreatorEmpId AS EmpID ,
                                            55 AS Permission
                                  FROM      dbo.Project AS p
                                  WHERE     p.Id = @MainProjId20161105153830
                                  UNION ALL

						          -- 50 项目负责人
                                  SELECT    DISTINCT
                                            @MainProjId20161105153830 AS [MainProjId] ,
                                            0 AS [ProjId] ,
                                            0 AS [ProjPhaseId] ,
                                            0 AS [TaskGroupId] ,
                                            p.ProjEmpId AS EmpID ,
                                            50 AS Permission
                                  FROM      dbo.Project AS p
                                  WHERE     p.Id = @MainProjId20161105153830
                                  UNION ALL
                          
                                  -- 51 副项目负责人
                                  SELECT    DISTINCT
                                            @MainProjId20161105153830 AS [MainProjId] ,
                                            0 AS [ProjId] ,
                                            0 AS [ProjPhaseId] ,
                                            0 AS [TaskGroupId] ,
                                            p.FProjEmpId AS EmpID ,
                                            51 AS Permission
                                  FROM      dbo.Project AS p
                                  WHERE     p.Id = @MainProjId20161105153830
                                  UNION ALL

						          -- 45 子项创建人
                                  SELECT    DISTINCT
                                            @MainProjId20161105153830 AS [MainProjId] ,
                                            p.Id AS [ProjId] ,
                                            0 AS [ProjPhaseId] ,
                                            0 AS [TaskGroupId] ,
                                            p.CreatorEmpId AS EmpID ,
                                            45 AS Permission
                                  FROM      dbo.Project AS p
                                  WHERE     p.ParentId = @MainProjId20161105153830
                                  UNION ALL

						          -- 40 子项负责人
                                  SELECT    DISTINCT
                                            @MainProjId20161105153830 AS [MainProjId] ,
                                            p.Id AS [ProjId] ,
                                            0 AS [ProjPhaseId] ,
                                            0 AS [TaskGroupId] ,
                                            p.ProjEmpId AS EmpID ,
                                            40 AS Permission
                                  FROM      dbo.Project AS p
                                  WHERE     p.ParentId = @MainProjId20161105153830
                                ) AS a
                                INNER JOIN dbo.BaseEmployee AS e ON a.EmpID = e.EmpID
                        WHERE   a.EmpID <> 0
            ";
            SqlParameter[] paras = {
                new SqlParameter("@MainProjId20161105153830",SqlDbType.Int)
            };
            paras[0].Value = MainProjId;

            this.DbContext.Database.ExecuteSqlCommand(sql, paras);
            //DBExecute.ExecuteNonQuery(sql.ToString(), paras);
        }

        /// <summary>
        /// 项目联动更新
        /// </summary>
        /// <param name="MainProjId"></param>
        public void ModifyProjectAndTaskGroup(int MainProjId)
        {
            string sql = string.Format(@"--更新DeskTaskGroup
                        UPDATE  dbo.DesTaskGroup
                        SET     ProjNumber = b.ProjNumber ,
                                ProjName = b.ProjName ,
                                TaskGroupEmpID = b.ProjEmpId ,
                                TaskGroupEmpName = b.ProjEmpName
                        FROM    dbo.DesTaskGroup a ,
                                dbo.Project b
                        WHERE   a.ProjId = b.Id
                                AND a.ProjId in (SELECT Id FROM dbo.Project WHERE Id={0} OR ParentId={0});
                              
	                    --更新TaskGroupName,不更新阶段名称
                        UPDATE  dbo.DesTaskGroup
                        SET     TaskGroupName = '[' + ProjNumber + ']' + ProjName
                        WHERE   TaskGroupType = 0
                                AND ProjId in (SELECT Id FROM dbo.Project WHERE Id={0} OR ParentId={0});", MainProjId);
            DBExecute.ExecuteNonQuery(sql);
        }

        /// <summary>
        /// 生成 项目组成员到缓存列表
        /// </summary>
        /// <param name="ProjId"></param>
        /// <param name="PhaseId"></param>
        /// <param name="GroupId"></param>
        /// <returns></returns>
        public void SetTaskGroupEmps(int ProjId, int PhaseId, long GroupId)
        {

            string sql = @"
                --DECLARE @ProjId20161105153830 INT, @PhaseId20161105153830 INT, @TaskGroupId20161105153830 BIGINT
                --SELECT  @ProjId20161105153830 = 1360, @PhaseId20161105153830 = 0, @TaskGroupId20161105153830 = 0

	            DECLARE @MainProjId INT
	            SELECT @MainProjId = ParentId FROM dbo.Project WHERE Id = @ProjId20161105153830

	            --清理上次记录
                DELETE  FROM dbo.DesTaskGroupEmps
                WHERE   ProjId = @ProjId20161105153830
			            AND ProjPhaseId = @PhaseId20161105153830
			            AND TaskGroupId = @TaskGroupId20161105153830

	            INSERT INTO [dbo].[DesTaskGroupEmps]
                            ( [MainProjId] ,
                                [ProjId] ,
                                ProjPhaseId ,
                                TaskGroupId ,
                                EmpID ,
                                EmpName ,
                                PortraitUri ,
                                Permission
                            )
                SELECT  ISNULL(a.[MainProjId],0) AS [MainProjId],
			            a.[ProjId] ,
                        a.[ProjPhaseId] ,
                        a.[TaskGroupId] ,
                        e.EmpID AS [EmpID] ,
                        e.EmpName AS [EmpName] ,
                        e.EmpHead AS [PortraitUri] ,
                        a.Permission AS [Permission]
	            FROM    (
			                -- 35 阶段创建人
                            SELECT DISTINCT
                                    @MainProjId AS [MainProjId],
						            @ProjId20161105153830 AS [ProjId] ,
						            @PhaseId20161105153830 AS [ProjPhaseId] ,
						            @TaskGroupId20161105153830 AS [TaskGroupId] ,
						            g.CreatorEmpId AS EmpID ,
                                    35 AS Permission
                            FROM      dbo.DesTaskGroup g
                            WHERE     g.DeleterEmpId = 0
                                    AND g.ProjId = @ProjId20161105153830
						            AND ( g.Id = @TaskGroupId20161105153830
							                OR @TaskGroupId20161105153830 = 0
							            )
                            UNION ALL
				  
			                -- 30 阶段负责人
                            SELECT DISTINCT
                                    @MainProjId AS [MainProjId],
						            @ProjId20161105153830 AS [ProjId] ,
						            @PhaseId20161105153830 AS [ProjPhaseId] ,
						            @TaskGroupId20161105153830 AS [TaskGroupId] ,
						            g.TaskGroupEmpID AS EmpID ,
                                    30 AS Permission
                            FROM      dbo.DesTaskGroup g
                            WHERE     g.DeleterEmpId = 0
                                    AND g.ProjId = @ProjId20161105153830
						            AND ( g.Id = @TaskGroupId20161105153830
							                OR @TaskGroupId20161105153830 = 0
							            )
                            UNION ALL
                
                            -- 31 阶段副负责人
                            SELECT DISTINCT
                                    @MainProjId AS [MainProjId],
						            @ProjId20161105153830 AS [ProjId] ,
						            @PhaseId20161105153830 AS [ProjPhaseId] ,
						            @TaskGroupId20161105153830 AS [TaskGroupId] ,
						            ISNULL(g.FProjEmpId,'') AS EmpID ,
                                    31 AS Permission
                            FROM      dbo.Project g
                            WHERE     g.DeleterEmpId = 0
                                    AND g.Id = @ProjId20161105153830
                            UNION ALL
				  
			                -- 25 阶段管理员
                            SELECT  DISTINCT
                                    @MainProjId AS [MainProjId],
						            @ProjId20161105153830 AS [ProjId] ,
						            @PhaseId20161105153830 AS [ProjPhaseId] ,
						            @TaskGroupId20161105153830 AS [TaskGroupId] ,
						            ID AS EmpID ,
                                    25 AS Permission
                            FROM      dbo.Split(( SELECT  CAST(t.ID AS VARCHAR) + ','
                                                FROM    ( SELECT    g.TaskGroupJoinEmpIds AS ID
                                                            FROM      dbo.DesTaskGroup g
                                                            WHERE     g.DeleterEmpId = 0
                                                                    AND g.ProjId = @ProjId20161105153830
														            AND ( g.Id = @TaskGroupId20161105153830
															                OR @TaskGroupId20161105153830 = 0
															            )
                                                        ) AS t
                                                FOR
                                                XML PATH('')
                                                ), ',')
                            UNION ALL

			                -- 10 任务负责人 和 20 专业负责人
                            SELECT DISTINCT
                                    @MainProjId AS [MainProjId],
						            @ProjId20161105153830 AS [ProjId] ,
						            @PhaseId20161105153830 AS [ProjPhaseId] ,
						            @TaskGroupId20161105153830 AS [TaskGroupId] ,
						            t.TaskEmpID AS EmpID ,
                                    CASE t.TaskType
                                        WHEN 0 THEN 10
                                        WHEN 1 THEN 20
                                    END AS Permission
                            FROM      dbo.DesTaskGroup g
                                    INNER JOIN dbo.DesTask t ON g.Id = t.TaskGroupId
                            WHERE     t.DeleterEmpId = 0
                                    AND g.DeleterEmpId = 0
                                    AND g.ProjId = @ProjId20161105153830
						            AND ( g.Id = @TaskGroupId20161105153830
							                OR @TaskGroupId20161105153830 = 0
							            )
                            UNION ALL

			                -- 15 专业管理员
                            SELECT  DISTINCT
                                    @MainProjId AS [MainProjId],
						            @ProjId20161105153830 AS [ProjId] ,
						            @PhaseId20161105153830 AS [ProjPhaseId] ,
						            @TaskGroupId20161105153830 AS [TaskGroupId] ,
						            ID AS EmpID ,
                                    15 AS Permission
                            FROM      dbo.Split(( SELECT  CAST(t.ID AS VARCHAR) + ','
                                                FROM    ( SELECT    t.TaskJoinEmpIds AS ID
                                                            FROM      dbo.DesTaskGroup g
                                                                    INNER JOIN dbo.DesTask t ON g.Id = t.TaskGroupId
                                                            WHERE     t.DeleterEmpId = 0
                                                                    AND g.DeleterEmpId = 0
                                                                    AND t.TaskType = 1
                                                                    AND g.ProjId = @ProjId20161105153830
														            AND ( g.Id = @TaskGroupId20161105153830
															                OR @TaskGroupId20161105153830 = 0
															            )
                                                        ) AS t
                                                FOR
                                                XML PATH('')
                                                ), ',')
                            UNION ALL

			                -- 任务参与人员(设校审批人员)
                            SELECT  DISTINCT
                                    @MainProjId AS [MainProjId],
						            @ProjId20161105153830 AS [ProjId] ,
						            @PhaseId20161105153830 AS [ProjPhaseId] ,
						            @TaskGroupId20161105153830 AS [TaskGroupId] ,
						            ID AS EmpID ,
                                    5 AS Permission
                            FROM      dbo.Split(( SELECT  CAST(s.ID AS VARCHAR) + ','
                                                FROM    ( SELECT    REPLACE(CAST(t.TaskFlowModel.query('  
												            for $i in /root/*  
													            return string($i/@FlowNodeEmpID) 
											            ') AS VARCHAR), ' ', ',') AS ID
                                                            FROM      dbo.DesTaskGroup g
                                                                    INNER JOIN dbo.DesTask t ON g.Id = t.TaskGroupId
                                                            WHERE     t.DeleterEmpId = 0
                                                                    AND g.DeleterEmpId = 0
                                                                    AND t.TaskType = 0
                                                                    AND g.ProjId = @ProjId20161105153830
														            AND ( g.Id = @TaskGroupId20161105153830
															                OR @TaskGroupId20161105153830 = 0
															            )
                                                        ) AS s
                                                FOR
                                                XML PATH('')
                                                ), ',')
                        ) AS a
                        INNER JOIN dbo.BaseEmployee AS e ON a.EmpID = e.EmpID
                WHERE   a.EmpID <> 0
            ";
            SqlParameter[] paras = {
                new SqlParameter("@ProjId20161105153830",SqlDbType.Int),
                new SqlParameter("@PhaseId20161105153830",SqlDbType.Int),
                new SqlParameter("@TaskGroupId20161105153830",SqlDbType.BigInt)
            };
            paras[0].Value = ProjId;
            paras[1].Value = PhaseId;
            paras[2].Value = GroupId;

            this.DbContext.Database.ExecuteSqlCommand(sql, paras);
            //DBExecute.ExecuteNonQuery(sql.ToString(), paras);
        }

        /// <summary>
        /// 获取 项目组成员从缓存列表
        /// </summary>
        /// <param name="projId"></param>
        /// <param name="taskGroupId"></param>
        /// <returns></returns>
        public DataTable GetTaskGroupEmps(int projId, long taskGroupId)
        {

            string sql = @"   
                DECLARE @MainProjId INT
	            SELECT @MainProjId = ParentId FROM dbo.Project WHERE Id = @ProjId20161105153830
             
                SELECT  * ,
                        CASE Permission
                          WHEN 55 THEN '项目创建人'
                          WHEN 50 THEN '项目负责人'
                          WHEN 45 THEN '子项创建人'
                          WHEN 40 THEN '子项负责人'
                          WHEN 35 THEN '阶段创建人'
                          WHEN 30 THEN '阶段负责人'
                          WHEN 25 THEN '阶段管理员'
                          WHEN 20 THEN '专业负责人'
                          WHEN 15 THEN '专业管理员'
                          WHEN 10 THEN '任务负责人'
                          WHEN 05 THEN '任务参与人'
                        END AS [PermissionName]
                FROM    dbo.DesTaskGroupEmps
                WHERE   MainProjId = @MainProjId
			            AND ( TaskGroupId = @TaskGroupId20161105153830
					            OR @TaskGroupId20161105153830 = 0
				            )
            ";
            SqlParameter[] paras = {
                new SqlParameter("@ProjId20161105153830",SqlDbType.Int),
                new SqlParameter("@TaskGroupId20161105153830",SqlDbType.Int)
            };
            paras[0].Value = projId;
            paras[1].Value = taskGroupId;

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 设置 总的任务数
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <param name="TaskTotalCount"></param>
        /// <param name="UpdateParent">当同时调用 更改总任务数 和 更改已完任务数 方法时，只要最后一个设置为 true</param>
        public void SetTaskTotalCount(long TaskGroupId, int TaskTotalCount, bool UpdateParent = true)
        {
            var model = this.Get(TaskGroupId);
            model.TaskTotalCount = TaskTotalCount;
            this.Edit(model);
            this.UnitOfWork.SaveChanges();

            if (UpdateParent)
            {
                UpdateParentTaskCount(model.TaskGroupParentId);
            }
        }

        /// <summary>
        /// 设置 已完任务数
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <param name="TaskFinishCount"></param>
        /// <param name="DateActualFinish"></param>
        /// <param name="UpdateParent">当同时调用 更改总任务数 和 更改已完任务数 方法时，只要最后一个设置为 true</param>
        public void SetTaskFinishCount(long TaskGroupId, int TaskFinishCount, DateTime DateActualFinish, bool UpdateParent = true)
        {
            var model = this.Get(TaskGroupId);
            model.TaskFinishCount = TaskFinishCount;
            model.DateActualFinish = DateActualFinish;
            this.Edit(model);
            this.UnitOfWork.SaveChanges();

            if (UpdateParent)
            {
                UpdateParentTaskCount(model.TaskGroupParentId);
            }
        }

        /// <summary>
        ///  更新父节点任务数
        /// </summary>
        /// <param name="parentId"></param>
        public void UpdateParentTaskCount(long parentId)
        {
            var obj = (from d in this.DbContext.Set<DataModel.Models.DesTaskGroup>()
                       where d.TaskGroupParentId == parentId && d.DeleterEmpId == 0
                       group d by d.TaskGroupParentId into g
                       select new
                       {
                           SumTaskTotalCount = g.Sum(c => c.TaskTotalCount),
                           SumTaskFinishCount = g.Sum(c => c.TaskFinishCount),
                           maxDateActualFinish = g.Max(c => c.DateActualFinish)
                       }).FirstOrDefault();

            var model = GetQuery(x => x.Id == parentId && x.DeleterEmpId == 0).FirstOrDefault();
            if (model != null && obj != null)
            {
                model.TaskTotalCount = obj.SumTaskTotalCount;
                model.TaskFinishCount = obj.SumTaskFinishCount;
                model.DateActualFinish = obj.maxDateActualFinish;
                this.Edit(model);
                this.UnitOfWork.SaveChanges();

                UpdateParentTaskCount(model.TaskGroupParentId);
            }
        }



        /// <summary>
        /// 获取工作组的用户组（参与用户，项目中心用）
        /// </summary>
        /// <param name="projectId">工程ID</param>
        /// <returns></returns>
        public List<dynamic> GetTaskGroupUsers(int taskGroupID)
        {
            var data = this.DbContext.Set<DataModel.Models.DesTaskGroup>().GroupJoin(this.DbContext.Set<DataModel.Models.DesTask>(), t => t.Id, t1 => t1.TaskGroupId, (t, t1) => new { t.Id, t.TaskGroupEmpID, t.TaskGroupEmpName, t1 }).Where(m => m.Id == taskGroupID).Select(m => new { m.TaskGroupEmpID, m.TaskGroupEmpName, Tasks = m.t1.Select(m1 => new { m1.Id, m1.TaskOrderNum, m1.TaskName, m1.TaskEmpID, m1.TaskEmpName, m1.TaskFlowModel, m1.TaskParentId }) }).FirstOrDefault();
            var result = new List<dynamic>();
            //var list = (from t in this.DbContext.Set<DataModel.Models.DesTask>()
            //            join t1 in this.DbContext.Set<DataModel.Models.DesTaskGroup>() on t.TaskGroupId equals t1.Id
            //            where t1.Id == taskGroupID
            //            select new { t.TaskEmpID, t.TaskEmpName, t.TaskName t1.TaskGroupEmpID, t1.TaskGroupEmpName, t.TaskFlowModel }
            //                ).ToList<dynamic>();
            if (data == null)
            {
                return result;
            }
            result.Add(new { EmpID = data.TaskGroupEmpID, EmpName = data.TaskGroupEmpName, Tags = new List<string>() { "设总" }, IsProjectPrincipal = true });
            RecuriseTaskDatas(result, data.Tasks, 0, "");
            return result;
        }

        private void RecuriseTaskDatas(List<dynamic> result, IEnumerable<dynamic> tasks, int parentID, string parentTag)
        {
            var datas = tasks.Where(m => m.TaskParentId == parentID).OrderBy(m => m.TaskOrderNum);
            var temp = parentTag;
            foreach (var task in datas)
            {
                if (task.TaskEmpID == 0)
                {
                    continue;
                }
                var tag = temp + (string)task.TaskName;
                XDocument xmlDocument = XDocument.Parse(task.TaskFlowModel);
                var items = xmlDocument.Root.Elements("item");
                var first = items.FirstOrDefault(m => m.Attribute("rownum").Value == "1");
                if (first == null)
                {
                    continue;
                }
                if (first.Attribute("FlowNodeEmpID").Value == "0")
                {
                    AddToResult(result, task.TaskEmpID, task.TaskEmpName, "设计 " + tag);
                    //var temp = new { EmpID = task.TaskEmpID, EmpName = task.TaskEmpName };
                }
                else
                {
                    foreach (var item in items.OrderBy(m => int.Parse(m.Attribute("rownum").Value)))
                    {
                        AddToResult(result, int.Parse(first.Attribute("FlowNodeEmpID").Value), item.Attribute("FlowNodeEmpName") == null ? "未存" : item.Attribute("FlowNodeEmpName").Value, item.Attribute("FlowNodeName").Value + " " + tag);
                    }
                }
                RecuriseTaskDatas(result, tasks, (int)task.Id, tag + "/");
            }
        }

        private void AddToResult(List<dynamic> result, int empID, string empName, string tag)
        {
            if (empID == 0)
            {
                return;
            }
            var isIn = false;
            foreach (var item in result)
            {
                if (item.EmpID == empID)
                {
                    if (!item.Tags.Contains(tag))
                    {
                        item.Tags.Add(tag);
                    }
                    isIn = true;
                    break;
                }
            }
            if (!isIn)
            {
                result.Add(new { EmpID = empID, EmpName = empName, Tags = new List<string>() { tag }, IsProjectPrincipal = false });
            }
        }
    }
}
