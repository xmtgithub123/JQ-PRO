#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-08-02 14:16:09
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.Entity;
using EntityFramework.Extensions;
using DataModel;
using DBSql.Design.Dto;
using JQ.Util;

namespace DBSql.Design
{
    public class DesTaskGantt : EFRepository<DataModel.Models.DesTaskGantt>
    {

        public DataTable GetTableList(string projID)
        {
            string sql = string.Format("select  * from  DesTaskGantt where projID in  ({0}) and DeleterEmpId =0 ", projID);
            return DAL.DBExecute.ExecuteDataTable(sql);
        }

        public void CreateOrUpdate(List<DataModel.infoTask> list, int projID)
        {
            using (var accessor = base.DbContext)
            {
                accessor.Database.Connection.Open();         
                using (var tran = base.DbContext.Database.BeginTransaction())
                {               
                    #region
                    foreach (DataModel.infoTask task in list)
                    {
                        var data = accessor.Set<DataModel.Models.DesTaskGantt>().FirstOrDefault(m => m.Id == task.id);            

                        data.DatePlanStart = task.datePlanStart;
                        data.DatePlanFinish = task.datePlanFinish.AddDays(-1);
                        data.Duration = task.duration;
                        if (data.KeyPointType == 0)
                        {
                            if (data.ParentId == 0)
                            {
                                var _project = accessor.Set<DataModel.Models.Project>().FirstOrDefault(m => m.Id == task.projid);
                                _project.DatePlanStart = data.DatePlanStart;
                                _project.DatePlanFinish = data.DatePlanFinish;                               
                                accessor.Entry(_project).State = System.Data.Entity.EntityState.Modified;
                                accessor.SaveChanges();

                                var _parentproject = accessor.Set<DataModel.Models.Project>().FirstOrDefault(m => m.Id == _project.ParentId);
                                _parentproject.DatePlanStart = data.DatePlanStart;
                                _parentproject.DatePlanFinish = data.DatePlanFinish;
                                accessor.Entry(_parentproject).State = System.Data.Entity.EntityState.Modified;
                                accessor.SaveChanges();

                            }
                            else
                            {
                                if (data.TypeId == 0)
                                {
                                    var _desTaskGroup = accessor.Set<DataModel.Models.DesTaskGroup>().FirstOrDefault(m => m.Id == task.taskId);
                                    _desTaskGroup.DatePlanStart = data.DatePlanStart;
                                    _desTaskGroup.DatePlanFinish = data.DatePlanFinish;                           
                                    accessor.Entry(_desTaskGroup).State = System.Data.Entity.EntityState.Modified;
                                    accessor.SaveChanges();
                                }
                                else {

                                    var _desTask = accessor.Set<DataModel.Models.DesTask>().FirstOrDefault(m => m.Id == task.taskId);
                                    _desTask.DatePlanStart = data.DatePlanStart;
                                    _desTask.DatePlanFinish = data.DatePlanFinish;
                                    accessor.Entry(_desTask).State = System.Data.Entity.EntityState.Modified;
                                    accessor.SaveChanges();
                                }
                            }
                        }

                        accessor.Entry(data).State = System.Data.Entity.EntityState.Modified;
                        accessor.SaveChanges();
                    }
                    #endregion                                   
                    accessor.SaveChanges();
                    tran.Commit();
                }
            }
        }

        public int GetMaxOrder(string path = "")
        {
            string sql = string.Format("SELECT COUNT(1) FROM DesTaskGantt where ");
            if (path != "")
            {
                sql += "Path='" + path + "'";
            }
            else
            {
                sql += " ParentID =0";
            }
            return Convert.ToInt32(DAL.DBExecute.ExecuteScalar(sql));
        }

        public DataModel.Models.DesTaskGantt InsertProjTaskGantt(int projId, string projName, int Duration, long TaskId, int projEmpId, DateTime planStart, DateTime planFinish, DataModel.EmpSession empSession)
        {
            try
            {
                DataModel.Models.DesTaskGantt newTaskGroupModel = this.FirstOrDefault(x => x.ProjId == projId && x.ParentId == 0);
                if (null == newTaskGroupModel)
                {
                    newTaskGroupModel = new DataModel.Models.DesTaskGantt();
                    Common.ModelConvert.MvcDefaultSave<DataModel.Models.DesTaskGantt>(newTaskGroupModel, empSession);
                    newTaskGroupModel.ProjId = projId;
                    newTaskGroupModel.TypeId = (int)DataModel.GanttTypeId.DesTaskGroup;
                    newTaskGroupModel.TaskId = TaskId;
                    newTaskGroupModel.ParentId = 0;
                    newTaskGroupModel.ManageEmpId = projEmpId;
                    newTaskGroupModel.Name = projName;
                    newTaskGroupModel.Depends = "";
                    newTaskGroupModel.Progress = 0;
                    newTaskGroupModel.Duration = Duration;
                    newTaskGroupModel.Path = "";
                    newTaskGroupModel.Level = 0;
                    newTaskGroupModel.DatePlanStart = planStart;
                    newTaskGroupModel.DatePlanFinish = planFinish;
                    newTaskGroupModel.KeyPointType = 0;
                    newTaskGroupModel.startIsMilestone = false;
                    newTaskGroupModel.endIsMilestone = false;
                    newTaskGroupModel.Description = "";
                    string sql = string.Format("SELECT MAX([Order]) FROM DesTaskGantt WHERE ProjId = {0} and DeleterEmpId=0", projId);
                    newTaskGroupModel.Order = TypeHelper.parseInt(DAL.DBExecute.ExecuteScalar(sql)) + 1;
                    this.Add(newTaskGroupModel);
                    this.UnitOfWork.SaveChanges();
                }
                else
                {
                    Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTaskGantt>(newTaskGroupModel, empSession);
                    newTaskGroupModel.DatePlanStart = planStart;
                    newTaskGroupModel.DatePlanFinish = planFinish;
                    this.Edit(newTaskGroupModel);
                    this.UnitOfWork.SaveChanges();

                }
                return newTaskGroupModel;
            }
            catch
            {
                return null;
            }
        }

        public DataModel.Models.DesTaskGantt InsertPhaseTaskGantt(DataModel.Models.DesTaskGantt projGroupNode, DataModel.Models.DesTaskGroup phaseTaskGroup, DataModel.EmpSession empSession)
        {
            try
            {
                DataModel.Models.DesTaskGantt newTaskGroupModel = this.FirstOrDefault(x => x.ProjId == projGroupNode.ProjId && x.TaskId == phaseTaskGroup.Id);

                if (null == newTaskGroupModel)
                {
                    newTaskGroupModel = new DataModel.Models.DesTaskGantt();
                    Common.ModelConvert.MvcDefaultSave<DataModel.Models.DesTaskGantt>(newTaskGroupModel, empSession);

                    newTaskGroupModel.ProjId = projGroupNode.ProjId;
                    newTaskGroupModel.TypeId = (int)DataModel.GanttTypeId.DesTaskGroup;
                    newTaskGroupModel.TaskId = phaseTaskGroup.Id;
                    newTaskGroupModel.ParentId = projGroupNode.Id;
                    newTaskGroupModel.ManageEmpId = projGroupNode.ManageEmpId;
                    newTaskGroupModel.Name = phaseTaskGroup.TaskGroupName;
                    newTaskGroupModel.Depends = "";
                    newTaskGroupModel.Progress = 0;
                    newTaskGroupModel.Duration = projGroupNode.Duration;
                    newTaskGroupModel.Path = projGroupNode.Path + projGroupNode.Id + ",";
                    newTaskGroupModel.Level = 1;
                    newTaskGroupModel.DatePlanStart = projGroupNode.DatePlanStart;
                    newTaskGroupModel.DatePlanFinish = projGroupNode.DatePlanFinish;
                    newTaskGroupModel.KeyPointType = 0;
                    newTaskGroupModel.startIsMilestone = false;
                    newTaskGroupModel.endIsMilestone = false;
                    newTaskGroupModel.Description = "";
                    string sql = string.Format("SELECT MAX([Order]) FROM DesTaskGantt WHERE Path = '{0}' and DeleterEmpId=0", projGroupNode.Path);
                    newTaskGroupModel.Order = TypeHelper.parseInt(DAL.DBExecute.ExecuteScalar(sql)) + 1;
                    this.Add(newTaskGroupModel);
                    this.UnitOfWork.SaveChanges();
                }
                else
                {

                    Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTaskGantt>(newTaskGroupModel, empSession);
                    newTaskGroupModel.DatePlanStart = projGroupNode.DatePlanStart;
                    newTaskGroupModel.DatePlanFinish = projGroupNode.DatePlanFinish;
                    this.Edit(newTaskGroupModel);
                    this.UnitOfWork.SaveChanges();
                }


                return newTaskGroupModel;
            }
            catch
            {
                return null;
            }
        }

        public void DelTaskGantt(long TaskId, EmpSession userInfo)
        {
            var model = this.FirstOrDefault(m => m.TaskId == TaskId);
            if (null != model)
            {
                var sbSQL = new StringBuilder();
                sbSQL.Append(string.Format("Update DesTaskGantt set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE Id={3} or Path like '{4},%'", userInfo.EmpID, userInfo.EmpName, DateTime.Now, model.Id, model.Path + model.Id.ToString()));
                DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
            }
        }
        public void delTaskGantt(int Id, EmpSession userInfo)
        {
            var model = this.FirstOrDefault(m => m.Id == Id);
            if (null != model)
            {
                var sbSQL = new StringBuilder();
                sbSQL.Append(string.Format("Update DesTaskGantt set DeleterEmpId={0},DeleterEmpName='{1}',DeletionTime='{2}' WHERE Id={3} or Path like '{4},%'", userInfo.EmpID, userInfo.EmpName, DateTime.Now, model.Id, model.Path + model.Id.ToString()));
                DAL.DBExecute.ExecuteNonQuery(sbSQL.ToString());
            }
        }
    }
}


