#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-19 21:50:51
#endregion
using Common;
using Common.Data.Extenstions;
using DAL;
using DataModel;
using DBSql.Design.Dto;
using JQ.Util;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace DBSql.Design
{
    public partial class DesTask : EFRepository<DataModel.Models.DesTask>
    {
        private OA.OaSendMess __msg = new OA.OaSendMess();
        private Sys.BaseLog __log = new Sys.BaseLog();
        private Sys.BaseData baseDataDB = new Sys.BaseData();
        private Sys.BaseEmployee employeeDB = new Sys.BaseEmployee();
        private Sys.BaseAttach baseAttachDB = new Sys.BaseAttach();
        private Project.Project projectDB = new Project.Project();
        private DesTaskGroup desTaskGroupDB = new DesTaskGroup();
        private DesTaskAttachEx desTaskAttachExDB = new DesTaskAttachEx();
        private DesSign desSignDB = new DesSign();
        private DBSql.Archive.ArchElecProject archElecProjectDB = new DBSql.Archive.ArchElecProject();
        private DesTaskGantt desTaskGanttDB = new DesTaskGantt();
        private DBSql.Project.ProjectDynamic ProjectDynamicDB = new Project.ProjectDynamic();


        /**********************项目策划********************/

        /// <summary>
        /// 项目阶段大列表
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable GetProjectPlanList(Common.SqlPageInfo condition)
        {
            string RowColumn = @"
                p.Id ,
                p.ParentId,
                g.ProjNumber ,
                g.ProjName ,
                p.CompanyID,
                p.CustName,
                p.CustLinkMan,
                p.CustLinkTel,
                p.CreationTime,
                p.ColAttType1,
                (SELECT BaseName FROM dbo.BaseData WHERE BaseID=p.ProjDepId) as ProjDeptName,
                (SELECT BaseName FROM dbo.BaseData WHERE BaseID=p.ColAttType1) as ColAttType1Name,
                (SELECT BaseName FROM dbo.BaseData WHERE BaseID=p.ProjAreaID) as ProjAreaName,
                ISNULL(g.TaskGroupStatus, 0) AS TaskGroupStatus,
                ISNULL(g.Id, 0) AS TaskGroupId ,
                ISNULL(g.TaskGroupPhaseId, 0) AS ProjPhaseId ,
                ISNULL(g.TaskGroupName, '') AS ProjPhaseName ,
                ISNULL(g.TaskGroupEmpId, 0) AS ProjPhaseEmpId , -- 阶段负责人Id
                ISNULL(g.TaskGroupEmpName, '') AS ProjPhaseEmpName , -- 阶段负责人
                ISNULL(p.FProjEmpId, '') AS FProjEmpId , -- 副项目负责人ID
                ISNULL(p.FProjEmpName, '') AS FProjEmpName , -- 副项目负责人
                ISNULL(g.DatePlanStart, '1900-01-01') AS DatePlanStart,
                ISNULL(g.DatePlanFinish, '1900-01-01') AS DatePlanFinish ,
                ISNULL(g.TaskFinishCount, 0) AS TaskFinishCount ,
                ISNULL(g.TaskTotalCount, 0) AS TaskTotalCount
            ";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"
                SELECT  Count(1) 
                FROM    dbo.Project p
                        INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                                                        AND p.DeleterEmpId = 0
                                                        AND g.DeleterEmpId = 0
                                                        AND g.TaskGroupType = 1 -- 分组类型 0 开始 1 阶段 2 分组
            ");
            var sbCondition = new StringBuilder(" WHERE p.DeleterEmpId = 0 and p.BridgeGuid<>'00000000-0000-0000-0000-000000000000'");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@CreatorDepId",SqlDbType.Int),
                new SqlParameter("@TaskGroupEmpID",SqlDbType.VarChar),
                new SqlParameter("@InTaskGroupId",SqlDbType.VarChar)
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                sbCondition.Append(" AND (g.ProjNumber like '%'+@TextCondtion+'%' or g.ProjName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "ShowFavourite":
                            RowColumn += ",(CASE WHEN pf.ID IS NULL THEN 0 ELSE 1 END) AS IsFavourite";
                            break;
                        case "TaskGroupDept":
                            if (de.Value.ToString() != "")
                            {
                                sbCondition.Append("   and (select count(1) from DesTaskGroupEmps as pe LEFT JOIN dbo.BaseEmployee AS b ON pe.EmpID = b.empID WHERE(pe.MainProjId = p.Id OR pe.ProjId = p.Id) and  b.EmpDepID = @CreatorDepId) > 0");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "TaskGroupEmpID":
                            if (de.Value.ToString() != "")
                            {
                                sbCondition.Append("AND  (select count(pe.id)  from DesTaskGroupEmps as pe   where (pe.MainProjId = p.id OR pe.ProjId = p.id) and pe.EmpID = @TaskGroupEmpID) > 0 ");
                                paras[2].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "TaskGroupId":
                            if (de.Value.ToString() != "")
                            {
                                sbCondition.Append(" and (g.Id not in (" + de.Value + ") )");
                            }
                            break;
                        case "InTaskGroupId":
                            if (de.Value.ToString() != "")
                            {
                                sbCondition.Append(" and (g.Id=@InTaskGroupId)");
                                paras[3].Value = de.Value.ToString();
                            }
                            break;
                        case "NoJoinDetail":
                            if (de.Value.ToString() == "1")
                            {
                                strSql.Append(" and (select count(1) from DesTaskFeeDetails dts where dts.TaskGroupId=g.Id  )=0 ");
                            }
                            break;
                        case "otherColumn":
                            if (de.Value.ToString() != "")
                            {
                                RowColumn += de.Value.ToString();
                            }
                            break;
                        case "CompanyID":
                            strSql.AppendFormat(" and p.CompanyID={0} ", de.Value.ToString());
                            break;
                        case "TaskGroupStatus":
                            strSql.AppendFormat(" and g.TaskGroupStatus={0} ", de.Value.ToString());
                            break;
                    }
                }
            }
            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                sbCondition.Append(selectT);
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString() + sbCondition.ToString(), paras);
            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//
            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = " p.Id DESC, g.TaskGroupPath ASC ";
            }
            if (condition.SelectCondtion["ShowFavourite"] != null)
            {
                strSql.Append(" LEFT JOIN ProjectFavourite pf ON pf.ProjectId=p.ID AND pf.EmpID=" + condition.SelectCondtion["CurrentEmpID"]);
            }
            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql.Append(sbCondition));
            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 获取 项目策划 信息
        /// </summary>
        /// <param name="ProjID"></param>
        /// <param name="TaskGroupId"></param>
        /// <returns></returns>
        public DataTable GetProjPlanData(int ProjID, long TaskGroupId)
        {
            DataModel.Models.DesTaskGroup taskGroupModel = desTaskGroupDB.Get(TaskGroupId);

            string sql = @"
                -- 获取 项目策划数据
                SELECT  b.Id ,
				        b.TaskName ,
				        b.ProjId ,
				        b.TaskPhaseId,
				        b.TaskGroupId ,
				        b.TaskSpecId ,
				        Case TaskSpecID When 0 Then 1 Else 0 End AS TaskSpecType,
				        b.TaskStatus ,
				        b.TaskEmpID ,
				        b.TaskEmpName ,
				        b.DatePlanStart ,
				        b.DatePlanFinish ,
				        b.TaskNote ,
				        b.FlowId ,
				        ISNULL(f.FlowName, '') AS FlowName ,
				        b.TaskType,
				        b.TaskEmpID AS TaskOldEmpId ,
				        0 AS DatePlanDiff,
                        b.TaskPath,
                        b.TaskFlowModel,
                        dbo.F_GetDesFlowNodeJson(b.FlowId) as FlowXML
		        INTO	#Table20161015201
		        FROM    dbo.DesTask AS b LEFT JOIN dbo.DesFlow AS f ON b.FlowId = f.ID
		        WHERE   b.DeleterEmpId = 0
				        AND b.TaskType = 1
				        AND b.TaskGroupId = @TaskGroupId2016101520
		        ORDER BY b.TaskPath

                SELECT  0 AS Id ,
                        s.TaskName ,
                        @ProjID2016101520 AS ProjId ,
				        @TaskPhaseId2016101520 AS TaskPhaseId,
                        @TaskGroupId2016101520 AS TaskGroupId ,
                        s.TaskSpecID ,
				        s.TaskSpecType, 
                        0 AS TaskStatus ,
                        0 AS TaskEmpID ,
                        '' AS TaskEmpName ,
                        '1900-01-01' AS DatePlanStart ,
                        '1900-01-01' AS DatePlanFinish ,
                        '' AS TaskNote ,
                        0 AS FlowId ,
                        '' AS FlowName ,
                        0 AS TaskType ,
                        0 AS TaskOldEmpId ,
                        0 AS DatePlanDiff ,
                        '9999_' + s.BaseOrder AS TaskPath,
                        '' as TaskFlowModel,
                        '' as FlowXML
                INTO    #Table20161015202
                FROM    ( SELECT    BaseName AS TaskName ,
                                    BaseID AS TaskSpecID ,
                                    0 AS TaskSpecType,
							        BaseOrder
                          FROM      dbo.BaseData
                          WHERE     BaseIsDeleted = 0
							        AND BaseOrder LIKE ( SELECT BaseOrder + '_%'
                                                     FROM   dbo.BaseData
                                                     WHERE  BaseNameEng = 'Special'
                                                   )
                                    AND BaseAtt1 = ( SELECT CASE ColAttType6
                                                              WHEN 1 THEN '1'
                                                              ELSE '0'
                                                            END
                                                     FROM   dbo.Project
                                                     WHERE  Id = @ProjID2016101520
                                                   )
                          UNION ALL
                          SELECT    '汇总' AS TaskName ,
                                    0 AS TaskSpecID ,
                                    1 AS TaskSpecType, 
							        '' AS BaseOrder
                        ) AS s
                WHERE   ( CAST(s.TaskSpecID AS VARCHAR) + s.TaskName ) NOT IN (
                        SELECT  ( CAST(TaskSpecId AS VARCHAR) + TaskName )
                        FROM    #Table20161015201 )
		        ORDER BY s.TaskSpecType, s.BaseOrder

                SELECT  *
                FROM    ( SELECT    *
                          FROM      #Table20161015201
                          UNION ALL
                          SELECT    *
                          FROM      #Table20161015202
                        ) AS t
                ORDER BY t.TaskSpecType, t.TaskPath

		        IF OBJECT_ID('tempdb..#Table20161015201') IS NOT NULL
			        BEGIN
				        DROP TABLE #Table20161015201
			        END
		        --END IF

		        IF OBJECT_ID('tempdb..#Table20161015202') IS NOT NULL
			        BEGIN
				        DROP TABLE #Table20161015202
			        END
		        --END IF
            ";

            SqlParameter[] paras = {
                new SqlParameter("@ProjID2016101520",SqlDbType.Int),
                new SqlParameter("@TaskGroupId2016101520",SqlDbType.BigInt),
                new SqlParameter("@TaskPhaseId2016101520",SqlDbType.Int)
            };
            paras[0].Value = ProjID;
            paras[1].Value = TaskGroupId;
            paras[2].Value = taskGroupModel.TaskGroupPhaseId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
            return dt;
        }

        /// <summary>
        /// 保存 项目策划 数据
        /// </summary>
        /// <param name="projId">项目id</param>
        /// <param name="taskGroupId">分组id</param>
        /// <param name="projPlanData">项目策划数据</param>
        /// <param name="empSession">当前登录用户</param>
        /// <returns></returns>
        public void SaveProjPlanData(int projId, long taskGroupId, List<DesTaskInput> projPlanData, EmpSession empSession)
        {
            var group = desTaskGroupDB.FirstOrDefault(x => x.Id == taskGroupId && x.DeleterEmpId == 0);
            if (group == null)
            {
                throw new Exception(String.Format("当前指定的阶段或任务分组＂{0}＂不存在或已删除，无法保存。", taskGroupId));
            }
            if (!(group.TaskGroupStatus == (int)TaskGroupStatus.已安排 ||
                group.TaskGroupStatus == (int)TaskGroupStatus.进行中))
            {
                throw new Exception(String.Format("当前指定的阶段或任务分组为＂{0}＂状态，无法保存。", ((TaskGroupStatus)group.TaskGroupStatus).ToString()));
            }
            var newPlanSpecNames = projPlanData.Where(x => x.Id == 0).Select(x => x.TaskName).ToArray();
            foreach (var desTaskModel in projPlanData)
            {
                if (desTaskModel.Id == 0)
                {
                    // 创建专业节点
                    var specNode = InsertSpecNode(desTaskModel, empSession);
                    //InsertDesTaskGantt(projId, specNode, empSession);
                }
                else
                {
                    // 更新专业节点
                    UpdateSpecNode(desTaskModel, empSession);
                    //UpdateDesTaskGantt(desTaskModel, empSession);
                }
            }

            // 保存项目策划后，阶段状态重新变更为 进行中，阶段项目策划任务状态变为 已完成
            desTaskGroupDB.ChangeTaskGroupStatus(taskGroupId, TaskGroupStatus.进行中, TaskStatus.已完成, empSession);

            // 写入 系统业务日志
            var groupPath = desTaskGroupDB.GetTaskGroupTextPath2(group.Id);
            string logRefHTML = String.Format("{0} 由 {1} 新策划了 {2} 个专业：{3}", groupPath, empSession.EmpName, newPlanSpecNames.Length, String.Join("，", newPlanSpecNames));
            DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
            log.BaseLogRefTable = "DesTaskGroup";
            log.BaseLogRefID = (int)group.Id;
            log.BaseLogRefHTML = logRefHTML;
            log.BaseLogEmpID = empSession.EmpID;
            log.EmpName = empSession.EmpName;
            log.BaseLogIP = empSession.LoginIP;
            log.BaseLogDate = DateTime.Now;
            log.BaseLogTypeID = 10;
            __log.Add(log);
            __log.UnitOfWork.SaveChanges();

            // 写入 项目动态
            ProjectDynamicDB.AddDynamic(projId, "DesTaskGroup", (int)group.Id, logRefHTML, empSession);

            // 生成项目组成员列表
            desTaskGroupDB.SetTaskGroupEmps(group.ProjId, group.TaskGroupPhaseId, group.Id);

        }

        /// <summary>
        /// 插入专业节点
        /// </summary>
        /// <param name="desTaskModel"></param>
        /// <param name="empSession"></param>
        public DataModel.Models.DesTask InsertSpecNode(DesTaskInput desTaskModel, EmpSession empSession)
        {
            var newTaskModel = new DataModel.Models.DesTask();
            Common.ModelConvert.ConvertToDefault<DataModel.Models.DesTask>(newTaskModel);
            Common.ModelConvert.MvcDefaultSave<DataModel.Models.DesTask>(newTaskModel, empSession);
            newTaskModel.ProjId = desTaskModel.ProjId;
            newTaskModel.TaskPhaseId = desTaskModel.TaskPhaseId;
            newTaskModel.TaskGroupId = desTaskModel.TaskGroupId;
            newTaskModel.TaskParentId = 0;
            newTaskModel.TaskLevel = 0;
            newTaskModel.TaskOrderNum = this.GetQuery(x =>
                    x.TaskGroupId == newTaskModel.TaskGroupId
                    && x.TaskParentId == newTaskModel.TaskParentId
                    && x.DeleterEmpId == 0
                ).Count() + 1;
            newTaskModel.TaskPath = newTaskModel.TaskOrderNum.ToString("0000");
            newTaskModel.TaskPathIds = "";

            newTaskModel.TaskSpecId = desTaskModel.TaskSpecId;
            newTaskModel.TaskName = desTaskModel.TaskName;
            newTaskModel.TaskEmpID = desTaskModel.TaskEmpID;
            newTaskModel.TaskEmpName = desTaskModel.TaskEmpName;
            newTaskModel.DatePlanStart = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanStart, new DateTime(1900, 1, 1));
            newTaskModel.DatePlanFinish = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanFinish, new DateTime(1900, 1, 1));
            newTaskModel.DateActualStart = DateTime.Now; // 插入专业时直接为正在进行，所以这里直接附上实际开始时间
            newTaskModel.TaskNote = desTaskModel.TaskNote;
            newTaskModel.FlowId = desTaskModel.FlowId;

            if (!string.IsNullOrEmpty(desTaskModel.TaskFlowModelJson))
            {
                string flowXml = Common.ModelConvert.JsonList2XmlA<DesFlowNodeXmlInput>(desTaskModel.TaskFlowModelJson);
                newTaskModel.TaskFlowModel = flowXml;
            }
            else
            {
                newTaskModel.TaskFlowModel = this.GetFlowNodeXML(newTaskModel.FlowId);
            }

            newTaskModel.TaskNextFlowNodeId = desTaskModel.TaskNextFlowNodeId;
            newTaskModel.TaskJoinEmpIds = "";
            newTaskModel.TaskPriority = (int)TaskPriority.普通;
            newTaskModel.TaskStatus = (int)TaskStatus.进行中;

            newTaskModel.TaskLevelType = (int)TaskLevelType.无层级;
            newTaskModel.TaskType = (int)TaskType.专业任务;

            this.Add(newTaskModel);
            this.UnitOfWork.SaveChanges();

            // 通知 专业负责 刷新待办任务数
            _Public.SendNotify("ChangeTodoTaskAmount", newTaskModel.TaskEmpID);

            return newTaskModel;
        }

        /// <summary>
        /// 更新 专业节点
        /// </summary>
        /// <param name="desTaskModel"></param>
        /// <param name="empSession"></param>
        /// <returns></returns>
        public DataModel.Models.DesTask UpdateSpecNode(DesTaskInput desTaskModel, EmpSession empSession)
        {
            var oldTaskModel = this.Get(desTaskModel.Id);
            Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTask>(oldTaskModel, empSession);

            oldTaskModel.TaskName = desTaskModel.TaskName;
            oldTaskModel.TaskEmpID = desTaskModel.TaskEmpID;
            oldTaskModel.TaskEmpName = desTaskModel.TaskEmpName;
            oldTaskModel.DatePlanStart = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanStart, new DateTime(1900, 1, 1));
            oldTaskModel.DatePlanFinish = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanFinish, new DateTime(1900, 1, 1));
            oldTaskModel.TaskNote = desTaskModel.TaskNote;
            oldTaskModel.FlowId = desTaskModel.FlowId;

            if (!string.IsNullOrEmpty(desTaskModel.TaskFlowModelJson))
            {
                string flowXml = Common.ModelConvert.JsonList2XmlA<DesFlowNodeXmlInput>(desTaskModel.TaskFlowModelJson);
                oldTaskModel.TaskFlowModel = flowXml;
            }
            else
            {
                oldTaskModel.TaskFlowModel = this.GetFlowNodeXML(oldTaskModel.FlowId);
            }
            oldTaskModel.TaskNextFlowNodeId = desTaskModel.TaskNextFlowNodeId;
            oldTaskModel.TaskJoinEmpIds = "";
            oldTaskModel.TaskPriority = (int)TaskPriority.普通;
            oldTaskModel.TaskStatus = (desTaskModel.TaskEmpID != desTaskModel.TaskOldEmpId ? (int)TaskStatus.进行中 : oldTaskModel.TaskStatus); // 换专业负责人的话，重新设置为轮到

            this.Edit(oldTaskModel);
            this.UnitOfWork.SaveChanges();

            return oldTaskModel;
        }

        /// <summary>
        /// 插入 关键节点
        /// </summary>
        /// <param name="desTaskModel"></param>
        /// <param name="desTask"></param>
        /// <param name="firsttask"></param>
        /// <param name="empSession"></param>
        /// <returns></returns>
        public DataModel.Models.DesTaskGantt InsertDesTaskGantt(int projId, DataModel.Models.DesTask desTask, EmpSession empSession)
        {
            if (new DBSql.Sys.BaseMenu().GetModelByEng("ProjGanttList") == null)
            {
                return null;
            }
            var firsttask = desTaskGanttDB.FirstOrDefault(x => x.TaskId == desTask.TaskGroupId && x.DeleterEmpId == 0 && x.TypeId == 0 && x.ProjId == projId);
            if (firsttask == null)
            {
                throw new Exception("在关键节点中插入节点时出错，找不到不节点。");
            }
            DateTime PlanStat = TypeParse.parse<DateTime>(desTask.DatePlanStart, Convert.ToDateTime("1900-01-01"));
            DateTime PlanFinish = TypeParse.parse<DateTime>(desTask.DatePlanFinish, Convert.ToDateTime("1900-01-01"));
            if (PlanStat.Year == 1900 && PlanFinish.Year == 1900)
            {
                PlanStat = firsttask.DatePlanStart;
                PlanFinish = firsttask.DatePlanFinish;
            }
            if (PlanStat.Year == 1900)
            {
                PlanStat = firsttask.DatePlanStart;
            }
            if (PlanFinish.Year == 1900)
            {
                PlanFinish = firsttask.DatePlanFinish;
            }
            if (PlanStat.Year != 1900)
            {
                if (PlanStat < firsttask.DatePlanStart)
                {
                    PlanStat = firsttask.DatePlanStart;
                }
                if (PlanStat > firsttask.DatePlanFinish)
                {
                    PlanStat = firsttask.DatePlanFinish;
                }
            }
            if (PlanFinish.Year != 1900)
            {
                if (PlanFinish < firsttask.DatePlanStart)
                {
                    PlanFinish = firsttask.DatePlanStart;
                }
                if (PlanFinish > firsttask.DatePlanFinish)
                {
                    PlanFinish = firsttask.DatePlanFinish;
                }
            }
            //int IntervalDays = TypeHelper.GetIntervalDays(PlanStat, PlanFinish);
            //int Duration = IntervalDays == 0 ? 1 : IntervalDays;
            int Duration = Distance(PlanStat, PlanFinish);

            var newTaskGantt = new DataModel.Models.DesTaskGantt();
            Common.ModelConvert.MvcDefaultSave<DataModel.Models.DesTaskGantt>(newTaskGantt, empSession);
            newTaskGantt.ProjId = desTask.ProjId;
            newTaskGantt.TaskId = desTask.Id;
            newTaskGantt.TypeId = (int)DataModel.GanttTypeId.DesTask;
            newTaskGantt.ParentId = firsttask.Id;
            newTaskGantt.ManageEmpId = desTask.TaskEmpID;
            newTaskGantt.Name = desTask.TaskName;
            newTaskGantt.Depends = "";
            newTaskGantt.Progress = 0;
            newTaskGantt.Duration = Duration;
            newTaskGantt.Path = firsttask.Path + firsttask.Id + ",";
            newTaskGantt.Level = 2;
            newTaskGantt.DatePlanStart = PlanStat;
            newTaskGantt.DatePlanFinish = PlanFinish;
            newTaskGantt.KeyPointType = 0;
            newTaskGantt.startIsMilestone = false;
            newTaskGantt.endIsMilestone = false;
            newTaskGantt.Description = "";
            string sql = string.Format("SELECT MAX([Order]) FROM DesTaskGantt WHERE Path = '{0}' and DeleterEmpId=0", firsttask.Path);
            newTaskGantt.Order = TypeHelper.parseInt(DAL.DBExecute.ExecuteScalar(sql)) + 1;

            desTaskGanttDB.Add(newTaskGantt);
            desTaskGanttDB.UnitOfWork.SaveChanges();
            return newTaskGantt;

        }

        /// <summary>
        /// 更新 关键节点
        /// </summary>
        /// <param name="desTaskModel"></param>
        /// <param name="empSession"></param>
        /// <returns></returns>
        public DataModel.Models.DesTaskGantt UpdateDesTaskGantt(DesTaskInput desTaskModel, EmpSession empSession)
        {
            if (new DBSql.Sys.BaseMenu().GetModelByEng("ProjGanttList") == null)
            {
                return null;
            }
            var oldTaskModel = desTaskGanttDB.FirstOrDefault(x => x.TaskId == desTaskModel.Id && x.ProjId == desTaskModel.ProjId);
            if (null != oldTaskModel)
            {
                Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTaskGantt>(oldTaskModel, empSession);

                oldTaskModel.ManageEmpId = desTaskModel.TaskEmpID;

                oldTaskModel.DatePlanStart = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanStart, new DateTime(1900, 1, 1));
                oldTaskModel.DatePlanFinish = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanFinish, new DateTime(1900, 1, 1));

                oldTaskModel.Duration = Distance(oldTaskModel.DatePlanStart, oldTaskModel.DatePlanFinish);

                desTaskGanttDB.Edit(oldTaskModel);
                desTaskGanttDB.UnitOfWork.SaveChanges();
            }
            return oldTaskModel;

        }

        /// <summary>
        /// 删除关键节点
        /// </summary>
        /// <param name="desTaskModel"></param>
        /// <param name="empSession"></param>
        public void DeleteDesTaskGantt(long taskId, EmpSession empSession)
        {
            if (new DBSql.Sys.BaseMenu().GetModelByEng("ProjGanttList") != null)
            {
                return;
            }
            desTaskGanttDB.Edit(
                s => s.TaskId == taskId,
                x => new DataModel.Models.DesTaskGantt
                {
                    DeleterEmpId = empSession.EmpID,
                    DeleterEmpName = empSession.EmpName,
                    AgenDeleterEmpId = empSession.EmpID,
                    AgenDeleterEmpName = empSession.EmpName,
                    DeletionTime = DateTime.Now
                }
            );
            this.UnitOfWork.SaveChanges();
        }

        /// <summary>
        /// 更改 项目阶段 状态
        /// </summary>
        /// <param name="taskId"></param>
        /// <param name="status"></param>
        /// <param name="empSession"></param>
        public void ChangeTaskGroupStatus(long taskGroupId, TaskGroupStatus status, EmpSession empSession)
        {
            desTaskGroupDB.ChangeTaskGroupStatus(taskGroupId, status, empSession);
        }


        /**********************专业策划********************/

        /// <summary>
        /// 项目阶段专业大列表
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable GetSpecPlanList(Common.SqlPageInfo condition)
        {
            string RowColumn = @"
                p.Id ,
                g.ProjNumber ,
                g.ProjName ,
                ISNULL(g.Id, 0) AS TaskGroupId ,
                ISNULL(g.TaskGroupPhaseId, 0) AS ProjPhaseId ,
                ISNULL(g.TaskGroupStatus, 0) AS ProjPhaseStatus ,
                ISNULL(g.TaskGroupName, '') AS ProjPhaseName ,
                ISNULL(g.TaskGroupEmpName, '') AS ProjPhaseEmpName , -- 阶段负责人
                ISNULL(g.TaskFinishCount, 0) AS TaskFinishCount ,
                ISNULL(g.TaskTotalCount, 0) AS TaskTotalCount ,
                ISNULL(s.TaskSpecId, 0) AS ProjSpecId ,
                ISNULL(s.TaskName, '') AS ProjSpecName,
                ISNULL(s.TaskEmpName, '') AS ProjSpecEmpName,
                ISNULL(s.DatePlanStart, '1900-01-01') AS DatePlanStart,
                ISNULL(s.DatePlanFinish, '1900-01-01') AS DatePlanFinish
            ";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"
                SELECT  Count(1) 
                FROM    dbo.Project p
                        INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                                                        AND g.DeleterEmpId = 0
                                                        AND g.TaskGroupType = 1 -- 分组类型 0 开始 1 阶段 2 分组
                        INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                                                   AND s.DeleterEmpId = 0
                                                   AND s.TaskType = 1 -- 任务类型： 0 普通任务 1 专业任务
                WHERE   p.DeleterEmpId = 0 
            ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@TaskDept",SqlDbType.Int),
                new SqlParameter("@TaskEmpID",SqlDbType.Int),
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" AND (g.ProjNumber like '%'+@TextCondtion+'%' or g.ProjName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        //扩展查询列
                        case "OtherColumn":
                            if (de.Value.ToString() != "")
                            {
                                RowColumn += de.Value.ToString();
                            }
                            break;
                        case "TaskDept":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and (select count(pe.id) from DesTaskGroupEmps as pe LEFT JOIN dbo.BaseEmployee AS b ON pe.EmpID=b.empID WHERE pe.ProjId=p.id and  b.EmpDepID=@TaskDept) >0");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "TaskEmpID":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and (select count(pe.id) from DesTaskGroupEmps as pe where  pe.ProjId=p.id and  pe.EmpID=@TaskEmpID) >0 ");
                                paras[2].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = "  p.Id DESC, g.TaskGroupPath ASC, ISNULL(s.TaskSpecId, 0) DESC, s.TaskPath ASC ";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        /// <summary>
        /// 返回某任务分组的 专业策划 数据
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <param name="TaskSpecId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetSpecPlanData(long TaskGroupId, int TaskSpecId)
        {
            string sql = @"
                -- 获取 专业策划数据
                SELECT  t.Id ,
                        Case t.TaskLevel When 1 Then 0 Else t.TaskParentId End AS _parentId ,
                        t.TaskLevel ,
                        t.TaskOrderNum ,
                        t.TaskPath ,
                        t.TaskPathIds ,
                        t.TaskLevelType ,
                        CASE t.TaskLevelType
                          WHEN 0 THEN '无层级'
                          WHEN 1 THEN '层级子'
                          WHEN 2 THEN '层级父'
                        END TaskLevelTypeName ,
                        t.TaskType ,
                        t.ProjId ,
                        t.TaskParentId ,
                        t.TaskPhaseId ,
                        t.TaskGroupId ,
                        t.TaskSpecId ,
                        t.TaskNumber ,
                        t.TaskName ,
                        t.TaskPriority ,
                        CASE t.TaskPriority
                          WHEN 0 THEN '普通'
                          WHEN 1 THEN '重要'
                          WHEN 2 THEN '紧急'
                        END TaskPriorityName ,
                        t.TaskStatus ,
                        CASE t.TaskStatus
                          WHEN 0 THEN '未启动'
                          WHEN 1 THEN '已轮到'
                          WHEN 2 THEN '进行中'
                          WHEN 3 THEN '已完成'
                          WHEN 4 THEN '已停止'
                        END TaskStatusName ,
                        t.TaskEmpID ,
                        t.TaskEmpName ,
				        t.DatePlanStart,
				        t.DatePlanFinish,
                        t.FlowId ,
                        t.TaskFlowModel,
				        t.TaskNextFlowNodeId
                FROM    dbo.DesTask AS t
                        /*
                        INNER JOIN ( SELECT BaseName ,
                                            BaseID ,
                                            BaseOrder ,
                                            0 AS _Order
                                     FROM   dbo.BaseData
                                     WHERE  BaseOrder LIKE ( SELECT BaseOrder + '_%'
                                                             FROM   dbo.BaseData
                                                             WHERE  BaseNameEng = 'Special'
                                                           )
                                     UNION ALL
                                     SELECT '汇总' AS BaseName ,
                                            0 AS BaseID ,
                                            '' AS BaseOrder ,
                                            1 AS _Order
                                   ) AS a ON t.TaskSpecId = a.BaseID
                        */
                WHERE   t.DeleterEmpId = 0
                        AND t.AgenDeleterEmpId=0
                        AND t.TaskGroupId = @TaskGroupId20161012
				        AND (t.TaskSpecId = @TaskSpecId20161012 OR 0 = @TaskSpecId20161012)
                /*
                ORDER BY a._Order , a.BaseOrder,
                        t.TaskPath
                */
                ORDER BY CASE t.TaskSpecId WHEN 0 THEN 1 ELSE 0 END, t.TaskPath
            ";

            SqlParameter[] paras = {
                new SqlParameter("@TaskGroupId20161012",SqlDbType.BigInt),
                new SqlParameter("@TaskSpecId20161012",SqlDbType.Int)
            };
            paras[0].Value = TaskGroupId;
            paras[1].Value = TaskSpecId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var r = dt.AsEnumerable().Select(ba => new
            {
                Id = ba.Field<long>("Id"),
                _parentId = ba.Field<long>("_parentId"),
                iconCls = GetTaskStatusIconCls(ba.Field<int>("TaskStatus")),
                TaskLevel = ba.Field<int>("TaskLevel"),
                TaskOrderNum = ba.Field<int>("TaskOrderNum"),
                TaskPath = ba.Field<string>("TaskPath"),
                TaskPathIds = ba.Field<string>("TaskPathIds"),
                TaskLevelType = ba.Field<int>("TaskLevelType"),
                TaskLevelTypeName = ba.Field<string>("TaskLevelTypeName"),
                TaskType = ba.Field<int>("TaskType"),
                ProjId = ba.Field<int>("ProjId"),
                TaskParentId = ba.Field<long>("TaskParentId"),
                TaskGroupId = ba.Field<long>("TaskGroupId"),
                TaskSpecId = ba.Field<int>("TaskSpecId"),
                TaskNumber = ba.Field<string>("TaskNumber"),
                TaskName = ba.Field<string>("TaskName"),
                TaskPriority = ba.Field<int>("TaskPriority"),
                TaskPriorityName = ba.Field<string>("TaskPriorityName"),
                TaskStatus = ba.Field<int>("TaskStatus"),
                TaskStatusName = ba.Field<string>("TaskStatusName"),
                TaskEmpID = ba.Field<int>("TaskEmpID"),
                TaskEmpName = ba.Field<string>("TaskEmpName"),
                DatePlanStart = ba.Field<DateTime>("DatePlanStart"),
                DatePlanFinish = ba.Field<DateTime>("DatePlanFinish"),
                FlowId = ba.Field<int>("FlowId"),
                TaskFlowModel = ba.Field<string>("TaskFlowModel"),
                TaskFlowModelJson = Common.ModelConvert.Xml2Json(ba.Field<string>("TaskFlowModel")),
                TaskNextFlowNodeId = ba.Field<long>("TaskNextFlowNodeId"),

                TaskOldEmpId = ba.Field<int>("TaskEmpID"),
                OldFlowId = ba.Field<int>("FlowId")
            });

            return r;
        }

        /// <summary>
        /// 获取 某人所有专业策划 数据
        /// </summary>
        /// <param name="empID"></param>
        /// <param name="taskIDs"></param>
        /// <returns></returns>
        public DataTable GetSpecPlanData(int empID, string taskIDs)
        {
            if (string.IsNullOrEmpty(taskIDs))
            {
                return new DataTable();
            }
            string sql = @"
                SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1' ,
                        dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2' ,
                        s.TaskName AS 'ItemName' ,
                        s.TaskEmpName AS 'ItemEmpName' ,
                        s.TaskStatus AS 'ItemStatus' ,
                        s.DatePlanStart ,
                        s.DatePlanFinish ,
                        s.DateActualFinish ,
                        p.Id AS ProjId ,
                        g.Id AS TaskGroupId ,
                        s.TaskSpecId AS TaskSpecId ,
                        s.Id AS TaskId
                FROM    dbo.Project p
                        INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                        INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                WHERE   p.DeleterEmpId = 0
                        AND g.DeleterEmpId = 0
                        AND s.DeleterEmpId = 0
            ";
            //任务ID
            sql += " AND s.Id IN (" + taskIDs + ")";
            //专业策划
            sql += " AND s.TaskType = 1";
            //状态为进行中
            sql += "AND s.TaskStatus=" + DBSql.Design.FlowNodeStatus.进行中.ToString("D");
            //任务处理人
            sql += " AND s.TaskEmpID = " + empID;
            //配电工程
            sql += " AND (SELECT ProjTypeID FROM Project WHERE ID = p.ParentId)=" + (int)DataModel.ProjectType.配电类别;
            //专业为配电或者技经
            sql += " AND s.TaskSpecId IN (" + DataModel.ProjectSpecial.配电.ToString("D") + "," + DataModel.ProjectSpecial.配电自动化.ToString("D") + "," + DataModel.ProjectSpecial.技经.ToString("D") + ")";
            return DAL.DBExecute.ExecuteDataTable(sql);
        }

        /// <summary>
        /// 保存专业策划数据
        /// </summary>
        /// <param name="taskGroupId">对应分组Id</param>
        /// <param name="specPlanData">项目策划数据</param>
        /// <param name="empSession">当前登录用户</param>
        /// <returns></returns>
        public void SaveSpecPlanData(long taskGroupId, List<DesTaskInput> specPlanData, EmpSession empSession)
        {
            var group = desTaskGroupDB.FirstOrDefault(x => x.Id == taskGroupId && x.DeleterEmpId == 0);
            if (group == null)
            {
                throw new Exception(String.Format("当前指定的阶段或任务分组＂{0}＂不存在或已删除，无法保存。", taskGroupId));
            }
            if (!(group.TaskGroupStatus == (int)TaskGroupStatus.已安排 ||
                group.TaskGroupStatus == (int)TaskGroupStatus.进行中))
            {
                throw new Exception(String.Format("当前指定的阶段或任务分组为＂{0}＂状态，无法保存。", ((TaskGroupStatus)group.TaskGroupStatus).ToString()));
            }

            // 获取本次要配置的专业ID
            var intSpecTaskIds = specPlanData.Where(x => x.TaskType == (int)TaskType.专业任务).Select(x => x.Id);
            foreach (var specTaskId in intSpecTaskIds)
            {
                var spectask = this.FirstOrDefault(x => x.Id == specTaskId && x.DeleterEmpId == 0);
                if (spectask == null)
                {
                    throw new Exception(String.Format("当前指定的专业＂{0}＂不存在或已删除，无法保存。", specTaskId));
                }
            }

            // 用于缓存临时ID与真实ID
            List<DesTaskOldNewId> taskOldNewIdList = new List<DesTaskOldNewId>();

            // 新增或更新专业内任务
            foreach (var specTaskId in intSpecTaskIds)
            {
                int nodeCount = SaveSpecPlanDataMap(taskOldNewIdList, specPlanData, empSession, specTaskId, specTaskId);

                if (nodeCount > 0)
                {
                    // 专业策划保存后 专业节点 任务状态变为 已完成
                    ChangeTaskStatus(specTaskId, TaskStatus.已完成, empSession);

                    // 写入 系统业务日志
                    var groupPath = desTaskGroupDB.GetTaskGroupTextPath(group.Id);
                    var spectask = specPlanData.FirstOrDefault(x => x.Id == specTaskId);
                    var specTasks = specPlanData.Where(x => x.TaskSpecId == spectask.TaskSpecId && x.TaskType == (int)TaskType.普通任务 && x.Id < 0);
                    var specTaskNames = String.Join("、", specTasks.Select(x => x.TaskName).ToArray());
                    string logRefHTML = String.Format("{0} 由 {1} 新安排了 {2} 个任务：{3}", groupPath, empSession.EmpName, specTasks.Count(), specTaskNames);
                    DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
                    log.BaseLogRefTable = "DesTaskGroup";
                    log.BaseLogRefID = (int)group.Id;
                    log.BaseLogRefHTML = logRefHTML;
                    log.BaseLogEmpID = empSession.EmpID;
                    log.EmpName = empSession.EmpName;
                    log.BaseLogIP = empSession.LoginIP;
                    log.BaseLogDate = DateTime.Now;
                    log.BaseLogTypeID = 10;
                    __log.Add(log);
                    __log.UnitOfWork.SaveChanges();

                    // 写入 项目动态
                    ProjectDynamicDB.AddDynamic(group.ProjId, "DesTaskGroup", (int)group.Id, logRefHTML, empSession);

                }
            }

            // 更新任务的关联ID
            foreach (DesTaskOldNewId onid in taskOldNewIdList)
            {
                UpdateTaskNextFlowNodeId(taskGroupId, onid);
            }

            // 更新任务总数
            ChangeTaskGroupTotalCount(taskGroupId);

            // 生成项目组成员列表
            desTaskGroupDB.SetTaskGroupEmps(group.ProjId, group.TaskGroupPhaseId, group.Id);
        }

        /// <summary>
        /// 遍历插入或更新任务节点信息
        /// </summary>
        /// <param name="parentId"></param>
        public int SaveSpecPlanDataMap(List<DesTaskOldNewId> taskOldNewIdList, List<DesTaskInput> specPlanData, EmpSession empSession, long tempParentId, long successParentId)
        {
            int thisNodeCount = 0;
            var mapTasks = specPlanData.Where(x => x.TaskParentId == tempParentId).OrderBy(x => x.TaskPath);
            foreach (var mapTask in mapTasks)
            {
                thisNodeCount++;
                long tempId = mapTask.Id;
                DataModel.Models.DesTask successTask = null;
                if (tempId < 1)
                {
                    // 创建任务节点
                    mapTask.TaskParentId = successParentId;
                    successTask = InsertTaskNode(mapTask, empSession);
                }
                else
                {
                    // 更新任务节点
                    successTask = UpdateTaskNode(mapTask, empSession);
                }

                // 缓存临时ID与真实ID
                taskOldNewIdList.Add(new DesTaskOldNewId
                {
                    OldId = tempId,
                    NewId = successTask.Id
                });

                int nextNodeCount = SaveSpecPlanDataMap(taskOldNewIdList, specPlanData, empSession, tempId, successTask.Id);
                thisNodeCount += nextNodeCount;
            }

            return thisNodeCount;
        }

        /// <summary>
        /// 更新任务关联ID为真实ID
        /// </summary>
        /// <param name="projID"></param>
        /// <param name="onid"></param>
        private void UpdateTaskNextFlowNodeId(long taskGroupId, DesTaskOldNewId onid)
        {
            if (onid.OldId < 0)
            {
                this.Edit(x =>
                    x.TaskGroupId == taskGroupId &&
                    x.TaskType == (int)TaskType.普通任务 &&
                    x.TaskNextFlowNodeId == onid.OldId,
                    x => new DataModel.Models.DesTask
                    {
                        TaskNextFlowNodeId = onid.NewId
                    }
                );

                this.UnitOfWork.SaveChanges();
            }
        }

        /// <summary>
        /// 插入任务节点
        /// </summary>
        /// <param name="desTaskModel">任务提交数据</param>
        /// <param name="empSession">当前用户</param>
        public DataModel.Models.DesTask InsertTaskNode(DesTaskInput desTaskModel, EmpSession empSession)
        {
            var prtTaskModel = this.Get(desTaskModel.TaskParentId);
            var newTaskModel = new DataModel.Models.DesTask();
            Common.ModelConvert.ConvertToDefault<DataModel.Models.DesTask>(newTaskModel);
            Common.ModelConvert.MvcDefaultSave<DataModel.Models.DesTask>(newTaskModel, empSession);
            newTaskModel.TaskParentId = desTaskModel.TaskParentId;
            newTaskModel.ProjId = prtTaskModel.ProjId;
            newTaskModel.TaskPhaseId = prtTaskModel.TaskPhaseId;
            newTaskModel.TaskGroupId = prtTaskModel.TaskGroupId;
            newTaskModel.TaskSpecId = prtTaskModel.TaskSpecId;
            newTaskModel.TaskLevel = prtTaskModel.TaskLevel + 1;
            newTaskModel.TaskOrderNum = this.GetQuery(x =>
                    x.TaskGroupId == newTaskModel.TaskGroupId
                    && x.TaskParentId == newTaskModel.TaskParentId
                //&& x.DeleterEmpId == 0
                ).Count() + 1;
            newTaskModel.TaskPath = prtTaskModel.TaskPath + "_" + newTaskModel.TaskOrderNum.ToString("0000");
            newTaskModel.TaskPathIds = String.IsNullOrWhiteSpace(prtTaskModel.TaskPathIds) ? prtTaskModel.Id.ToString() : prtTaskModel.TaskPathIds + "," + prtTaskModel.Id.ToString(); ;

            newTaskModel.TaskNumber = JQ.Util.StringUtil.ReplaceStr(desTaskModel.TaskNumber);
            newTaskModel.TaskName = JQ.Util.StringUtil.ReplaceStr(desTaskModel.TaskName);
            newTaskModel.TaskEmpID = desTaskModel.TaskEmpID;
            newTaskModel.TaskEmpName = desTaskModel.TaskEmpName;
            newTaskModel.TaskJoinEmpIds = "";
            newTaskModel.DatePlanStart = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanStart, new DateTime(1900, 1, 1));
            newTaskModel.DatePlanFinish = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanFinish, new DateTime(1900, 1, 1));
            newTaskModel.TaskNote = desTaskModel.TaskNote;
            newTaskModel.TaskPriority = (int)TaskPriority.普通;
            if (newTaskModel.TaskLevelType < 0)
            {
                // 值为 -1 时，本方法自动判断层级类型
                if (prtTaskModel.TaskType == (int)TaskType.专业任务)
                {
                    // 如果是建立在专业节点下面的，那么他就是 无层级 的
                    newTaskModel.TaskLevelType = (int)TaskLevelType.无层级;
                }
                else
                {
                    // 如果是建立在其他任务节点下面，那么他就是 层级子 的
                    newTaskModel.TaskLevelType = (int)TaskLevelType.层级子;
                    // 并且父节点要变为 层级父 的
                    prtTaskModel.TaskLevelType = (int)TaskLevelType.层级父;
                }
            }
            else
            {
                // 由前端设置好
                newTaskModel.TaskLevelType = desTaskModel.TaskLevelType;
            }
            newTaskModel.FlowId = desTaskModel.FlowId; // 由前端根据TaskLevelType自动列出可用流程（默认选中第一项）

            if (desTaskModel.SheJi == 0)
            {
                // 项目负责人 或 专业负责人 单独策划时
                if (String.IsNullOrWhiteSpace(desTaskModel.TaskFlowModelJson))
                {
                    newTaskModel.TaskFlowModel = this.GetFlowNodeXML(newTaskModel.FlowId); // 保存新的流程模板信息
                }
                else
                {
                    newTaskModel.TaskFlowModel = Common.ModelConvert.JsonList2XmlA<DesFlowNodeXmlInput>(desTaskModel.TaskFlowModelJson);// 前端选择流程人员，这里直接把设定结果保存到任务，作为文件流程的模板
                }
            }
            else
            {
                // 设计人员 批量策划时
                newTaskModel.TaskFlowModel = desTaskModel.TaskFlowModel;
            }

            newTaskModel.TaskNextFlowNodeId = desTaskModel.TaskNextFlowNodeId;

            newTaskModel.TaskStatus = newTaskModel.TaskEmpID > 0 ?
                                        (desTaskModel.TaskSpecId == 0 || desTaskModel.TaskLevelType == (int)TaskLevelType.层级父 ?
                                                (int)TaskStatus.已安排 :
                                                (int)TaskStatus.进行中
                                        ) :
                                        (int)TaskStatus.未启动;
            newTaskModel.TaskType = (int)TaskType.普通任务;

            this.Add(newTaskModel);
            this.Edit(prtTaskModel);
            this.UnitOfWork.SaveChanges();

            // 通知 任务负责人 刷新待办任务数
            _Public.SendNotify("ChangeTodoTaskAmount", newTaskModel.TaskEmpID);

            return newTaskModel;
        }

        /// <summary>
        /// 更新任务节点
        /// </summary>
        /// <param name="desTaskModel"></param>
        /// <param name="empSession"></param>
        public DataModel.Models.DesTask UpdateTaskNode(DesTaskInput desTaskModel, EmpSession empSession)
        {
            var oldTaskModel = this.Get(desTaskModel.Id);

            if (String.IsNullOrWhiteSpace(desTaskModel.TaskFlowModelJson))
            {
                // 阶段汇总设置人员，指定汇总任务关联某专业任务时，需要修改那个任务的父任务id，假设汇总人员没有那个专业的配置权，
                // 这时问题就来了，由于没有权限界面上设定好的专业内容任务的父Id无法保存，为了解决这个问题，当汇总人员提交专业策划保存时，
                // 会把所以专业的数据都带过来，但是汇总人员没权限设置的专业里的任务的TaskFlowModelJson属性我都会赋值为空，以示区别。
                // 这类任务只保持父任务Id，其他任务信息都不修改。
                oldTaskModel.TaskNextFlowNodeId = desTaskModel.TaskNextFlowNodeId;
            }
            else
            {
                // 当有任务信息修改权时
                Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTask>(oldTaskModel, empSession);
                oldTaskModel.TaskNumber = JQ.Util.StringUtil.ReplaceStr(desTaskModel.TaskNumber);
                oldTaskModel.TaskName = JQ.Util.StringUtil.ReplaceStr(desTaskModel.TaskName);
                oldTaskModel.TaskEmpID = desTaskModel.TaskEmpID;
                oldTaskModel.TaskEmpName = desTaskModel.TaskEmpName;
                oldTaskModel.TaskJoinEmpIds = "";
                oldTaskModel.DatePlanStart = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanStart, new DateTime(1900, 1, 1));
                oldTaskModel.DatePlanFinish = JQ.Util.TypeHelper.parseDateTime(desTaskModel.DatePlanFinish, new DateTime(1900, 1, 1));
                oldTaskModel.TaskNote = desTaskModel.TaskNote;
                oldTaskModel.TaskPriority = (int)TaskPriority.普通;
                oldTaskModel.TaskLevelType = desTaskModel.TaskLevelType; // 由前端设置好
                oldTaskModel.FlowId = desTaskModel.FlowId; // 由于任务中指定的是流程模板，所以可以随时更换模板
                oldTaskModel.TaskFlowModel = Common.ModelConvert.JsonList2XmlA<DesFlowNodeXmlInput>(desTaskModel.TaskFlowModelJson);// 前端选择流程人员，这里直接把设定结果保存到任务，作为文件流程的模板
                oldTaskModel.TaskNextFlowNodeId = desTaskModel.TaskNextFlowNodeId;

                // 设计人员变更 或 流程变更，任务重置为 进行中
                oldTaskModel.TaskStatus = (desTaskModel.TaskEmpID != desTaskModel.TaskOldEmpId || desTaskModel.FlowId != desTaskModel.OldFlowId ?
                                                (desTaskModel.TaskSpecId == 0 || desTaskModel.TaskLevelType == (int)TaskLevelType.层级父 ?
                                                    (int)TaskStatus.已安排 :
                                                    (int)TaskStatus.进行中
                                                ) :
                                                oldTaskModel.TaskStatus); // 换专业负责人的话，重新设置为轮到
            }

            this.Edit(oldTaskModel);
            this.UnitOfWork.SaveChanges();

            // 通知 任务负责人 刷新待办任务数
            _Public.SendNotify("ChangeTodoTaskAmount", oldTaskModel.TaskEmpID);

            return oldTaskModel;
        }

        /// <summary>
        /// 删除任务节点
        /// </summary>
        /// <param name="TaskId"></param>
        /// <param name="empSession"></param>
        public void DelTaskNode(long TaskId, EmpSession empSession)
        {
            var task = this.Get(TaskId);
            var taskPath = this.GetTaskTextPath(TaskId); // 必须在任务删除前获取其路径

            // 删除关联任务信息
            this.Edit(
                s => s.TaskNextFlowNodeId == TaskId,
                x => new DataModel.Models.DesTask
                {
                    TaskNextFlowNodeId = 0
                }
            );

            // 删除当前任务
            this.Edit(
                s => s.Id == TaskId
                    || ("," + s.TaskPathIds + ",").IndexOf("," + TaskId.ToString() + ",") > -1,
                x => new DataModel.Models.DesTask
                {
                    DeleterEmpId = empSession.EmpID,
                    DeleterEmpName = empSession.EmpName,
                    AgenDeleterEmpId = empSession.EmpID,
                    AgenDeleterEmpName = empSession.EmpName,
                    DeletionTime = DateTime.Now
                }
            );

            // 删除关键节点
            if (task.TaskType == (int)TaskType.专业任务)
            {
                DeleteDesTaskGantt(TaskId, empSession);
            }

            // 写入 系统业务日志
            string logRefHTML = String.Format("{0} 被 {1} 删除了", taskPath, empSession.EmpName);
            DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
            log.BaseLogRefTable = "DesTaskGroup";
            log.BaseLogRefID = (int)task.TaskGroupId;
            log.BaseLogRefHTML = logRefHTML;
            log.BaseLogEmpID = empSession.EmpID;
            log.EmpName = empSession.EmpName;
            log.BaseLogIP = empSession.LoginIP;
            log.BaseLogDate = DateTime.Now;
            log.BaseLogTypeID = 10;
            __log.Add(log);
            __log.UnitOfWork.SaveChanges();

            // 写入 项目动态
            ProjectDynamicDB.AddDynamic(task.ProjId, "DesTaskGroup", (int)task.TaskGroupId, logRefHTML, empSession);


            // 任务删除后，更新 总任务数 和 已完任务数
            var model = this.Get(TaskId);
            ChangeTaskGroupTotalCount(model.TaskGroupId, false);
            ChangeTaskGroupFinishCount(model.TaskGroupId, true);
        }


        /**********************任务处理********************/

        /// <summary>
        /// 获取 任务 详情
        /// </summary>
        /// <param name="taskId"></param>
        /// <returns></returns>
        public DesTaskInput GetDesTaskInfo(long taskId)
        {
            DataModel.Models.DesTask taskInfo = this.Get(taskId);
            DesTaskInput taskInput = new DesTaskInput();
            Common.ModelConvert.MvcChangeTarget<DesTaskInput, DataModel.Models.DesTask>(taskInput, taskInfo);
            taskInput.TaskFlowModelJson = Common.ModelConvert.Xml2Json(taskInput.TaskFlowModel);
            return taskInput;
        }

        /// <summary>
        /// 获取 前置任务 列表
        /// </summary>
        /// <param name="TaskId"></param>
        /// <returns></returns>
        public DataTable GetPreTaskListJson(long TaskId)
        {
            string sql = @"
                SELECT  t.Id ,
                        t.TaskName ,
                        t.TaskEmpID ,
                        t.TaskEmpName ,
                        t.TaskStatus,
		                (
			                SELECT  COUNT(1)
		                    FROM    BaseAttach AS ba
				                    INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
		                    WHERE   ba.AttachRefTable = 'DesTaskAttach'
				                    AND ba.AttachRefID = t.Id
				                    -- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
					                AND ta.AttachFlowNode.exist('(/root/item[(【ItemStatus2】)])') = 1
		                ) AS NeedApproveCount
                FROM dbo.DesTask AS t
                WHERE   t.TaskNextFlowNodeId = @TaskId
                        AND t.DeleterEmpId = 0
            ";

            sql = sql.Replace("【ItemStatus2】", @"@FlowNodeStatus=sql:variable(""@NodeStatusWaiting"") or @FlowNodeStatus=sql:variable(""@NodeStatusNow"")");

            SqlParameter[] paras = {
                new SqlParameter("@TaskId",SqlDbType.BigInt),
                new SqlParameter("@NodeStatusWaiting",SqlDbType.Int),
                new SqlParameter("@NodeStatusNow",SqlDbType.Int)
            };

            paras[0].Value = TaskId;
            paras[1].Value = (int)FlowNodeStatus.已安排;
            paras[2].Value = (int)FlowNodeStatus.进行中;

            return DBExecute.ExecuteDataTable(sql, paras);
        }

        /// <summary>
        /// 获取 任务设计附件 列表
        /// </summary>
        /// <param name="TaskId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetDesTaskAttachData(long TaskId)
        {
            string sql = @"
                -- 获取 所有设计上传附件
                SELECT  ba.AttachID ,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName ,
                        ba.AttachExt ,
                        ba.AttachOrderPath ,
                        ba.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        ba.AttachVer ,
                        ba.AttachTag ,
                        ba.AttachGrade ,
                        ISNULL(dbo.F_GetBaseAttachPathText(ba.AttachID, '\\'), '') AS AttachPath ,
                        ta.AttachFlowNode
                FROM    BaseAttach AS ba
                        LEFT JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @TaskID
                ORDER BY ba.AttachExt, ba.AttachName
            ";

            SqlParameter[] paras = {
                new SqlParameter("@TaskID",SqlDbType.BigInt)
            };
            paras[0].Value = TaskId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var r = dt.AsEnumerable().Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
                AttachPath = ba.Field<string>("AttachPath"),
                AttachFlowNodeJson = Common.ModelConvert.Xml2Json(ba.Field<string>("AttachFlowNode"))
            });

            return r;
        }

        /// <summary>
        /// 获取 任务待校审附件 列表
        /// </summary>
        /// <param name="TaskId"></param>
        /// <param name="SelIds"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetDesTaskAttachSelData(long TaskId, string SelIds)
        {
            string sql = @"
                -- 获取 待校审附件
                SELECT  ba.AttachID ,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName ,
                        ba.AttachExt ,
                        ba.AttachOrderPath ,
                        ba.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        ba.AttachVer ,
                        ba.AttachTag ,
                        ba.AttachGrade ,
                        ISNULL(dbo.F_GetBaseAttachPathText(ba.AttachID, '\\'), '') AS AttachPath ,
                        ta.AttachFlowNode
                INTO    #approveAttach
                FROM    BaseAttach AS ba
                        LEFT JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @TaskID
				        -- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
                        AND ba.AttachId IN (SELECT ID FROM dbo.split(@SelIds, ','))
                        AND ba.AttachExt <> '.'

                -- 取得待校审附件的父节点信息（即文件夹）
                DECLARE @approveAttachPathIds VARCHAR(MAX)
                SET @approveAttachPathIds = (SELECT    AttachPathIDs + ','
                                                FROM      #approveAttach
                                                WHERE     AttachPathIDs <> ''
                                            FOR
                                                XML PATH('')
                                            )

                SELECT a.*
                FROM(
                    SELECT    
                        ba.AttachID,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName,
                        ba.AttachExt,
                        ba.AttachOrderPath,
                        ba.AttachPathIDs,
                        ba.AttachSize,
                        ba.AttachDateUpload,
                        ba.AttachDateChange,
                        ba.AttachEmpID,
                        ba.AttachEmpName,
                        ba.AttachVer,
                        ba.AttachTag,
                        ba.AttachGrade,
                        '' AS AttachPath,
                        '' AS AttachFlowNode
                    FROM      BaseAttach AS ba
                    WHERE     ba.AttachID IN(
                            SELECT  ID
                            FROM    dbo.Split(@approveAttachPathIds, ','))

                    UNION ALL

                    SELECT    ba.AttachID,
                            ba._parentId,
                            ba.AttachName,
                            ba.AttachExt,
                            ba.AttachOrderPath,
                            ba.AttachPathIDs,
                            ba.AttachSize,
                            ba.AttachDateUpload,
                            ba.AttachDateChange,
                            ba.AttachEmpID,
                            ba.AttachEmpName,
                            ba.AttachVer,
                            ba.AttachTag,
                            ba.AttachGrade,
                            ba.AttachPath,
                            ba.AttachFlowNode

                    FROM      #approveAttach AS ba
                ) AS a
                ORDER BY a.AttachExt, a.AttachName

                IF OBJECT_ID('tempdb..#approveAttach') IS NOT NULL
                    BEGIN
                        DROP TABLE #approveAttach
                    END
                --END IF
            ";

            SqlParameter[] paras = {
                new SqlParameter("@TaskID",SqlDbType.BigInt),
                new SqlParameter("@SelIds",SqlDbType.VarChar)
            };
            paras[0].Value = TaskId;
            paras[1].Value = SelIds;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var r = dt.AsEnumerable().Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
                AttachPath = ba.Field<string>("AttachPath"),
                AttachFlowNodeJson = Common.ModelConvert.Xml2Json(ba.Field<string>("AttachFlowNode"))
            });

            return r;
        }

        /// <summary>
        /// 获取 任务中只显示当前自己需要审批的附件 列表
        /// </summary>
        /// <param name="TaskId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetDesTaskApproveNowAttachData(long TaskId, int SessionEmpId)
        {
            string sql = @"
                -- 获取 只显示自己需要审批的附件
                SELECT  ba.AttachID ,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName ,
                        ba.AttachExt ,
                        ba.AttachOrderPath ,
                        ba.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        ba.AttachVer ,
                        ba.AttachTag ,
                        ba.AttachGrade ,
                        ISNULL(dbo.F_GetBaseAttachPathText(ba.AttachID, '\\'), '') AS AttachPath ,
                        ta.AttachFlowNode
                INTO    #approveAttach
                FROM    BaseAttach AS ba
                        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @TaskID
				        -- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
                        -- 只要节点中有 已安排 或 已轮到 我的就显示
                        AND ta.AttachFlowNode.exist('(/root/item[@FlowNodeEmpID=sql:variable(""@SessionEmpId"") and (@FlowNodeStatus=""1"" or @FlowNodeStatus=""2"")])') = 1

                -- 取得待校审附件的父节点信息（即文件夹）
                DECLARE @approveAttachPathIds VARCHAR(MAX)
                SET @approveAttachPathIds = (SELECT    AttachPathIDs + ','
                                                FROM      #approveAttach
                                                WHERE     AttachPathIDs <> ''
                                            FOR
                                                XML PATH('')
                                            )

                SELECT a.*
                FROM(SELECT    ba.AttachID,
                                    ba.AttachParentID AS _parentId,
                                    ba.AttachName,
                                    ba.AttachExt,
                                    ba.AttachOrderPath,
                                    ba.AttachPathIDs,
                                    ba.AttachSize,
                                    ba.AttachDateUpload,
                                    ba.AttachDateChange,
                                    ba.AttachEmpID,
                                    ba.AttachEmpName,
                                    ba.AttachVer,
                                    ba.AttachTag,
                                    ba.AttachGrade,
                                    '' AS AttachPath,
                                    '' AS AttachFlowNode

                            FROM      BaseAttach AS ba

                            WHERE     ba.AttachID IN(
                                    SELECT  ID

                                    FROM    dbo.Split(@approveAttachPathIds, ','))

                            UNION ALL

                            SELECT    ba.AttachID,
                                    ba._parentId,
                                    ba.AttachName,
                                    ba.AttachExt,
                                    ba.AttachOrderPath,
                                    ba.AttachPathIDs,
                                    ba.AttachSize,
                                    ba.AttachDateUpload,
                                    ba.AttachDateChange,
                                    ba.AttachEmpID,
                                    ba.AttachEmpName,
                                    ba.AttachVer,
                                    ba.AttachTag,
                                    ba.AttachGrade,
                                    ba.AttachPath,
                                    ba.AttachFlowNode

                            FROM      #approveAttach AS ba
                        ) AS a
                ORDER BY a.AttachExt, a.AttachName

                IF OBJECT_ID('tempdb..#approveAttach') IS NOT NULL
                    BEGIN
                        DROP TABLE #approveAttach
                    END
                --END IF
            ";

            SqlParameter[] paras = {
                new SqlParameter("@TaskID",SqlDbType.BigInt),
                new SqlParameter("@SessionEmpId",SqlDbType.Int)
            };
            paras[0].Value = TaskId;
            paras[1].Value = SessionEmpId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var r = dt.AsEnumerable().Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
                AttachPath = ba.Field<string>("AttachPath"),
                AttachFlowNodeJson = Common.ModelConvert.Xml2Json(ba.Field<string>("AttachFlowNode"))
            });

            return r;
        }

        /// <summary>
        /// 获取 任务中只显示所有自己需要审批的附件 列表（包括已审批过的）
        /// </summary>
        /// <param name="TaskId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetDesTaskApproveAllAttachData(long TaskId, int SessionEmpId)
        {
            string sql = @"
                -- 获取 自己需要审批的附件
                SELECT  ba.AttachID ,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName ,
                        ba.AttachExt ,
                        ba.AttachOrderPath ,
                        ba.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        ba.AttachVer ,
                        ba.AttachTag ,
                        ba.AttachGrade ,
                        ISNULL(dbo.F_GetBaseAttachPathText(ba.AttachID, '\\'), '') AS AttachPath ,
                        ta.AttachFlowNode
                INTO    #approveAttach
                FROM    BaseAttach AS ba
                        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @TaskID
				        -- 【错误条件】含汇总节点的 AND ta.AttachFlowNode.exist('(/root/item[@FlowNodeTypeID=""0""])') = 1
                        -- 初设计节点外，其他节点只要包含审核人是我的都显示
                        AND ta.AttachFlowNode.exist('(/root/item[@FlowNodeTypeID != sql:variable(""@NodeTypeDesign"") and @FlowNodeEmpID=sql:variable(""@SessionEmpId"")])') = 1


                -- 取得待校审附件的父节点信息（即文件夹）
                DECLARE @approveAttachPathIds VARCHAR(MAX)
                SET @approveAttachPathIds = (SELECT    AttachPathIDs + ','
                                                FROM      #approveAttach
                                                WHERE     AttachPathIDs <> ''
                                            FOR
                                                XML PATH('')
                                            )

                SELECT a.*
                FROM(SELECT    ba.AttachID,
                                    ba.AttachParentID AS _parentId,
                                    ba.AttachName,
                                    ba.AttachExt,
                                    ba.AttachOrderPath,
                                    ba.AttachPathIDs,
                                    ba.AttachSize,
                                    ba.AttachDateUpload,
                                    ba.AttachDateChange,
                                    ba.AttachEmpID,
                                    ba.AttachEmpName,
                                    ba.AttachVer,
                                    ba.AttachTag,
                                    ba.AttachGrade,
                                    '' AS AttachPath,
                                    '' AS AttachFlowNode

                            FROM      BaseAttach AS ba

                            WHERE     ba.AttachID IN(
                                    SELECT  ID

                                    FROM    dbo.Split(@approveAttachPathIds, ','))

                            UNION ALL

                            SELECT    ba.AttachID,
                                    ba._parentId,
                                    ba.AttachName,
                                    ba.AttachExt,
                                    ba.AttachOrderPath,
                                    ba.AttachPathIDs,
                                    ba.AttachSize,
                                    ba.AttachDateUpload,
                                    ba.AttachDateChange,
                                    ba.AttachEmpID,
                                    ba.AttachEmpName,
                                    ba.AttachVer,
                                    ba.AttachTag,
                                    ba.AttachGrade,
                                    ba.AttachPath,
                                    ba.AttachFlowNode

                            FROM      #approveAttach AS ba
                        ) AS a
                ORDER BY a.AttachExt, a.AttachName

                IF OBJECT_ID('tempdb..#approveAttach') IS NOT NULL
                    BEGIN
                        DROP TABLE #approveAttach
                    END
                --END IF
            ";

            SqlParameter[] paras = {
                new SqlParameter("@TaskID",SqlDbType.BigInt),
                new SqlParameter("@SessionEmpId",SqlDbType.Int),
                new SqlParameter("@NodeTypeDesign", SqlDbType.Int)
            };
            paras[0].Value = TaskId;
            paras[1].Value = SessionEmpId;
            paras[2].Value = (int)DataModel.NodeType.设计;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var r = dt.AsEnumerable().Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
                AttachPath = ba.Field<string>("AttachPath"),
                AttachFlowNodeJson = Common.ModelConvert.Xml2Json(ba.Field<string>("AttachFlowNode"))
            });

            return r;
        }

        /// <summary>
        /// 获取 任务所有已完附件 列表
        /// </summary>
        /// <param name="TaskId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetDesTaskFinishAttachData(long TaskId)
        {
            DataTable dt = GetTaskArchAttach(TaskId);

            var r = dt.AsEnumerable().Where(p => p.Field<string>("AttachExt") == ".dwg").Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
                AttachPath = ba.Field<string>("AttachPath"),
                AttachFlowNodeJson = Common.ModelConvert.Xml2Json(ba.Field<string>("AttachFlowNode"))
            });

            return r;
        }

        /// <summary>
        /// 保存 任务提交校审 数据
        /// </summary>
        /// <param name="TaskId">当前任务Id</param>
        /// <param name="AttachIds">要提交的附件Ids</param>
        /// <param name="empSession"></param>
        public void SavePostApprove(long TaskId, string AttachIds, EmpSession empSession)
        {
            // 设置 任务为 进行中
            ChangeTaskStatus(TaskId, DBSql.Design.TaskStatus.进行中, empSession);

            // 提交文件进行校审，生成文件校审流程
            string sql = @"
                
                -- 定义一些变量 （追加流转记录用）
                DECLARE @ToEmpIDs NVARCHAR(511), @ToEmpNames NVARCHAR(511),@NodeTypeIds NVARCHAR(511), @DesTaskAttachExIds NVARCHAR(511), @CurrentTime NVARCHAR(20)
                SET @ToEmpIDs = ''
                SET @ToEmpNames = ''
                SET @NodeTypeIds = ''
                SET @DesTaskAttachExIds = ''
                SET @CurrentTime = CONVERT(NVARCHAR(20), GETDATE(),20)

                -- 第一步取任务流程模板

                DECLARE @XmlTaskFlowModel XML, @FlowId INT, @TaskNextFlowNodeId BIGINT 
                DECLARE @ItemPath1 VARCHAR(8000), @ItemPath2 VARCHAR(8000), @TaskGroupStatus INT
                DECLARE @ProjId INT, @PhaseId INT, @SpecialtyId INT, @TaskGroupId INT

                SELECT  @ItemPath1 = dbo.F_GetDesTaskGroupPathJson(g.Id),
				        @ItemPath2 = dbo.F_GetDesTaskPathJson(s.Id),
                        @XmlTaskFlowModel = s.TaskFlowModel,
                        @FlowId = s.FlowId, 
                        @TaskNextFlowNodeId = s.TaskNextFlowNodeId, 
                        @TaskGroupStatus = g.TaskGroupStatus,

                        @ProjId = s.ProjId,
                        @PhaseId = g.TaskGroupPhaseId,
                        @SpecialtyId = s.TaskSpecId,
                        @TaskGroupId = g.Id

                FROM    dbo.DesTaskGroup g INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id 
                WHERE   s.Id = @TaskId

                IF (@TaskGroupStatus <> @NextFlowNodeStatus)
                    BEGIN
                        -- 如果阶段或任务分组非进行中，则无法提交校审操作
                        RAISERROR ('60001', 16, 1)
                        RETURN
                    END
                -- END IF

                -- 缓存当前任务的路径，可用于通知、消息、日志
		        CREATE TABLE #NotifApprove
		        (
			        [Text1] [varchar] (8000) DEFAULT (''), 
			        [Text2] [varchar] (8000) DEFAULT ('')
		        )
                INSERT INTO #NotifApprove ( [Text1], [Text2] )
				VALUES  ( @ItemPath1, @ItemPath2 )

                -- SELECT @XmlTaskFlowModel, @TaskNextFlowNodeId

                -- 第二步（可选）追加汇总节点

                IF (@TaskNextFlowNodeId > 0)
			        BEGIN
				        IF (@XmlTaskFlowModel.exist('(/root/item[@FlowNodeTypeID=""0""])') = 0) 
                            BEGIN
						        DECLARE @NodeID INT, @SumFirstXML XML
						        SELECT @NodeID = [ID], @SumFirstXML = [FlowNodeXML] FROM dbo.[F_GetDesFlowNodeFirstXML2](@FlowId, @TaskNextFlowNodeId)
			
						        SET @XmlTaskFlowModel.modify('replace value of (/root/item[last()]/@FlowNodeNextID)[1] with sql:variable(""@NodeID"")')

                                SET @XmlTaskFlowModel.modify('
                                    insert sql:variable(""@SumFirstXML"")
                                    as last
                                    into (/root)[1]
                                ')
                            END
                        --END IF
                    END
                --END IF


                -- 第三步 设计节点 设置为 完成 下一节点为 轮到           节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）

                -- 当前节点状态设置为完成
                DECLARE @pNowName NVARCHAR(200)
                SET @pNowName = @XmlTaskFlowModel.value('(/root/item[@FlowNodeTypeID=sql:variable(""@NowFlowNodeType"")]/@FlowNodeName)[1]', 'NVARCHAR(255)')
                SET @XmlTaskFlowModel.modify('replace value of (/root/item[@FlowNodeTypeID=sql:variable(""@NowFlowNodeType"")]/@FlowNodeStatus)[1] with sql:variable(""@NowFlowNodeStatus"")')

                -- 当前节点设置完成时间
                SET @XmlTaskFlowModel.modify('insert (if(empty(root/item[@FlowNodeTypeID=sql:variable(""@NowFlowNodeType"")]/@FlowNodeFinishTime)) then attribute FlowNodeFinishTime {""""} else null) into (root/item[@FlowNodeTypeID=sql:variable(""@NowFlowNodeType"")])[1]')
                SET @XmlTaskFlowModel.modify('replace value of (root/item[@FlowNodeTypeID=sql:variable(""@NowFlowNodeType"")]/@FlowNodeFinishTime)[1] with sql:variable(""@CurrentTime"")')
		        
                -- 下一节点设置为轮到
                DECLARE @pNext INT
                DECLARE @pNextNodeType int
		        SET @pNext = @XmlTaskFlowModel.value('(/root/item[@FlowNodeTypeID=sql:variable(""@NowFlowNodeType"")]/@FlowNodeNextID)[1]', 'NVARCHAR(255)')
                SET @pNextNodeType = @XmlTaskFlowModel.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeTypeID)[1]', 'NVARCHAR(255)')
                SET @XmlTaskFlowModel.modify('replace value of (/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeStatus)[1] with sql:variable(""@NextFlowNodeStatus"")')

                -- 缓存下一节点 人员信息 节点类型信息（追加流转记录用）
                SET @ToEmpIDs=@XmlTaskFlowModel.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeEmpID)[1]','NVARCHAR(255)')
                SET @ToEmpNames=@XmlTaskFlowModel.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeEmpName)[1]','NVARCHAR(255)')
                SET @NodeTypeIds = CAST(@pNextNodeType AS NVARCHAR)


                -- 第四步 保存流程到文件扩展属性中

                DECLARE @AttachID BIGINT    --定义变量
                DECLARE @AttachExID BIGINT
                DECLARE @AttachName VARCHAR(4000)
                DECLARE @AttachVer BIGINT   --定义变量
                DECLARE @itemCur CURSOR         --定义游标

                -- 设置游标从某个结果集中开始移动读取记录
                SET @itemCur = CURSOR FOR
                SELECT  ba.AttachID, ba.AttachVer, ba.AttachName
                FROM    BaseAttach ba 
                WHERE   ba.AttachID IN (SELECT ID FROM [dbo].[Split](@AttachIds, ',')) AND ba.AttachExt <> '.'
		        
                OPEN @itemCur
                -- 读取一条记录到变量中，注意上面的结果集有多少列就应该有多少个变量
                FETCH NEXT FROM @itemCur INTO @AttachID, @AttachVer, @AttachName
                WHILE @@FETCH_STATUS = 0
                BEGIN
                    -- 记录 或 更新 文件对应校审流程
                    SET @AttachExID = 0
                    SELECT TOP 1 @AttachExID = Id FROM dbo.DesTaskAttachEx WHERE AttachId = @AttachID AND AttachVer = @AttachVer

                    IF(@AttachExID = 0)
				        BEGIN
                            -- 如果没有对应的文件校审记录，则插入
                            INSERT INTO dbo.DesTaskAttachEx
                                    (AttachId, AttachVer, AttachFlowNode)
                            VALUES(@AttachID, @AttachVer, @XmlTaskFlowModel)

                            SET @AttachExID = @@IDENTITY
                        END
                    ELSE
                        BEGIN
                            -- 已有校审记录，则更新当前节点状态
                            UPDATE dbo.DesTaskAttachEx
                            SET AttachFlowNode = @XmlTaskFlowModel
                            WHERE Id = @AttachExID
                        END
                    --End IF

			        -- 记录提交校审的文件，以及所处节点
					INSERT INTO #NotifApprove ( [Text1], [Text2] )
					VALUES  ( @AttachName + ' (v' + CAST(@AttachVer AS VARCHAR) + ')', @pNowName )

                    -- 记录提交校审的文件id（追加流转记录用）
                    IF ( @DesTaskAttachExIds <> '' )
                        BEGIN
                            SET @DesTaskAttachExIds = @DesTaskAttachExIds + ','
                        END
                    --END IF
                    SET @DesTaskAttachExIds = @DesTaskAttachExIds + CAST(@AttachExID AS NVARCHAR)

                    --读取下一条记录
                    FETCH NEXT FROM @itemCur INTO @AttachID, @AttachVer, @AttachName
                END
                CLOSE @itemCur      --关闭游标
                DEALLOCATE @itemCur --释放游标

                -- 如果下一节点为汇总节点，那么把汇总任务的状态设置为轮到
                IF (@pNextNodeType = '0')
                    BEGIN
                        UPDATE dbo.DesTask SET 
                                TaskStatus = @NextFlowNodeStatus,
                                TaskFlowModel.modify('replace value of (/root/item[@FlowNodeTypeID=sql:variable(""@DesignFlowNodeType"")]/@FlowNodeStatus)[1] with sql:variable(""@NextFlowNodeStatus"")')
                        WHERE Id = @TaskNextFlowNodeId

                    END
                --END IF    

                -- 插入流转记录
                
                INSERT  INTO [DesTaskFlowExe]
                        ( [TaskType] ,
                          [ProjectId] ,
                          [PhaseId] ,
                          [SpecialtyId] ,
                          [TaskId] ,
                          [TaskGroupId] ,
                          [ActiveTime] ,
                          [FromEmpId] ,
                          [FromEmpName] ,
                          [ToEmpIds] ,
                          [ToEmpNames] ,
                          [NodeTypeIds] ,
                          [DesTaskAttachExIds]
                        )
                VALUES  ( 1 ,
                          @ProjId ,
                          @PhaseId ,
                          @SpecialtyId ,
                          @TaskId ,
                          @TaskGroupId ,
                          GETDATE() ,
                          @CurrentEmpID ,
                          @CurrentEmpName ,
                          ISNULL(@ToEmpIDs, '') ,
                          ISNULL(@ToEmpNames, '') ,
                          ISNULL(@NodeTypeIds, '') ,
                          @DesTaskAttachExIds
                        );

		        -- 返回最后一步审批通过的文件
		        SELECT * FROM #NotifApprove

		        IF OBJECT_ID('tempdb..#NotifApprove') IS NOT NULL
                    BEGIN
                        DROP TABLE #NotifApprove
                    END
                -- END IF

            ";
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            sqlParameters.Add(new SqlParameter("@TaskId", TaskId));
            sqlParameters.Add(new SqlParameter("@AttachIds", AttachIds));
            sqlParameters.Add(new SqlParameter("@NowFlowNodeType", (int)NodeType.设计));
            sqlParameters.Add(new SqlParameter("@NowFlowNodeStatus", (int)FlowNodeStatus.已完成));
            sqlParameters.Add(new SqlParameter("@NextFlowNodeStatus", (int)FlowNodeStatus.进行中));
            sqlParameters.Add(new SqlParameter("@DesignFlowNodeType", (int)NodeType.设计));
            sqlParameters.Add(new SqlParameter("@CurrentEmpID", empSession.EmpID));
            sqlParameters.Add(new SqlParameter("@CurrentEmpName", empSession.EmpName));

            try
            {
                DataTable dtNotifAttach = DBExecute.ExecuteDataTable(sql.ToString(), sqlParameters.ToArray());

                if (dtNotifAttach.Rows.Count > 1)
                {
                    DataModel.Models.DesTask msgtoTask = this.Get(TaskId);
                    StringBuilder sbTitle = new StringBuilder();
                    StringBuilder sbNote = new StringBuilder();
                    for (var i = 0; i < dtNotifAttach.Rows.Count; i++)
                    {
                        DataRow row = dtNotifAttach.Rows[i];

                        switch (i)
                        {
                            case 0:
                                var taskPath = "";
                                var itemPaths = JQ.Util.JavaScriptSerializerUtil.objectToEntity<List<Dto.DesItemPathOutput>>(row["Text1"]).OrderBy(m => m.rownum);
                                foreach (var item in itemPaths)
                                {
                                    taskPath += item.text + " > ";
                                }
                                itemPaths = JQ.Util.JavaScriptSerializerUtil.objectToEntity<List<Dto.DesItemPathOutput>>(row["Text2"]).OrderBy(m => m.rownum);
                                foreach (var item in itemPaths)
                                {
                                    taskPath += item.text + " > ";
                                }
                                taskPath = taskPath.TrimEnd(' ').TrimEnd('>').TrimEnd(' ');
                                sbTitle.Append(String.Format("{0} 部分文件已被 {1} 提交校审", taskPath, empSession.EmpName));
                                break;
                            default:
                                sbNote.Append(String.Format("{0} 【{1}提交】<br />", row["Text1"].ToString(), row["Text2"].ToString()));
                                break;
                        }
                    }

                    // 写入 系统业务日志
                    DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
                    log.BaseLogRefTable = "DesTaskApprove";
                    log.BaseLogRefID = (int)TaskId;
                    log.BaseLogRefHTML = sbTitle.ToString() + "：<br />" + sbNote.ToString();
                    log.BaseLogEmpID = empSession.EmpID;
                    log.EmpName = empSession.EmpName;
                    log.BaseLogIP = empSession.LoginIP;
                    log.BaseLogDate = DateTime.Now;
                    log.BaseLogTypeID = 10;
                    __log.Add(log);
                    __log.UnitOfWork.SaveChanges();

                    // 写入 项目动态
                    ProjectDynamicDB.AddDynamic(msgtoTask.ProjId, "DesTaskGroup", (int)msgtoTask.TaskGroupId, sbTitle.ToString(), empSession);
                }
            }
            catch (Exception ex)
            {
                if (ex.Message == "60001")
                {
                    throw new Exception("如果阶段或任务分组非进行中，则无法提交校审操作。");
                }
                else
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// 提交 校审人员所选附件的 通过流程
        /// </summary>
        /// <param name="TaskId">对应任务ID</param>
        /// <param name="AttachIds">要提交的附件Ids</param>
        /// <param name="empSession">当前登录用户</param>
        public void SavePostPass(long TaskId, string AttachIds, EmpSession empSession)
        {
            string sql = @"
                -- 定义一些变量 （追加流转记录用）
                DECLARE @ToEmpIDs NVARCHAR(511),@ToEmpNames NVARCHAR(511),@NodeTypeIds NVARCHAR(511),@DesTaskAttachExIds NVARCHAR(511),@CurrentTime NVARCHAR(20),@Temp NVARCHAR(64)
                SET @ToEmpIDs=''
                SET @ToEmpNames=''
                SET @NodeTypeIds=''
                SET @DesTaskAttachExIds=''
                SET @CurrentTime=CONVERT(NVARCHAR(20), GETDATE(),20)

                -- 获取流程、任务等信息
                DECLARE @ItemPath1 VARCHAR(8000), @ItemPath2 VARCHAR(8000), @TaskStatus INT, @FlowId INT, @TaskNextFlowNodeId BIGINT
                DECLARE @ProjId INT, @PhaseId INT,@SpecialtyId INT,@TaskGroupId INT

                SELECT  @ItemPath1 = dbo.F_GetDesTaskGroupPathJson(g.Id),
				        @ItemPath2 = dbo.F_GetDesTaskPathJson(s.Id),
                        @TaskStatus = s.TaskStatus,
                        @FlowId = s.FlowId, 
                        @TaskNextFlowNodeId = s.TaskNextFlowNodeId, 

                        @ProjId = s.ProjId,
                        @PhaseId = g.TaskGroupPhaseId,
                        @SpecialtyId = s.TaskSpecId,
                        @TaskGroupId = g.Id
                FROM    dbo.DesTaskGroup g INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id 
                WHERE   s.Id = @TaskId

                IF (@TaskStatus <> @NextFlowNodeStatus)
                    BEGIN
                        -- 如果设计任务非进行中，则无法进行校审操作
                        RAISERROR ('60001', 16, 1)
                        RETURN
                    END
                -- END IF

                -- 走完设计流程最后一个节点的附件都保存在这，可用于消息、日志
		        CREATE TABLE #NotifApprove
		        (
			        [Text1] [varchar] (8000) DEFAULT (''), 
			        [Text2] [varchar] (8000) DEFAULT ('')
		        )
                INSERT INTO #NotifApprove ( [Text1], [Text2] )
				VALUES  ( @ItemPath1, @ItemPath2 )

                -- 第一步 遍历所选文件生产流程
                DECLARE @AttachID BIGINT	--定义变量
                DECLARE @AttachExID BIGINT
                DECLARE @AttachName VARCHAR(4000)
                DECLARE @AttachVer INT   --定义变量
                DECLARE @AttachFlowNode XML	--定义变量
                DECLARE @itemCur CURSOR		--定义游标

                -- 设置游标从某个结果集中开始移动读取记录
                SET @itemCur = CURSOR FOR
                SELECT  ba.AttachID, ba.AttachVer, ta.AttachFlowNode, ba.AttachName, ta.Id
                FROM    BaseAttach ba 
                        INNER JOIN DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachID IN (SELECT ID FROM [dbo].[Split](@AttachIds, ',')) AND ba.AttachExt <> '.'

                OPEN @itemCur
                -- 读取一条记录到变量中，注意上面的结果集有多少列就应该有多少个变量
                FETCH NEXT FROM @itemCur INTO @AttachID, @AttachVer, @AttachFlowNode, @AttachName, @AttachExID

                WHILE @@FETCH_STATUS=0
                BEGIN 
                    --Select @AttachFlowNode, @TaskNextFlowNodeId 

                    -- （可选）追加汇总节点
                    IF (@TaskNextFlowNodeId > 0)
			            BEGIN
				            IF (@AttachFlowNode.exist('(/root/item[@FlowNodeTypeID=""0""])') = 0) 
                                BEGIN
						            DECLARE @NodeID INT, @SumFirstXML XML
						            SELECT @NodeID = [ID], @SumFirstXML = [FlowNodeXML] FROM dbo.[F_GetDesFlowNodeFirstXML2](@FlowId, @TaskNextFlowNodeId)
			
						            SET @AttachFlowNode.modify('replace value of (/root/item[last()]/@FlowNodeNextID)[1] with sql:variable(""@NodeID"")')

                                    SET @AttachFlowNode.modify('
                                        insert sql:variable(""@SumFirstXML"")
                                        as last
                                        into (/root)[1]
                                    ')
                                END
                            --END IF
                        END
                    -- END IF

                    -- 第二步 找到当前处理节点 和 下一节点

                    DECLARE @pNow int
                    DECLARE @pNowName NVARCHAR(200)
                    DECLARE @pNext int
                    DECLARE @pNextNodeType int
                    SET @pNow = @AttachFlowNode.value('(/root/item[@FlowNodeEmpID=sql:variable(""@CurrentEmpID"") and (@FlowNodeStatus=""1"" or @FlowNodeStatus=""2"")]/@ID)[1]', 'NVARCHAR(250)')
                    SET @pNowName = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeName)[1]', 'NVARCHAR(250)')
                    SET @pNext = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeNextID)[1]', 'NVARCHAR(250)')
                    SET @pNextNodeType = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeTypeID)[1]', 'NVARCHAR(250)')
                    --SELECT @pNow, @pNext, @pNextNodeType

                    --第三步 将当前节点 设为 完成 下一节点 设为 轮到           节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）

                    SET @AttachFlowNode.modify('replace value of (/root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeStatus)[1] with sql:variable(""@NowFlowNodeStatus"")')
                    SET @AttachFlowNode.modify('replace value of (/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeStatus)[1] with sql:variable(""@NextFlowNodeStatus"")')

                    -- 记录节点操作时间
                    SET @AttachFlowNode.modify('insert (if(empty(root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeFinishTime)) then attribute FlowNodeFinishTime {""""} else null) into (root/item[@ID=sql:variable(""@pNow"")])[1]')
                    SET @AttachFlowNode.modify('replace value of (root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeFinishTime)[1] with sql:variable(""@CurrentTime"")')

                    -- 第四步 更新最新xml到对应附件

                    UPDATE dbo.DesTaskAttachEx SET AttachFlowNode = @AttachFlowNode WHERE AttachId = @AttachID AND AttachVer = @AttachVer

                    -- 第五步 如果下一节点为汇总节点，那么把汇总任务的状态设置为轮到（注：理论上汇总第一个节点类型为19，但为了和原流程设计区分，追加的汇总节点类型为0）
                    IF (@pNextNodeType = '0')
                        BEGIN
                            UPDATE dbo.DesTask SET 
                                    TaskStatus = @NextFlowNodeStatus, 
                                    TaskFlowModel.modify('replace value of (/root/item[@FlowNodeTypeID=sql:variable(""@DesignFlowNodeType"")]/@FlowNodeStatus)[1] with sql:variable(""@NextFlowNodeStatus"")')
                            WHERE Id = @TaskNextFlowNodeId
                        END
                    --END IF


			        -- 第六步 记录校审通过的文件，以及所处节点
					INSERT INTO #NotifApprove ( [Text1], [Text2] )
					VALUES  ( @AttachName + ' (v' + CAST(@AttachVer AS VARCHAR) + ')', @pNowName )


                    -- 第七步 记录 下一节点类型 和 下一步操作人员信息 （用于后期保存校审流转记录）
                    SET @Temp = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeEmpID)[1]', 'NVARCHAR(64)');
                    IF ( CHARINDEX(',' + @Temp + ',', ',' + @ToEmpIds + ',') = 0 )
                        BEGIN
                            IF ( @ToEmpIds <> '' )
                                BEGIN
                                    SET @ToEmpIds = @ToEmpIds + ',';
                                END;
                            SET @ToEmpIds = @ToEmpIds + @Temp;
                        END
					--END IF
                    SET @Temp = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeEmpName)[1]', 'NVARCHAR(64)');
                    IF ( CHARINDEX(',' + @Temp + ',', ',' + @ToEmpNames + ',') = 0 )
                        BEGIN
                            IF ( @ToEmpNames <> '' )
                                BEGIN
                                    SET @ToEmpNames = @ToEmpNames + ',';
                                END;
                            SET @ToEmpNames = @ToEmpNames + @Temp;
                        END
					--END IF
                    IF ( CHARINDEX(',' + CAST(@pNextNodeType AS NVARCHAR) + ',', ',' + @NodeTypeIds + ',') = 0 )
                        BEGIN
                            IF ( @NodeTypeIds <> '' )
                                BEGIN
                                    SET @NodeTypeIds = @NodeTypeIds + ',';
                                END;
                            SET @NodeTypeIds = @NodeTypeIds
                                + CAST(@pNextNodeType AS NVARCHAR);
                        END
					--END IF

                    -- 记录提交校审的文件id（追加流转记录用）
                    IF( @DesTaskAttachExIds <> '' )
                        BEGIN
                            SET @DesTaskAttachExIds = @DesTaskAttachExIds + ','
                        END
                    --END IF
                    SET @DesTaskAttachExIds = @DesTaskAttachExIds + CAST(@AttachExID AS NVARCHAR)

                    --读取下一条记录
                    FETCH NEXT FROM @itemCur INTO @AttachID, @AttachVer, @AttachFlowNode, @AttachName, @AttachExID
                END

                CLOSE @itemCur--关闭游标
                DEALLOCATE @itemCur--释放游标             

                -- 插入流转记录
                INSERT  INTO [DesTaskFlowExe]
                        ( [TaskType] ,
                            [ProjectId] ,
                            [PhaseId] ,
                            [SpecialtyId] ,
                            [TaskId] ,
                            [TaskGroupId] ,
                            [ActiveTime] ,
                            [FromEmpId] ,
                            [FromEmpName] ,
                            [ToEmpIds] ,
                            [ToEmpNames] ,
                            [NodeTypeIds] ,
                            [DesTaskAttachExIds]
                        )
                VALUES  ( 1 ,
                            @ProjId ,
                            @PhaseId ,
                            @SpecialtyId ,
                            @TaskId ,
                            @TaskGroupId ,
                            GETDATE() ,
                            @CurrentEmpID ,
                            @CurrentEmpName ,
                            ISNULL(@ToEmpIDs, '') ,
                            ISNULL(@ToEmpNames, '') ,
                            ISNULL(@NodeTypeIds, '') ,
                            @DesTaskAttachExIds
                        )

		        -- 返回最后一步审批通过的文件
		        SELECT * FROM #NotifApprove

		        IF OBJECT_ID('tempdb..#NotifApprove') IS NOT NULL
                    BEGIN
                        DROP TABLE #NotifApprove
                    END
                -- END IF

                -- 测试
                -- SELECT  ba.AttachID, ba.AttachVer, ta.AttachFlowNode 
                -- FROM    BaseAttach ba 
                --         INNER JOIN DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                -- WHERE   ba.AttachID IN (SELECT ID FROM [dbo].[Split](@AttachIds, ','))
            ";
            var sqlParameters = new List<SqlParameter>();
            sqlParameters.Add(new SqlParameter("@AttachIds", AttachIds));
            sqlParameters.Add(new SqlParameter("@NowFlowNodeStatus", (int)FlowNodeStatus.已完成));
            sqlParameters.Add(new SqlParameter("@NextFlowNodeStatus", (int)FlowNodeStatus.进行中));
            sqlParameters.Add(new SqlParameter("@TaskId", TaskId));
            sqlParameters.Add(new SqlParameter("@DesignFlowNodeType", (int)NodeType.设计));
            sqlParameters.Add(new SqlParameter("@CurrentEmpID", empSession.EmpID));
            sqlParameters.Add(new SqlParameter("@CurrentEmpName", empSession.EmpName));
            try
            {
                DataTable dtNotifAttach = DBExecute.ExecuteDataTable(sql.ToString(), sqlParameters.ToArray());

                if (dtNotifAttach.Rows.Count > 1)
                {
                    DataModel.Models.DesTask msgtoTask = this.Get(TaskId);
                    StringBuilder sbTitle = new StringBuilder();
                    StringBuilder sbNote = new StringBuilder();
                    for (var i = 0; i < dtNotifAttach.Rows.Count; i++)
                    {
                        DataRow row = dtNotifAttach.Rows[i];

                        switch (i)
                        {
                            case 0:
                                var taskPath = "";
                                var itemPaths = JQ.Util.JavaScriptSerializerUtil.objectToEntity<List<Dto.DesItemPathOutput>>(row["Text1"]).OrderBy(m => m.rownum);
                                foreach (var item in itemPaths)
                                {
                                    taskPath += item.text + " > ";
                                }
                                itemPaths = JQ.Util.JavaScriptSerializerUtil.objectToEntity<List<Dto.DesItemPathOutput>>(row["Text2"]).OrderBy(m => m.rownum);
                                foreach (var item in itemPaths)
                                {
                                    taskPath += item.text + " > ";
                                }
                                taskPath = taskPath.TrimEnd(' ').TrimEnd('>').TrimEnd(' ');
                                sbTitle.Append(String.Format("{0} 部分文件已被 {1} 校审通过", taskPath, empSession.EmpName));
                                break;
                            default:
                                sbNote.Append(String.Format("{0} 【{1}通过】<br />", row["Text1"].ToString(), row["Text2"].ToString()));
                                break;
                        }
                    }

                    // 发送消息提醒设计人员有部分文件校审通过
                    __msg.MessRefTable = "DesTaskApprove";
                    __msg.MessRefID = (int)TaskId;
                    __msg.MessTitle = sbTitle.ToString();
                    __msg.MessNote = sbNote.ToString();
                    __msg.EmpID = empSession.EmpID;
                    __msg.RecEmpID = (new int[] { msgtoTask.TaskEmpID }).ToList();
                    __msg.MessLinkTitle = "查看任务详情";
                    __msg.MessLinkUrl = String.Format("design/DesTask/TaskInfo?Id={0}&from=", TaskId);
                    __msg.DialogWidth = 1200;
                    __msg.DialogHeight = 900;
                    __msg.SendMess();

                    // 写入 系统业务日志
                    DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
                    log.BaseLogRefTable = "DesTaskApprove";
                    log.BaseLogRefID = (int)TaskId;
                    log.BaseLogRefHTML = sbTitle.ToString() + "：<br />" + sbNote.ToString();
                    log.BaseLogEmpID = empSession.EmpID;
                    log.EmpName = empSession.EmpName;
                    log.BaseLogIP = empSession.LoginIP;
                    log.BaseLogDate = DateTime.Now;
                    log.BaseLogTypeID = 10;
                    __log.Add(log);
                    __log.UnitOfWork.SaveChanges();

                    // 写入 项目动态
                    ProjectDynamicDB.AddDynamic(msgtoTask.ProjId, "DesTaskGroup", (int)msgtoTask.TaskGroupId, sbTitle.ToString(), empSession);
                }
            }
            catch (Exception ex)
            {
                if (ex.Message == "60001")
                {
                    throw new Exception("设计任务非进行中，无法进行校审操作。");
                }
                else
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// 提交 校审人员所选附件的 回退流程
        /// </summary>
        /// <param name="TaskId">对应任务ID</param>
        /// <param name="AttachIds">要提交的附件Ids</param>
        /// <param name="empSession">当前登录用户</param>
        public void SavePostBack(long TaskId, string AttachIds, EmpSession empSession)
        {
            string sql = @"
                -- 定义一些变量 （追加流转记录用）
                DECLARE @ToEmpIDs NVARCHAR(511),@ToEmpNames NVARCHAR(511),@NodeTypeIds NVARCHAR(511),@DesTaskAttachExIds NVARCHAR(511),@CurrentTime NVARCHAR(20),@Temp NVARCHAR(64)
                SET @ToEmpIDs=''
                SET @ToEmpNames=''
                SET @NodeTypeIds=''
                SET @DesTaskAttachExIds=''
                SET @CurrentTime=CONVERT(NVARCHAR(20), GETDATE(),20)

                -- 获取流程、任务等信息
                DECLARE @ItemPath1 VARCHAR(8000), @ItemPath2 VARCHAR(8000), @TaskStatus INT
                DECLARE @ProjId INT, @PhaseId INT,@SpecialtyId INT,@TaskGroupId INT

                SELECT  @ItemPath1 = dbo.F_GetDesTaskGroupPathJson(g.Id),
				        @ItemPath2 = dbo.F_GetDesTaskPathJson(s.Id), 
                        @TaskStatus = s.TaskStatus, 

                        @ProjId = s.ProjId,
                        @PhaseId = g.TaskGroupPhaseId,
                        @SpecialtyId = s.TaskSpecId,
                        @TaskGroupId = g.Id
                FROM    dbo.DesTaskGroup g INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id 
                WHERE   s.Id = @TaskId

                IF (@TaskStatus <> @NextFlowNodeStatus)
                    BEGIN
                        -- 如果设计任务非进行中，则无法进行校审操作
                        RAISERROR ('60001', 16, 1)
                        RETURN
                    END
                -- END IF

                -- 走完设计流程最后一个节点的附件都保存在这，可用于消息、日志
		        CREATE TABLE #NotifApprove
		        (
			        [Text1] [varchar] (8000) DEFAULT (''), 
			        [Text2] [varchar] (8000) DEFAULT ('')
		        )
                INSERT INTO #NotifApprove ( [Text1], [Text2] )
				VALUES  ( @ItemPath1, @ItemPath2 )

                -- 第一步 遍历所选文件生产流程

                DECLARE @AttachID BIGINT	--定义变量
                DECLARE @AttachExID BIGINT
                DECLARE @AttachName VARCHAR(4000)
                DECLARE @AttachVer BIGINT   --定义变量
                DECLARE @AttachFlowNode XML	--定义变量
                DECLARE @itemCur CURSOR		--定义游标

                --设置游标从某个结果集中开始移动读取记录
                SET @itemCur = CURSOR FOR
                SELECT  ba.AttachID, ba.AttachVer, ta.AttachFlowNode, ba.AttachName, ta.Id
                FROM    BaseAttach ba 
                        INNER JOIN DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachID IN (SELECT ID FROM [dbo].[Split](@AttachIds, ',')) AND ba.AttachExt <> '.'

                OPEN @itemCur
                --读取一条记录到变量中，注意上面的结果集有多少列就应该有多少个变量
                FETCH NEXT FROM @itemCur INTO @AttachID, @AttachVer, @AttachFlowNode, @AttachName, @AttachExID

                WHILE @@FETCH_STATUS=0
                BEGIN 
                    --Select @AttachFlowNode 

                    -- 第二步 找到当前处理节点 和 下一节点

                    DECLARE @pNow int
                    DECLARE @pNowName NVARCHAR(200)
                    DECLARE @pNext int
                    DECLARE @pNextNodeType int

                    SET @pNow = @AttachFlowNode.value('(/root/item[@FlowNodeEmpID=sql:variable(""@CurrentEmpID"") and (@FlowNodeStatus=""1"" or @FlowNodeStatus=""2"")]/@ID)[1]', 'NVARCHAR(250)')
                    SET @pNowName = @AttachFlowNode.value('(/root/item[@FlowNodeEmpID=sql:variable(""@CurrentEmpID"") and (@FlowNodeStatus=""1"" or @FlowNodeStatus=""2"")]/@FlowNodeName)[1]', 'NVARCHAR(250)')
                    SET @pNext = @AttachFlowNode.value('(/root/item[@FlowNodeTypeID=sql:variable(""@BackFlowNodeStatus"")]/@ID)[1]', 'NVARCHAR(250)')
                    SET @pNextNodeType = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeTypeID)[1]', 'NVARCHAR(250)')
                    --SELECT @pNow, @pNext

                    --第三步 将当前节点 设为 回退 设计节点 设为 轮到           节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）

                    SET @AttachFlowNode.modify('replace value of (/root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeStatus)[1] with sql:variable(""@NowFlowNodeStatus"")')
                    SET @AttachFlowNode.modify('replace value of (/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeStatus)[1] with sql:variable(""@NextFlowNodeStatus"")')

                    -- 记录节点操作时间
                    SET @AttachFlowNode.modify('insert (if(empty(root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeFinishTime)) then attribute FlowNodeFinishTime {""""} else null) into (root/item[@ID=sql:variable(""@pNow"")])[1]')
                    SET @AttachFlowNode.modify('replace value of (root/item[@ID=sql:variable(""@pNow"")]/@FlowNodeFinishTime)[1] with sql:variable(""@CurrentTime"")')

                    -- 第四步 更新最新xml到对应附件

                    UPDATE dbo.DesTaskAttachEx SET AttachFlowNode = @AttachFlowNode WHERE AttachId = @AttachID AND AttachVer = @AttachVer

			        -- 第五步 记录审核通过的文件，以及所处节点
					INSERT INTO #NotifApprove ( [Text1], [Text2] )
					VALUES  ( @AttachName + ' (v' + CAST(@AttachVer AS VARCHAR) + ')', @pNowName )

                    -- 第六步 记录 下一节点类型 和 下一步操作人员信息 （用于后期保存校审流转记录）
                    SET @Temp = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeEmpID)[1]', 'NVARCHAR(64)');
                    IF ( CHARINDEX(',' + @Temp + ',', ',' + @ToEmpIds + ',') = 0 )
                        BEGIN
                            IF ( @ToEmpIds <> '' )
                                BEGIN
                                    SET @ToEmpIds = @ToEmpIds + ',';
                                END;
                            SET @ToEmpIds = @ToEmpIds + @Temp;
                        END
					--END IF
                    SET @Temp = @AttachFlowNode.value('(/root/item[@ID=sql:variable(""@pNext"")]/@FlowNodeEmpName)[1]', 'NVARCHAR(64)');
                    IF ( CHARINDEX(',' + @Temp + ',', ',' + @ToEmpNames + ',') = 0 )
                        BEGIN
                            IF ( @ToEmpNames <> '' )
                                BEGIN
                                    SET @ToEmpNames = @ToEmpNames + ',';
                                END;
                            SET @ToEmpNames = @ToEmpNames + @Temp;
                        END
					--END IF
                    IF ( CHARINDEX(',' + CAST(@pNextNodeType AS NVARCHAR) + ',', ',' + @NodeTypeIds + ',') = 0 )
                        BEGIN
                            IF ( @NodeTypeIds <> '' )
                                BEGIN
                                    SET @NodeTypeIds = @NodeTypeIds + ',';
                                END;
                            SET @NodeTypeIds = @NodeTypeIds
                                + CAST(@pNextNodeType AS NVARCHAR);
                        END
					--END IF

                    -- 记录提交校审的文件id（追加流转记录用）
                    IF( @DesTaskAttachExIds <> '' )
                        BEGIN
                            SET @DesTaskAttachExIds = @DesTaskAttachExIds + ','
                        END
                    --END IF
                    SET @DesTaskAttachExIds = @DesTaskAttachExIds + CAST(@AttachExID AS NVARCHAR)

                    --读取下一条记录
                    FETCH NEXT FROM @itemCur INTO @AttachID, @AttachVer, @AttachFlowNode, @AttachName, @AttachExID
                END

                CLOSE @itemCur--关闭游标
                DEALLOCATE @itemCur--释放游标            

                -- 插入流转记录
                INSERT  INTO [DesTaskFlowExe]
                        ( [TaskType] ,
                            [ProjectId] ,
                            [PhaseId] ,
                            [SpecialtyId] ,
                            [TaskId] ,
                            [TaskGroupId] ,
                            [ActiveTime] ,
                            [FromEmpId] ,
                            [FromEmpName] ,
                            [ToEmpIds] ,
                            [ToEmpNames] ,
                            [NodeTypeIds] ,
                            [DesTaskAttachExIds]
                        )
                VALUES  ( 1 ,
                            @ProjId ,
                            @PhaseId ,
                            @SpecialtyId ,
                            @TaskId ,
                            @TaskGroupId ,
                            GETDATE() ,
                            @CurrentEmpID ,
                            @CurrentEmpName ,
                            ISNULL(@ToEmpIDs, '') ,
                            ISNULL(@ToEmpNames, '') ,
                            ISNULL(@NodeTypeIds, '') ,
                            @DesTaskAttachExIds
                        )             

		        -- 返回回退文件信息
		        SELECT * FROM #NotifApprove

		        IF OBJECT_ID('tempdb..#NotifApprove') IS NOT NULL
                    BEGIN
                        DROP TABLE #NotifApprove
                    END
                -- END IF

                -- 测试
                -- SELECT  ba.AttachID, ba.AttachVer, ta.AttachFlowNode 
                -- FROM    BaseAttach ba 
                --         INNER JOIN DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                -- WHERE ba.AttachID IN (SELECT ID FROM [dbo].[Split](@AttachIds, ','))
            ";
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            sqlParameters.Add(new SqlParameter("@AttachIds", AttachIds));
            sqlParameters.Add(new SqlParameter("@CurrentEmpID", empSession.EmpID));
            sqlParameters.Add(new SqlParameter("@CurrentEmpName", empSession.EmpName));
            sqlParameters.Add(new SqlParameter("@BackFlowNodeStatus", (int)DBSql.Design.FlowNodeType.设计));
            sqlParameters.Add(new SqlParameter("@NowFlowNodeStatus", (int)FlowNodeStatus.已回退));
            sqlParameters.Add(new SqlParameter("@NextFlowNodeStatus", (int)FlowNodeStatus.进行中));
            sqlParameters.Add(new SqlParameter("@TaskId", TaskId));

            try
            {
                DataTable dtNotifAttach = DBExecute.ExecuteDataTable(sql.ToString(), sqlParameters.ToArray());

                if (dtNotifAttach.Rows.Count > 1)
                {
                    DataModel.Models.DesTask msgtoTask = this.Get(TaskId);
                    StringBuilder sbTitle = new StringBuilder();
                    StringBuilder sbNote = new StringBuilder();
                    for (var i = 0; i < dtNotifAttach.Rows.Count; i++)
                    {
                        DataRow row = dtNotifAttach.Rows[i];

                        switch (i)
                        {
                            case 0:
                                var taskPath = "";
                                var itemPaths = JQ.Util.JavaScriptSerializerUtil.objectToEntity<List<Dto.DesItemPathOutput>>(row["Text1"]).OrderBy(m => m.rownum);
                                foreach (var item in itemPaths)
                                {
                                    taskPath += item.text + " > ";
                                }
                                itemPaths = JQ.Util.JavaScriptSerializerUtil.objectToEntity<List<Dto.DesItemPathOutput>>(row["Text2"]).OrderBy(m => m.rownum);
                                foreach (var item in itemPaths)
                                {
                                    taskPath += item.text + " > ";
                                }
                                taskPath = taskPath.TrimEnd(' ').TrimEnd('>').TrimEnd(' ');
                                sbTitle.Append(String.Format("{0} 部分文件已被 {1} 校审回退", taskPath, empSession.EmpName));
                                break;
                            default:
                                sbNote.Append(String.Format("{0} 【{1}回退】<br />", row["Text1"].ToString(), row["Text2"].ToString()));
                                break;
                        }
                    }

                    // 发送消息提醒设计人员有部分文件校审回退
                    __msg.MessRefTable = "DesTaskApprove";
                    __msg.MessRefID = (int)TaskId;
                    __msg.MessTitle = sbTitle.ToString();
                    __msg.MessNote = sbNote.ToString();
                    __msg.EmpID = empSession.EmpID;
                    __msg.RecEmpID = (new int[] { msgtoTask.TaskEmpID }).ToList();
                    __msg.MessLinkTitle = "查看任务详情";
                    __msg.MessLinkUrl = String.Format("design/DesTask/TaskInfo?Id={0}&from=", TaskId);
                    __msg.DialogWidth = 1200;
                    __msg.DialogHeight = 900;
                    __msg.SendMess();

                    // 写入 系统业务日志
                    DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
                    log.BaseLogRefTable = "DesTaskApprove";
                    log.BaseLogRefID = (int)TaskId;
                    log.BaseLogRefHTML = sbTitle.ToString() + "：<br />" + sbNote.ToString();
                    log.BaseLogEmpID = empSession.EmpID;
                    log.EmpName = empSession.EmpName;
                    log.BaseLogIP = empSession.LoginIP;
                    log.BaseLogDate = DateTime.Now;
                    log.BaseLogTypeID = 10;
                    __log.Add(log);
                    __log.UnitOfWork.SaveChanges();

                    // 写入 项目动态
                    ProjectDynamicDB.AddDynamic(msgtoTask.ProjId, "DesTaskGroup", (int)msgtoTask.TaskGroupId, sbTitle.ToString(), empSession);
                }
            }
            catch (Exception ex)
            {
                if (ex.Message == "60001")
                {
                    throw new Exception("设计任务非进行中，无法进行校审操作。");
                }
                else
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// 获取 任务路径
        /// </summary>
        /// <param name="TaskId">任务Id</param>
        /// <param name="includMainProj">是否包含主项节点</param>
        public DataTable GetTaskPath(long TaskId, bool includMainProj = false)
        {
            string sql = @"
                -- 项目层级树 （任务ID向上搜）
                SELECT  'Task' AS 'Type' ,
                        t.Id AS 'Id' ,
                        t.TaskName AS 'Name' ,
                        CASE t.TaskType
                          WHEN 1 THEN 'TaskGroup'
                          ELSE 'Task'
                        END AS 'ParentType' ,
                        CASE t.TaskType
                          WHEN 1 THEN t.TaskGroupId
                          ELSE t.TaskParentId
                        END AS 'ParentId'
                INTO    #Directory4
                FROM    dbo.DesTask AS t
                WHERE   t.DeleterEmpId = 0
                        AND t.Id IN (
                        SELECT  ID
                        FROM    dbo.Split(( SELECT  TaskPathIds + ','
                                                    + CAST(@TaskId AS VARCHAR)
                                            FROM    dbo.DesTask
                                            WHERE   Id = @TaskId
                                          ), ',') )

                SELECT  'TaskGroup' AS 'Type' ,
                        g.Id AS 'Id' ,
                        g.TaskGroupName AS 'Name' ,
                        CASE 
                          WHEN g.TaskGroupType = 0 THEN 'Project'
                          ELSE 'TaskGroup'
                        END AS 'ParentType' ,
                        CASE 
                          WHEN g.TaskGroupType = 0 and @includMainProj = 0 THEN 0
						  WHEN g.TaskGroupType = 0 and @includMainProj > 0 THEN p.ParentId
                          ELSE g.TaskGroupParentId
                        END AS 'ParentId'
                INTO    #Directory5
                FROM    dbo.DesTaskGroup AS g
                        INNER JOIN Project AS p ON g.ProjId = p.Id
                WHERE   g.DeleterEmpId = 0
                        --AND g.TaskGroupType <> 0
                        AND g.Id IN (
                        SELECT  ID
                        FROM    dbo.Split(( SELECT  TaskGroupPathIds + ','
                                                    + CAST(Id AS VARCHAR)
                                            FROM    dbo.DesTaskGroup
                                            WHERE   Id IN ( SELECT TOP 1   ParentId
                                                           FROM     #Directory4
                                                           WHERE    ParentType = 'TaskGroup'
                                                         )
                                          ), ',') )


                SELECT  'Project' AS 'Type' ,
                p.Id AS 'Id' ,
                '[' + p.ProjNumber + ']' + p.ProjName AS 'Name' ,
                'Project' AS 'ParentType',
                p.ParentId AS 'ParentId'
                INTO #Directory6
                FROM    dbo.Project AS p
                WHERE   p.DeleterEmpId = 0
                        --AND p.Id IN (
                        --SELECT  ID
                        --FROM    dbo.Split(( SELECT  ColAttVal2 
                        --                            --+ CAST(Id AS VARCHAR)
                        --                    FROM    dbo.Project
                        --                    WHERE   Id IN ( SELECT TOP 1  ParentId
                        --                                   FROM     #Directory5
                        --                                   WHERE    ParentType = 'Project'
                        --                                 )
                        --                  ), '/') )
						AND p.Id IN ( SELECT TOP 1  ParentId
							FROM     #Directory5
							WHERE    ParentType = 'Project'
                        )

                IF (@includMainProj = 1)
                    BEGIN
                        SELECT * FROM #Directory6
                        UNION ALL
                        SELECT * FROM #Directory5
                        UNION ALL
                        SELECT * FROM #Directory4
                    END
                ELSE
                    BEGIN
                        SELECT * FROM #Directory5
                        UNION ALL
                        SELECT * FROM #Directory4
                    END
                --END IF

		        IF OBJECT_ID('tempdb..#Directory4') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory4
                    END
                --END IF

		        IF OBJECT_ID('tempdb..#Directory5') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory5
                    END
                --END IF

		        IF OBJECT_ID('tempdb..#Directory6') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory6
                    END
                --END IF
            ";
            SqlParameter[] paras = {
                new SqlParameter("@TaskId",SqlDbType.BigInt),
                new SqlParameter("@includMainProj",SqlDbType.Bit)
            };
            paras[0].Value = TaskId;
            paras[1].Value = includMainProj ? 1 : 0;

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 以文字显示表示任务路径
        /// </summary>
        /// <param name="TaskId"></param>
        /// <param name="includMainProj">是否包含主项节点</param>
        /// <returns></returns>
        public string GetTaskTextPath(long TaskId, bool includMainProj = false)
        {
            DataTable dtDir = this.GetTaskPath(TaskId, includMainProj);

            List<string> listPath = new List<string>();
            string ParentType = "Project";
            long ParentId = 0;
            DataRow item;
            item = dtDir.AsEnumerable().Where(x => x.Field<string>("ParentType") == ParentType && x.Field<long>("ParentId") == ParentId).FirstOrDefault();
            while (item != null)
            {
                listPath.Add(item.Field<string>("Name"));
                ParentType = item.Field<string>("Type");
                ParentId = item.Field<long>("Id");
                item = dtDir.AsEnumerable().Where(x => x.Field<string>("ParentType") == ParentType && x.Field<long>("ParentId") == ParentId).FirstOrDefault();
            }
            return String.Join(" ＞ ", listPath.ToArray());
        }

        /// <summary>
        /// 改变任务状态（完成后：归档、签名）
        /// </summary>
        /// <param name="taskGroupId"></param>
        /// <param name="status"></param>
        /// <param name="empSession"></param>
        public void ChangeTaskStatus(long taskId, TaskStatus status, DataModel.EmpSession empSession)
        {
            var task = this.Get(taskId);

            // 在把设计任务至为完成之前，先检查已经提交审批的文件没有审批通过，有的话无法完成当前任务
            if (task.TaskType == (int)TaskType.普通任务 && status == TaskStatus.已完成)
            {
                if (CheckTaskAttachApprove(taskId))
                {
                    throw new Exception("当前任务中有部分已经提交审批的文件没有审批通过，无法完成当前任务。");
                }

                if (CheckPreTaskAttachApprove(taskId))
                {
                    throw new Exception("前置任务中有部分已经提交审批的文件没有审批通过，无法完成当前任务。");
                }
            }

            // 设置 专业任务 或 设计任务 状态      节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
            Common.ModelConvert.MvcDefaultEdit<DataModel.Models.DesTask>(task, empSession);
            task.TaskStatus = (int)status;
            if (status == TaskStatus.进行中 && task.DateActualStart.Year == 1900)
            {
                task.DateActualStart = DateTime.Now;
            }
            if (status == TaskStatus.已完成)
            {
                task.DateActualFinish = DateTime.Now;
            }
            this.Edit(task);
            this.UnitOfWork.SaveChanges();

            // 写入 系统业务日志
            string taskPath = this.GetTaskTextPath(taskId);
            string logRefHTML = String.Format("{0} 被 {1} 置为 {2}", taskPath, empSession.EmpName, status.ToString());
            DataModel.Models.BaseLog log = new DataModel.Models.BaseLog();
            log.BaseLogRefTable = "DesTask";
            log.BaseLogRefID = (int)task.Id;
            log.BaseLogRefHTML = logRefHTML;
            log.BaseLogEmpID = empSession.EmpID;
            log.EmpName = empSession.EmpName;
            log.BaseLogIP = empSession.LoginIP;
            log.BaseLogDate = DateTime.Now;
            log.BaseLogTypeID = 10;
            __log.Add(log);
            __log.UnitOfWork.SaveChanges();

            // 写入 项目动态
            ProjectDynamicDB.AddDynamic(task.ProjId, "DesTaskGroup", (int)task.TaskGroupId, logRefHTML, empSession);


            // 任务状态变更后，更新 已完任务数
            ChangeTaskGroupFinishCount(task.TaskGroupId);

            // 设计任务完成，后续处理东东
            if (task.TaskType == (int)TaskType.普通任务 && task.TaskStatus == (int)TaskStatus.已完成)
            {
                // 归档已校审完文件
                archElecProjectDB.TaskArch(taskId, empSession);

                //获取出制图日期
                var design_date = "";
                if (!string.IsNullOrEmpty(task.ColAttXml))
                {
                    design_date = Common.XmlConvert.GetXmlValue(task.ColAttXml, "Design_Date");
                    if (String.IsNullOrWhiteSpace(design_date))
                    {
                        design_date = DateTime.Now.ToString("yyyy-MM-dd");
                    }
                }

                // 成果文件电子签名
                desSignDB.TaskAttachSign(taskId, empSession, design_date);

                //// 有汇总，且汇总关联任务都为 已完成 状态的话 把汇总节点置为 正在进行
                //// 2016-10-10 黄一鸣 在文件走流程提交到汇总节点时，就已经把真实的汇总流程设计节点设置为轮到了。
                //if (task.TaskNextFlowNodeId > 0)
                //{
                //    if (this.Count(x => x.TaskNextFlowNodeId == task.TaskNextFlowNodeId && x.TaskStatus != (int)TaskStatus.已完成 && x.DeleterEmpId == 0) == 0)
                //    {
                //        var summaryModel = this.Get(task.TaskNextFlowNodeId);
                //        if (summaryModel.TaskStatus != (int)TaskStatus.已完成)
                //        {
                //            summaryModel.TaskStatus = (int)TaskStatus.进行中;
                //            this.Edit(summaryModel);
                //            this.UnitOfWork.SaveChanges();
                //        }
                //    }
                //}
            }
        }

        /// <summary>
        /// 改变任务分组中的 总的设计任务数
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <param name="UpdateParent">当同时调用 更改总任务数 和 更改已完任务数 方法时，只要最后一个设置为 true</param>
        public void ChangeTaskGroupTotalCount(long TaskGroupId, bool UpdateParent = true)
        {
            int count = this.GetQuery(x => x.TaskGroupId == TaskGroupId && x.DeleterEmpId == 0 && x.TaskType == (int)TaskType.普通任务).Count();
            desTaskGroupDB.SetTaskTotalCount(TaskGroupId, count, UpdateParent);
        }

        /// <summary>
        /// 改变任务分组中的 已完设计任务数
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <param name="UpdateParent">当同时调用 更改总任务数 和 更改已完任务数 方法时，只要最后一个设置为 true</param>
        public void ChangeTaskGroupFinishCount(long TaskGroupId, bool UpdateParent = true)
        {
            var obj = (from x in this.DbContext.Set<DataModel.Models.DesTask>()
                       where x.TaskGroupId == TaskGroupId && x.DeleterEmpId == 0 && x.TaskType == (int)TaskType.普通任务 && x.TaskStatus == (int)TaskStatus.已完成
                       group x by x.TaskGroupId into g
                       select new
                       {
                           countTotal = g.Count(),
                           maxDateActualFinish = g.Max(c => c.DateActualFinish)
                       }).FirstOrDefault();

            if (obj != null)
            {
                desTaskGroupDB.SetTaskFinishCount(TaskGroupId, obj.countTotal, obj.maxDateActualFinish, UpdateParent);
            }
        }

        /// <summary>
        /// 检测当前任务是否有提交审批，且未完成审批的文件
        /// </summary>
        /// <param name="TaskId"></param>
        public bool CheckTaskAttachApprove(long TaskId)
        {
            string sql = @"
		        SELECT  COUNT(1)
		        FROM    BaseAttach AS ba
				        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
		        WHERE   ba.AttachRefTable = 'DesTaskAttach'
				        AND ba.AttachRefID = @TaskId
				        -- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
				        AND ta.AttachFlowNode.exist('(/root/item[(【ItemStatus2】)])') = 1
            ";

            sql = sql.Replace("【ItemStatus2】", @"@FlowNodeStatus=sql:variable(""@NodeStatusWaiting"") or @FlowNodeStatus=sql:variable(""@NodeStatusNow"")");

            SqlParameter[] paras = {
                new SqlParameter("@TaskId",SqlDbType.BigInt),
                new SqlParameter("@NodeStatusWaiting",SqlDbType.Int),
                new SqlParameter("@NodeStatusNow",SqlDbType.Int)
            };

            paras[0].Value = TaskId;
            paras[1].Value = (int)FlowNodeStatus.已安排;
            paras[2].Value = (int)FlowNodeStatus.进行中;

            int n = (int)DBExecute.ExecuteScalar(sql, paras);
            return n != 0;
        }

        /// <summary>
        /// 检测前置任务是否有提交审批，且未完成审批的文件
        /// </summary>
        /// <param name="TaskId"></param>
        public bool CheckPreTaskAttachApprove(long TaskId)
        {
            string sql = @"
		        SELECT  COUNT(1)
		        FROM    BaseAttach AS ba
				        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
		        WHERE   ba.AttachRefTable = 'DesTaskAttach'
				        AND ba.AttachRefID IN (SELECT Id FROM dbo.DesTask WHERE TaskNextFlowNodeId = @TaskId AND DeleterEmpId = 0)
				        -- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
				        AND ta.AttachFlowNode.exist('(/root/item[(【ItemStatus2】)])') = 1
            ";

            sql = sql.Replace("【ItemStatus2】", @"@FlowNodeStatus=sql:variable(""@NodeStatusWaiting"") or @FlowNodeStatus=sql:variable(""@NodeStatusNow"")");

            SqlParameter[] paras = {
                new SqlParameter("@TaskId",SqlDbType.BigInt),
                new SqlParameter("@NodeStatusWaiting",SqlDbType.Int),
                new SqlParameter("@NodeStatusNow",SqlDbType.Int)
            };

            paras[0].Value = TaskId;
            paras[1].Value = (int)FlowNodeStatus.已安排;
            paras[2].Value = (int)FlowNodeStatus.进行中;

            int n = (int)DBExecute.ExecuteScalar(sql, paras);
            return n != 0;
        }

        /// <summary>
        /// 重新签名
        /// </summary>
        public void ReSign(long taskID, EmpSession empSession)
        {
            var task = this.Get(taskID);
            if (task == null)
            {
                throw new Common.JQException("无法找到设计任务");
            }
            if (task.TaskType == (int)TaskType.普通任务 && task.TaskStatus == (int)TaskStatus.已完成)
            {
                var design_date = "";
                if (!string.IsNullOrEmpty(task.ColAttXml))
                {
                    design_date = Common.XmlConvert.GetXmlValue(task.ColAttXml, "Design_Date");
                }
                // 成果文件电子签名
                desSignDB.TaskAttachSign(taskID, empSession, design_date);
            }
        }


        /**********************任务提醒********************/

        /// <summary>
        /// 获取 个人待办设计任务 列表（CAD中显示）
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable GetTaskRemindDesignList(Common.SqlPageInfo condition)
        {
            string RowColumn = @"
                t.ItemPath1,
                t.ItemPath2,
                t.ItemName,
                t.ItemEmpName,
                t.ItemStatus,
                t.DatePlanStart,
                t.DatePlanFinish,
                t.ItemType,
                t.ItemAction,
                t.ProjId,
                t.TaskGroupId,
                t.TaskId,
                t.TabId,
                t.TaskEmpID,
                t.ProjTypeID
            ";

            string sql = (@"
                SELECT  Count(1) 
                FROM
                (
                    -- 获取 代办设计任务
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            s.TaskName AS 'ItemName',
                            s.TaskEmpID,
                            s.TaskEmpName AS 'ItemEmpName', -- 执行人
                            s.TaskStatus AS 'ItemStatus',
                            s.DatePlanStart,
                            s.DatePlanFinish,
                            CASE WHEN s.TaskEmpID = @SessionEmpId THEN 3 ELSE 4 END AS 'ItemType',
                            CASE WHEN s.TaskEmpID = @SessionEmpId THEN '提交设计' ELSE '设计校审' END AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            s.Id AS TaskId,
				            2 AS TabId,
                            1 AS ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
                            -- 任务负责人是我 -- 任务状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND s.TaskEmpID = @SessionEmpId AND s.TaskStatus IN (【ItemStatus1】) 
                ) AS t
                WHERE   1 = 1 
            ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@SessionEmpId",SqlDbType.Int),
                new SqlParameter("@NodeTypeDesign",SqlDbType.Int),
                new SqlParameter("@NodeStatusWaiting",SqlDbType.Int),
                new SqlParameter("@NodeStatusNow",SqlDbType.Int)
            };

            paras[2].Value = (int)NodeType.设计;
            paras[3].Value = (int)FlowNodeStatus.已安排;
            paras[4].Value = (int)FlowNodeStatus.进行中;

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "SessionEmpId":
                            if (de.Value.ToString() != "")
                            {
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            else
                            {
                                paras[1].Value = "0";
                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            sql = sql.Replace("【ItemStatus1】", @"2"); // 节点状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
            sql = sql.Replace("【ItemStatus2】", @"@FlowNodeStatus=""2""");

            StringBuilder strSql = new StringBuilder();
            strSql.Append(sql);

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" AND (t.ItemPath1 like '%'+@TextCondtion+'%' OR t.ItemPath2 like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = " t.DatePlanStart DESC, t.ItemType ASC, t.ProjId DESC, t.TaskGroupId DESC, t.TaskId DESC ";
            }

            string sqlpage = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sqlpage, paras);

        }

        /// <summary>
        /// 获取 个人待办任务 数量
        /// </summary>
        /// <param name="SessionEmpId"></param>
        /// <param name="ItemStatus"></param>
        /// <param name="taskRemindPermission"></param>
        /// <returns></returns>
        public int GetTaskRemindTodoAmount(int SessionEmpId, string ItemStatus, DesTaskRemindPermission taskRemindPermission)
        {
            string sql = (@"
                SELECT  Count(1) 
                FROM
                (
                    -- 获取 代办项目策划
		            SELECT  1 AS N
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                    WHERE   p.DeleterEmpId = 0 and p.BridgeGuid<>'00000000-0000-0000-0000-000000000000'
                            AND g.DeleterEmpId = 0
                            AND g.TaskGroupType = 1 -- 分组类型 0 开始 1 阶段 2 分组
				            AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
				            AND g.TaskStatus IN (【ItemStatus1】) -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
				            AND g.TaskGroupEmpID = @SessionEmpId
                            AND ((@DesTaskRemindPermission & 1) = 1 OR (@DesTaskRemindPermission & 2) = 2)

		            UNION ALL

		            -- 获取 代办专业策划
                    SELECT  1 AS N
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 1 -- 任务类型： 0 普通任务 1 专业任务
				            AND s.TaskStatus IN (【ItemStatus1】) -- 任务状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
				            AND s.TaskEmpID = @SessionEmpId
                            AND (@DesTaskRemindPermission & 4) = 4
                            AND ( s.TaskSpecId NOT IN ( SELECT  BaseID
                                                        FROM    dbo.BaseData
                                                        WHERE   BaseName = '勘测' )
                                  OR ( 
                                       s.TaskSpecId IN ( SELECT BaseID FROM   dbo.BaseData WHERE  BaseName = '勘测' )
                                       AND ( CAST(s.ProjId AS VARCHAR(10)) + '_' + CAST(s.TaskPhaseId AS VARCHAR(10)) ) 
                                            IN (SELECT   CAST(iso.ProjID AS VARCHAR(10)) + '_' + CAST(iso.ProjPhaseId AS VARCHAR(10))
                                       FROM     dbo.IsoGCCLTJD iso
                                       WHERE    iso.ProjID = s.ProjId
                                                AND iso.ProjPhaseId = s.TaskPhaseId )
                                     )
                                                 OR s.TaskGroupId IN ( SELECT iso.EngineeringId
                                                 FROM   dbo.IsoGCCLTJD iso
                                                 WHERE  iso.DeleterEmpId = 0 )
                                OR ( ( CAST(s.ProjId AS VARCHAR(10)) + '_'
                                + CAST(s.TaskPhaseId AS VARCHAR(10)) ) IN (
                              SELECT    CAST(iso.ProjID AS VARCHAR(10)) + '_'
                                        + CAST(iso.ProjPhaseId AS VARCHAR(10))
                              FROM      dbo.IsoGCDZKCTJDJZ iso
                              WHERE     iso.DeleterEmpId = 0
                                        AND ( iso.ProjID = s.ProjId
                                              AND iso.ProjPhaseId = s.TaskPhaseId
                                            ) )
                              OR s.TaskGroupId IN (
                              SELECT    iso.EngineeringId
                              FROM      dbo.IsoGCDZKCTJDJZ iso
                              WHERE     iso.DeleterEmpId = 0 )
                            )
                                )

		            UNION ALL

		            -- 获取 代办设计任务
                    SELECT  1 AS N
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
                            -- 任务负责人是我 -- 任务状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND s.TaskEmpID = @SessionEmpId AND s.TaskStatus IN (【ItemStatus1】) 

		            UNION ALL

		            -- 获取 代办校审任务
                    SELECT  1 AS N
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
				            AND s.TaskStatus IN (【ItemStatus1】) -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
                            -- 本任务附件流程中 有 安排到 轮到 我的
                            AND EXISTS ( 
                                SELECT  ba.AttachID
                                FROM    BaseAttach AS ba
                                        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                                        AND ba.AttachRefID = s.Id
										-- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
                                        AND ta.AttachFlowNode.exist('(/root/item[@FlowNodeTypeID != 0 and @FlowNodeTypeID != sql:variable(""@NodeTypeDesign"") and @FlowNodeEmpID = sql:variable(""@SessionEmpId"") and (【ItemStatus2】)])') = 1
                            )

                    UNION ALL

                    -- 待办 会签 任务
                    SELECT  1 AS N
                    FROM    DesMutiSign dms
                            LEFT JOIN DesMutiSignRec dmr ON dms.Id = dmr.MutiSignId
                            LEFT JOIN Flow f ON f.FlowRefID = dms.Id
                                                AND f.FlowRefTable = 'DesMutiSign'
                            INNER JOIN dbo.DesTask s ON s.Id = dms.TaskId
                            INNER JOIN dbo.DesTaskGroup g ON s.TaskGroupId = g.Id
                    WHERE   f.FlowStatusID = 3
                            AND g.DeleterEmpId = 0
				            AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND s.DeleterEmpId = 0
				            AND s.TaskStatus NOT IN (3) -- 任务状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止
                            AND dms.DeleterEmpId = 0
                            AND dmr.RecEmpId = @SessionEmpId
                            AND dmr.RecStatus = 0 -- 接收状态： 0 未接收 1 不同意 2 通过

                    ) AS t
                WHERE   1 = 1 
            ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@SessionEmpId",SqlDbType.Int),
                new SqlParameter("@NodeTypeDesign",SqlDbType.Int),
                new SqlParameter("@NodeStatusWaiting",SqlDbType.Int),
                new SqlParameter("@NodeStatusNow",SqlDbType.Int),
                new SqlParameter("@DesTaskRemindPermission",SqlDbType.Int)
            };

            paras[0].Value = "";
            paras[1].Value = SessionEmpId;
            paras[2].Value = (int)DataModel.NodeType.设计;
            paras[3].Value = (int)FlowNodeStatus.已安排;
            paras[4].Value = (int)FlowNodeStatus.进行中;

            var trp = 0;
            if (taskRemindPermission.PlanTableList) trp = trp | 1;
            if (taskRemindPermission.ProjectPlanList) trp = trp | 2;
            if (taskRemindPermission.SpecPlanList) trp = trp | 4;
            paras[5].Value = trp;

            if (String.Format("{0},{1}", FlowNodeStatus.已安排.ToString("D"), FlowNodeStatus.进行中.ToString("D")) == ItemStatus)
            {
                sql = sql.Replace("【ItemStatus1】", ItemStatus);
                sql = sql.Replace("【ItemStatus2】", @"@FlowNodeStatus=sql:variable(""@NodeStatusWaiting"") or @FlowNodeStatus=sql:variable(""@NodeStatusNow"")");
            }
            else
            {
                sql = sql.Replace("【ItemStatus1】", ItemStatus);
                sql = sql.Replace("【ItemStatus2】", String.Format(@"@FlowNodeStatus=""{0}""", ItemStatus));
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, sql.ToString(), paras);

            if (obj == null && obj == DBNull.Value)
                return 0;
            else
                return Convert.ToInt32(obj);
        }

        /// <summary>
        /// 获取 个人生产任务 列表
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable GetTaskWorkList(Common.SqlPageInfo condition)
        {
            string RowColumn = @"
                t.ItemPath1,
                t.ItemPath2,
                t.ItemName,
                t.ItemEmpName,
                t.ItemStatus,
                t.DatePlanStart,
                t.DatePlanFinish,
                t.DateActualFinish,
                t.ItemType,
                t.ItemAction,
                t.ProjId,
                t.TaskGroupId,
                t.TaskSpecId,
                t.TaskId,
                t.TabId,
                t.ProjTypeID
            ";

            string sql = (@"
                SELECT  Count(1) 
                FROM
                (
                    -- 获取 代办项目策划
		            SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            '[]' AS 'ItemPath2',
                            g.TaskGroupName AS 'ItemName',
                            g.TaskGroupEmpName AS 'ItemEmpName', -- 执行人
                            g.TaskStatus AS 'ItemStatus',
                            g.DatePlanStart,
                            g.DatePlanFinish,
                            g.DateActualFinish,
                            1 AS 'ItemType',
                            '项目策划' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            0 AS TaskSpecId,
				            0 AS TaskId,
				            CASE WHEN (@DesTaskRemindPermission & 1) = 1 THEN 0 WHEN (@DesTaskRemindPermission & 2) = 2 THEN 1 ELSE 1 END AS TabId,
                            p.ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                    WHERE   p.DeleterEmpId = 0 and p.BridgeGuid<>'00000000-0000-0000-0000-000000000000'
                            AND g.DeleterEmpId = 0
                            AND g.TaskGroupType = 1 -- 分组类型 0 开始 1 阶段 2 分组
				            【GroupStatus】
				            AND g.TaskStatus IN (【ItemStatus1】) -- 阶段状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
				            AND g.TaskGroupEmpID = @SessionEmpId
                            AND ((@DesTaskRemindPermission & 1) = 1 OR (@DesTaskRemindPermission & 2) = 2)

		            UNION ALL

		            -- 获取 代办专业策划
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            s.TaskName AS 'ItemName',
                            s.TaskEmpName AS 'ItemEmpName', -- 执行人
                            s.TaskStatus AS 'ItemStatus',
                            s.DatePlanStart,
                            s.DatePlanFinish,
                            s.DateActualFinish,
                            2 AS 'ItemType',
                            '专业策划' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            s.TaskSpecId AS TaskSpecId,
                            s.Id AS TaskId,
				            3 AS TabId,
                            p.ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            【GroupStatus】
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 1 -- 任务类型： 0 普通任务 1 专业任务
				            AND s.TaskStatus IN (【ItemStatus1】) -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
				            AND s.TaskEmpID = @SessionEmpId
                            AND (@DesTaskRemindPermission & 4) = 4
                            AND ( s.TaskSpecId NOT IN ( SELECT  BaseID
                                                        FROM    dbo.BaseData
                                                        WHERE   BaseName = '勘测' )
                                    OR ( s.TaskSpecId IN ( SELECT BaseID
                                                            FROM   dbo.BaseData
                                                            WHERE  BaseName = '勘测' )
                                        AND ( ( ( CAST(s.ProjId AS VARCHAR(10)) + '_'
                                                    + CAST(s.TaskPhaseId AS VARCHAR(10)) ) IN (
                                                SELECT   CAST(iso.ProjID AS VARCHAR(10)) + '_'
                                                        + CAST(iso.ProjPhaseId AS VARCHAR(10))
                                                FROM     dbo.IsoGCCLTJD iso
                                                WHERE    iso.DeleterEmpId = 0
                                                        AND ( iso.ProjID = s.ProjId
                                                                AND iso.ProjPhaseId = s.TaskPhaseId
                                                            ) )
                                                OR s.TaskGroupId IN ( SELECT iso.EngineeringId
                                                                        FROM   dbo.IsoGCCLTJD iso
                                                                        WHERE  iso.DeleterEmpId = 0 )
                                                )
                                                OR ( ( CAST(s.ProjId AS VARCHAR(10)) + '_'
                                                    + CAST(s.TaskPhaseId AS VARCHAR(10)) ) IN (
                                                    SELECT    CAST(iso.ProjID AS VARCHAR(10)) + '_'
                                                            + CAST(iso.ProjPhaseId AS VARCHAR(10))
                                                    FROM      dbo.IsoGCDZKCTJDJZ iso
                                                    WHERE     iso.DeleterEmpId = 0
                                                            AND ( iso.ProjID = s.ProjId
                                                                    AND iso.ProjPhaseId = s.TaskPhaseId
                                                                ) )
                                                    OR s.TaskGroupId IN (
                                                    SELECT    iso.EngineeringId
                                                    FROM      dbo.IsoGCDZKCTJDJZ iso
                                                    WHERE     iso.DeleterEmpId = 0 )
                                                )
                                            )
                                        )
                                )
                                

		            UNION ALL

		            -- 获取 代办设计任务
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            s.TaskName AS 'ItemName',
                            s.TaskEmpName AS 'ItemEmpName', -- 执行人
                            s.TaskStatus AS 'ItemStatus',
                            s.DatePlanStart,
                            s.DatePlanFinish,
                            s.DateActualFinish,
                            3 AS 'ItemType',
                            '提交设计' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            s.TaskSpecId AS TaskSpecId,
                            s.Id AS TaskId,
				            0 AS TabId,
                            0 AS ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            【GroupStatus】
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
                            -- 任务负责人是我 -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                            AND s.TaskEmpID = @SessionEmpId AND s.TaskStatus IN (【ItemStatus1】) 
                            AND (
								--直接显示非数字的任务
								ISNUMERIC(s.TaskNumber) = 0 
								OR
									--如果不是勘察等专业则直接显示
									s.TaskSpecId ! = 1548
								OR
								(
									--显示勘察专业中tasknumber最小的第一个未完成任务
									ISNUMERIC(s.TaskNumber) = 1 AND s.TaskSpecId = 1548
									AND (SELECT TOP 1 Id FROM destask ds WHERE ds.TaskStatus = 2 AND ds.DeleterEmpId = 0 and taskgroupId = s.TaskGroupId AND TaskSpecId = s.TaskSpecId AND ISNUMERIC(ds.TaskNumber) = 1 ORDER BY CAST(ds.TaskNumber AS FLOAT),ds.Id) = s.Id
								)
                            )

		            UNION ALL

		            -- 获取 代办校审任务
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            s.TaskName AS 'ItemName',
                            s.TaskEmpName AS 'ItemEmpName', -- 执行人
                            s.TaskStatus AS 'ItemStatus',
                            s.DatePlanStart,
                            s.DatePlanFinish,
                            s.DateActualFinish,
                            4 AS 'ItemType',
                            '设计校审' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            s.TaskSpecId AS TaskSpecId,
                            s.Id AS TaskId,
				            0 AS TabId,
                            0 AS ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				           【GroupStatus】
				            AND (s.TaskStatus NOT IN (3) OR (s.TaskStatus IN (3) AND 3 IN (【ItemStatus1】)) ) -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
                            -- 本任务附件流程中 有 安排到 轮到 我的
                            AND EXISTS ( 
                                SELECT  ba.AttachID
                                FROM    BaseAttach AS ba
                                        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                                        AND ba.AttachRefID = s.Id
										-- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                                        AND ta.AttachFlowNode.exist('(/root/item[@FlowNodeTypeID != 0 and @FlowNodeTypeID != sql:variable(""@NodeTypeDesign"") and @FlowNodeEmpID = sql:variable(""@SessionEmpId"") and (【ItemStatus2】)])') = 1
                            )
                    
                    UNION ALL

                    -- 待办 会签 任务
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            '会签给 → ' + dmr.RecSpecName + '：' + dms.MutiSignTitle AS ItemName ,
                            dmr.RecEmpName AS ItemEmpName ,
                            2 AS 'ItemStatus',
                            dmr.RecTime AS DatePlanStart ,
                            '1900-01-01' AS DatePlanFinish ,
                            dmr.RecDealDate AS DateActualFinish ,
                            5 AS ItemType ,
                            '会签任务' AS ItemAction ,
                            dms.ProjId AS ProjId ,
                            dmr.Id AS TaskGroupId ,
                            0 AS TaskSpecId,
                            dms.TaskId AS TaskId ,
                            dms.Id as TabId,
                            0 AS ProjTypeID
                    FROM    DesMutiSign dms
                            LEFT JOIN DesMutiSignRec dmr ON dms.Id = dmr.MutiSignId
                            LEFT JOIN Flow f ON f.FlowRefID = dms.Id
                                                AND f.FlowRefTable = 'DesMutiSign'
                            INNER JOIN dbo.DesTask s ON s.Id = dms.TaskId
                            INNER JOIN dbo.DesTaskGroup g ON s.TaskGroupId = g.Id
                    WHERE   f.FlowStatusID = 3
                            AND g.DeleterEmpId = 0
				            【GroupStatus】
                            AND s.DeleterEmpId = 0
				            AND s.TaskStatus NOT IN (3) -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                            AND dms.DeleterEmpId = 0
                            AND dmr.RecEmpId = @SessionEmpId
                            AND dmr.RecStatus = 0 -- 接收状态： 0 未接收 1 不同意 2 通过
                ) AS t
                WHERE   1 = 1 
            ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@SessionEmpId",SqlDbType.Int),
                new SqlParameter("@NodeTypeDesign",SqlDbType.Int),
                new SqlParameter("@NodeStatusWaiting",SqlDbType.Int),
                new SqlParameter("@NodeStatusNow",SqlDbType.Int),
                new SqlParameter("@DesTaskRemindPermission",SqlDbType.Int),
                new SqlParameter("@ItemType",SqlDbType.Int)
            };

            paras[2].Value = (int)NodeType.设计;
            paras[3].Value = (int)FlowNodeStatus.已安排;
            paras[4].Value = (int)FlowNodeStatus.进行中;

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "SessionEmpId":
                            if (de.Value.ToString() != "")
                            {
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            else
                            {
                                paras[1].Value = "0";
                            }
                            break;
                        case "ItemStatus":
                            if (String.Format("{0},{1}", FlowNodeStatus.已安排.ToString("D"), FlowNodeStatus.进行中.ToString("D")) == de.Value.ToString())
                            {
                                sql = sql.Replace("【ItemStatus1】", String.Format("{0}", de.Value.ToString()));
                                sql = sql.Replace("【ItemStatus2】", @"@FlowNodeStatus=sql:variable(""@NodeStatusWaiting"") or @FlowNodeStatus=sql:variable(""@NodeStatusNow"")");
                            }
                            else
                            {
                                sql = sql.Replace("【ItemStatus1】", String.Format("{0}", de.Value.ToString()));
                                sql = sql.Replace("【ItemStatus2】", String.Format(@"@FlowNodeStatus=""{0}""", de.Value.ToString()));
                            }
                            break;
                        case "ShowAll":
                            if (de.Value.ToString() == "1")
                            {
                                sql = sql.Replace("【GroupStatus】", "");
                            }
                            else
                            {
                                sql = sql.Replace("【GroupStatus】", " AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止 ");
                            }
                            break;
                        case "DesTaskRemindPermission":
                            var n = 0;
                            var p = (DesTaskRemindPermission)de.Value;
                            if (p.PlanTableList) n = n | 1;
                            if (p.ProjectPlanList) n = n | 2;
                            if (p.SpecPlanList) n = n | 4;
                            paras[5].Value = n;
                            break;
                        case "ItemType":
                            if (de.Value.ToString() != "0")
                            {
                                sql += " and ItemType = @ItemType ";
                                paras[6].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "taskGroupId":
                            if (de.Value.ToString() != "0")
                            {
                                sql += " and TaskGroupId = " + de.Value;
                            }
                            break;
                        case "ProjId":
                            if (de.Value.ToString() != "0")
                            {
                                sql += " and t.ProjId= " + de.Value;
                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            StringBuilder strSql = new StringBuilder();
            strSql.Append(sql);

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" AND (t.ItemPath1 like '%'+@TextCondtion+'%' OR t.ItemPath2 like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = " t.ProjId DESC, t.TaskGroupId DESC, t.ItemPath2 ASC, t.ItemType ASC  ";
            }

            string sqlpage = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sqlpage, paras);

        }


        public DataTable GetTaskWorkList1(Common.SqlPageInfo condition)
        {
            string RowColumn = @"
                t.ItemPath1,
                t.ItemPath2,
                t.ItemName,
                t.ItemEmpName,
                t.ItemStatus,
                t.DatePlanStart,
                t.DatePlanFinish,
                t.DateActualFinish,
                t.ItemType,
                t.ItemAction,
                t.ProjId,
                t.TaskGroupId,
                t.TaskSpecId,
                t.TaskId,
                t.TabId,
                t.ProjTypeID
            ";

            string sql = (@"
                SELECT  Count(1) 
                FROM
                (
                    -- 获取 代办项目策划
		            SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            '[]' AS 'ItemPath2',
                            g.TaskGroupName AS 'ItemName',
                            g.TaskGroupEmpName AS 'ItemEmpName', -- 执行人
                            g.TaskStatus AS 'ItemStatus',
                            g.DatePlanStart,
                            g.DatePlanFinish,
                            g.DateActualFinish,
                            1 AS 'ItemType',
                            '项目策划' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            0 AS TaskSpecId,
				            0 AS TaskId,
				            CASE WHEN (@DesTaskRemindPermission & 1) = 1 THEN 0 WHEN (@DesTaskRemindPermission & 2) = 2 THEN 1 ELSE 1 END AS TabId,
                            p.ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                    WHERE   p.DeleterEmpId = 0 and p.BridgeGuid<>'00000000-0000-0000-0000-000000000000'
                            AND g.DeleterEmpId = 0
                            AND g.TaskGroupType = 1 -- 分组类型 0 开始 1 阶段 2 分组
				            【GroupStatus】
				            AND g.TaskStatus IN (【ItemStatus1】) -- 阶段状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
				            AND g.TaskGroupEmpID = @SessionEmpId
                            AND ((@DesTaskRemindPermission & 1) = 1 OR (@DesTaskRemindPermission & 2) = 2)

		            UNION ALL

		            -- 获取 代办专业策划
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            s.TaskName AS 'ItemName',
                            s.TaskEmpName AS 'ItemEmpName', -- 执行人
                            s.TaskStatus AS 'ItemStatus',
                            s.DatePlanStart,
                            s.DatePlanFinish,
                            s.DateActualFinish,
                            2 AS 'ItemType',
                            '专业策划' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            s.TaskSpecId AS TaskSpecId,
                            s.Id AS TaskId,
				            3 AS TabId,
                            p.ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            【GroupStatus】
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 1 -- 任务类型： 0 普通任务 1 专业任务
				            AND s.TaskStatus IN (【ItemStatus1】) -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
				            AND s.TaskEmpID = @SessionEmpId
                            AND (@DesTaskRemindPermission & 4) = 4
                            AND ( s.TaskSpecId NOT IN ( SELECT  BaseID
                                                        FROM    dbo.BaseData
                                                        WHERE   BaseName = '勘测' )
                                    OR ( s.TaskSpecId IN ( SELECT BaseID
                                                            FROM   dbo.BaseData
                                                            WHERE  BaseName = '勘测' )
                                        AND ( ( ( CAST(s.ProjId AS VARCHAR(10)) + '_'
                                                    + CAST(s.TaskPhaseId AS VARCHAR(10)) ) IN (
                                                SELECT   CAST(iso.ProjID AS VARCHAR(10)) + '_'
                                                        + CAST(iso.ProjPhaseId AS VARCHAR(10))
                                                FROM     dbo.IsoGCCLTJD iso
                                                WHERE    iso.DeleterEmpId = 0
                                                        AND ( iso.ProjID = s.ProjId
                                                                AND iso.ProjPhaseId = s.TaskPhaseId
                                                            ) )
                                                OR s.TaskGroupId IN ( SELECT iso.EngineeringId
                                                                        FROM   dbo.IsoGCCLTJD iso
                                                                        WHERE  iso.DeleterEmpId = 0 )
                                                )
                                                OR ( ( CAST(s.ProjId AS VARCHAR(10)) + '_'
                                                    + CAST(s.TaskPhaseId AS VARCHAR(10)) ) IN (
                                                    SELECT    CAST(iso.ProjID AS VARCHAR(10)) + '_'
                                                            + CAST(iso.ProjPhaseId AS VARCHAR(10))
                                                    FROM      dbo.IsoGCDZKCTJDJZ iso
                                                    WHERE     iso.DeleterEmpId = 0
                                                            AND ( iso.ProjID = s.ProjId
                                                                    AND iso.ProjPhaseId = s.TaskPhaseId
                                                                ) )
                                                    OR s.TaskGroupId IN (
                                                    SELECT    iso.EngineeringId
                                                    FROM      dbo.IsoGCDZKCTJDJZ iso
                                                    WHERE     iso.DeleterEmpId = 0 )
                                                )
                                            )
                                        )
                                )
                                

		            UNION ALL

		            -- 获取 代办设计任务
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            s.TaskName AS 'ItemName',
                            s.TaskEmpName AS 'ItemEmpName', -- 执行人
                            s.TaskStatus AS 'ItemStatus',
                            s.DatePlanStart,
                            s.DatePlanFinish,
                            s.DateActualFinish,
                            3 AS 'ItemType',
                            '提交设计' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            s.TaskSpecId AS TaskSpecId,
                            s.Id AS TaskId,
				            0 AS TabId,
                            0 AS ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				            【GroupStatus】
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
                            -- 任务负责人是我 -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                            AND s.TaskEmpID = @SessionEmpId AND s.TaskStatus IN (【ItemStatus1】) 
                            

		            UNION ALL

		            -- 获取 代办校审任务
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            s.TaskName AS 'ItemName',
                            s.TaskEmpName AS 'ItemEmpName', -- 执行人
                            s.TaskStatus AS 'ItemStatus',
                            s.DatePlanStart,
                            s.DatePlanFinish,
                            s.DateActualFinish,
                            4 AS 'ItemType',
                            '设计校审' AS 'ItemAction',
				            p.Id AS ProjId,
                            g.Id AS TaskGroupId,
                            s.TaskSpecId AS TaskSpecId,
                            s.Id AS TaskId,
				            0 AS TabId,
                            0 AS ProjTypeID
                    FROM    dbo.Project p
                            INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                            INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                    WHERE   p.DeleterEmpId = 0
                            AND g.DeleterEmpId = 0
				           【GroupStatus】
				            AND (s.TaskStatus NOT IN (3) OR (s.TaskStatus IN (3) AND 3 IN (【ItemStatus1】)) ) -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                            AND s.DeleterEmpId = 0
                            AND s.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
                            -- 本任务附件流程中 有 安排到 轮到 我的
                            AND EXISTS ( 
                                SELECT  ba.AttachID
                                FROM    BaseAttach AS ba
                                        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                                        AND ba.AttachRefID = s.Id
										-- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                                        AND ta.AttachFlowNode.exist('(/root/item[@FlowNodeTypeID != 0 and @FlowNodeTypeID != sql:variable(""@NodeTypeDesign"") and @FlowNodeEmpID = sql:variable(""@SessionEmpId"") and (【ItemStatus2】)])') = 1
                            )
                    
                    UNION ALL

                    -- 待办 会签 任务
                    SELECT  dbo.F_GetDesTaskGroupPathJson(g.Id) AS 'ItemPath1',
				            dbo.F_GetDesTaskPathJson(s.Id) AS 'ItemPath2',
                            '会签给 → ' + dmr.RecSpecName + '：' + dms.MutiSignTitle AS ItemName ,
                            dmr.RecEmpName AS ItemEmpName ,
                            2 AS 'ItemStatus',
                            dmr.RecTime AS DatePlanStart ,
                            '1900-01-01' AS DatePlanFinish ,
                            dmr.RecDealDate AS DateActualFinish ,
                            5 AS ItemType ,
                            '会签任务' AS ItemAction ,
                            dms.ProjId AS ProjId ,
                            dmr.Id AS TaskGroupId ,
                            0 AS TaskSpecId,
                            dms.TaskId AS TaskId ,
                            dms.Id as TabId,
                            0 AS ProjTypeID
                    FROM    DesMutiSign dms
                            LEFT JOIN DesMutiSignRec dmr ON dms.Id = dmr.MutiSignId
                            LEFT JOIN Flow f ON f.FlowRefID = dms.Id
                                                AND f.FlowRefTable = 'DesMutiSign'
                            INNER JOIN dbo.DesTask s ON s.Id = dms.TaskId
                            INNER JOIN dbo.DesTaskGroup g ON s.TaskGroupId = g.Id
                    WHERE   f.FlowStatusID = 3
                            AND g.DeleterEmpId = 0
				            【GroupStatus】
                            AND s.DeleterEmpId = 0
				            AND s.TaskStatus NOT IN (3) -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 退回（红色）
                            AND dms.DeleterEmpId = 0
                            AND dmr.RecEmpId = @SessionEmpId
                            AND dmr.RecStatus = 0 -- 接收状态： 0 未接收 1 不同意 2 通过
                ) AS t
                WHERE   1 = 1 
            ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@SessionEmpId",SqlDbType.Int),
                new SqlParameter("@NodeTypeDesign",SqlDbType.Int),
                new SqlParameter("@NodeStatusWaiting",SqlDbType.Int),
                new SqlParameter("@NodeStatusNow",SqlDbType.Int),
                new SqlParameter("@DesTaskRemindPermission",SqlDbType.Int),
                new SqlParameter("@ItemType",SqlDbType.Int)
            };

            paras[2].Value = (int)NodeType.设计;
            paras[3].Value = (int)FlowNodeStatus.已安排;
            paras[4].Value = (int)FlowNodeStatus.进行中;

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "SessionEmpId":
                            if (de.Value.ToString() != "")
                            {
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            else
                            {
                                paras[1].Value = "0";
                            }
                            break;
                        case "ItemStatus":
                            if (String.Format("{0},{1}", FlowNodeStatus.已安排.ToString("D"), FlowNodeStatus.进行中.ToString("D")) == de.Value.ToString())
                            {
                                sql = sql.Replace("【ItemStatus1】", String.Format("{0}", de.Value.ToString()));
                                sql = sql.Replace("【ItemStatus2】", @"@FlowNodeStatus=sql:variable(""@NodeStatusWaiting"") or @FlowNodeStatus=sql:variable(""@NodeStatusNow"")");
                            }
                            else
                            {
                                sql = sql.Replace("【ItemStatus1】", String.Format("{0}", de.Value.ToString()));
                                sql = sql.Replace("【ItemStatus2】", String.Format(@"@FlowNodeStatus=""{0}""", de.Value.ToString()));
                            }
                            break;
                        case "ShowAll":
                            if (de.Value.ToString() == "1")
                            {
                                sql = sql.Replace("【GroupStatus】", "");
                            }
                            else
                            {
                                sql = sql.Replace("【GroupStatus】", " AND g.TaskGroupStatus = @NodeStatusNow -- 阶段状态：0 未启动 1 已轮到 2 进行中 3 已完成 4 停止 ");
                            }
                            break;
                        case "DesTaskRemindPermission":
                            var n = 0;
                            var p = (DesTaskRemindPermission)de.Value;
                            if (p.PlanTableList) n = n | 1;
                            if (p.ProjectPlanList) n = n | 2;
                            if (p.SpecPlanList) n = n | 4;
                            paras[5].Value = n;
                            break;
                        case "ItemType":
                            if (de.Value.ToString() != "0")
                            {
                                sql += " and ItemType = @ItemType ";
                                paras[6].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "taskGroupId":
                            if (de.Value.ToString() != "0")
                            {
                                sql += " and TaskGroupId = " + de.Value;
                            }
                            break;
                        case "ProjId":
                            if (de.Value.ToString() != "0")
                            {
                                sql += " and t.ProjId= " + de.Value;
                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            StringBuilder strSql = new StringBuilder();
            strSql.Append(sql);

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" AND (t.ItemPath1 like '%'+@TextCondtion+'%' OR t.ItemPath2 like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = " t.ProjId DESC, t.TaskGroupId DESC, t.ItemPath2 ASC, t.ItemType ASC  ";
            }

            string sqlpage = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sqlpage, paras);

        }
        public DataTable GetNextNode(long taskId)
        {
            string strSql = "SELECT TaskFlowModel.value('(/root/item[@FlowNodeTypeID=20]/@FlowNodeEmpID)[1]','int') EmpId,TaskFlowModel.value('(/root/item[@FlowNodeTypeID=20]/@FlowNodeEmpName)[1]','nvarchar(max)') EmpName FROM dbo.DesTask WHERE Id = " + taskId;
            return DAL.DBExecute.ExecuteDataTable(strSql);
        }

        /**********************任务归档********************/

        /// <summary>
        /// 获取 任务归档路径
        /// </summary>
        /// <param name="TaskId">要归档的任务Id</param>
        public DataTable GetTaskArchPath(long TaskId)
        {
            return this.GetTaskPath(TaskId, true);
        }

        /// <summary>
        /// 获取 任务归档文件
        /// </summary>
        /// <param name="TaskId">要归档的任务Id</param>
        public DataTable GetTaskArchAttach(long TaskId)
        {
            string sql = @"
                -- 获取该任务下所以校审完成附件
                SELECT  ba.AttachID ,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName ,
                        ba.AttachExt ,
				        ba.AttachDir ,
                        ba.AttachOrderPath ,
                        ba.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        ba.AttachVer ,
                        ba.AttachTag ,
                        ba.AttachGrade ,
                        ISNULL(dbo.F_GetBaseAttachPathText(ba.AttachID, '\\'), '') AS AttachPath ,
                        ta.AttachFlowNode
                INTO    #approveAttach
                FROM    dbo.BaseAttach AS ba
                        INNER JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID IN ( @TaskId )
				        -- 节点状态: 0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 停止（红色） 5 回退（橙色）
                        AND NOT ( ta.AttachFlowNode.exist('/root/item[@FlowNodeStatus!=sql:variable(""@FlowNodeStatus"")]') = 1 )



                DECLARE @approveAttachPathIds VARCHAR(MAX)
                SET @approveAttachPathIds = (SELECT    AttachPathIDs + ','
                                                FROM      #approveAttach
                                                WHERE     AttachPathIDs <> ''
                                            FOR
                                                XML PATH('')
                                            )

                SELECT a.*
                FROM(SELECT    ba.AttachID,
                                    ba.AttachParentID AS _parentId,
                                    ba.AttachName,
                                    ba.AttachExt,
				                    ba.AttachDir ,
                                    ba.AttachOrderPath,
                                    ba.AttachPathIDs,
                                    ba.AttachSize,
                                    ba.AttachDateUpload,
                                    ba.AttachDateChange,
                                    ba.AttachEmpID,
                                    ba.AttachEmpName,
                                    ba.AttachVer,
                                    ba.AttachTag,
                                    ba.AttachGrade,
                                    '' AS AttachPath,
                                    '' AS AttachFlowNode

                            FROM      BaseAttach AS ba

                            WHERE     ba.AttachID IN(
                                    SELECT  ID
                                    FROM    dbo.Split(@approveAttachPathIds, ','))

                            UNION ALL

                            SELECT    ba.AttachID,
                                    ba._parentId,
                                    ba.AttachName,
                                    ba.AttachExt,
				                    ba.AttachDir ,
                                    ba.AttachOrderPath,
                                    ba.AttachPathIDs,
                                    ba.AttachSize,
                                    ba.AttachDateUpload,
                                    ba.AttachDateChange,
                                    ba.AttachEmpID,
                                    ba.AttachEmpName,
                                    ba.AttachVer,
                                    ba.AttachTag,
                                    ba.AttachGrade,
                                    ba.AttachPath,
                                    ba.AttachFlowNode

                            FROM      #approveAttach AS ba
                        ) AS a
                ORDER BY a.AttachExt, a.AttachName
		
		        IF OBJECT_ID('tempdb..#approveAttach') IS NOT NULL
                    BEGIN
                        DROP TABLE #approveAttach
                    END
                --END IF
            ";
            SqlParameter[] paras = {
                new SqlParameter("@TaskId",SqlDbType.BigInt),
                new SqlParameter("@FlowNodeStatus", SqlDbType.Int)
            };
            paras[0].Value = TaskId;
            paras[1].Value = (int)FlowNodeStatus.已完成;

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }


        /************************任务进度**********************/

        /// <summary>
        /// 获取 项目进度节点 数据
        /// </summary>
        /// <param name="ProjID"></param>
        /// <param name="TaskGroupId"></param>
        /// <returns></returns>
        public DataTable GetProjectProgress(int ProjID, long TaskGroupId)
        {
            string sql = @"
                -- 项目层级树 （从项目ID向下搜）

                SELECT  'Project' AS 'Type' ,
                        p.Id AS 'Id' ,
                        'P' + CAST(p.Id AS NVARCHAR) AS 'RefId', 
                        '[' + p.ProjNumber + ']' + p.ProjName AS 'Name' ,
                        Case  
                            When p.Id = @ProjID Then 'P0' 
                            Else 'P' + CAST(p.ParentId AS NVARCHAR)
                        End AS 'ParentId' ,
                        p.ProjEmpId AS 'EmpId' ,
                        p.ProjEmpName AS 'EmpName' ,
                        p.DatePlanStart ,
                        p.DatePlanFinish ,
                        '1900-01-01' AS 'DateActualStart' ,
                        '1900-01-01' AS 'DateActualFinish',
                        '1900-01-01' AS 'DateForPrint' ,
                        '1900-01-01' AS 'DateForPublish' ,
                        '1900-01-01' AS 'DateForArchive',		
                        3 AS 'Status',
                        Cast(p.Id AS varchar) AS 'Order1',
                        '0' AS 'Order2'
                INTO    #Directory1
                FROM    dbo.Project AS p
                WHERE   p.DeleterEmpId = 0				
                        AND ( '/' + p.ColAttVal2 + CAST(p.Id AS VARCHAR) + '/' LIKE '%/'
                              + CAST(@ProjID AS VARCHAR) + '/%' )

                SELECT  CASE 
							--WHEN g.TaskGroupType = 0 THEN 'Project'
							WHEN g.TaskGroupType = 1 THEN 'ProjPhase'
							WHEN g.TaskGroupType = 2 THEN 'TaskGroup'
						END AS 'Type' ,
                        g.Id AS 'Id' ,
                        'G' + CAST(g.Id AS NVARCHAR) AS 'RefId', 
                        g.TaskGroupName AS 'Name' ,
                        CASE 
                            WHEN g.TaskGroupType = 1 THEN 'P' + CAST(g.ProjId AS NVARCHAR)
						    ELSE 'G' + CAST(g.TaskGroupParentId AS NVARCHAR) 
                        END AS 'ParentId' ,
                        g.TaskGroupEmpID AS 'EmpId' ,
                        g.TaskGroupEmpName AS 'EmpName' ,
                        g.DatePlanStart ,
                        g.DatePlanFinish ,
                        g.DateActualStart ,
                        g.DateActualFinish ,
                        '1900-01-01' AS 'DateForPrint' ,
                        '1900-01-01' AS 'DateForPublish' ,
                        '1900-01-01' AS 'DateForArchive',	
				        g.TaskStatus AS 'Status',
                        g.TaskGroupPath AS 'Order1',
                        '0' AS 'Order2'
                INTO    #Directory2
                FROM    dbo.DesTaskGroup AS g
                WHERE   g.DeleterEmpId = 0
                        AND g.TaskGroupType <> 0
                        AND g.ProjId IN ( SELECT    Id
                                          FROM      #Directory1 )
                ORDER BY g.TaskGroupPath

                SELECT  CASE 
							WHEN t.TaskType = 1 THEN 'TaskSpec' 
							WHEN t.TaskType = 0 AND TaskLevelType = 2 THEN 'TaskPath' 
							WHEN t.TaskType = 0 THEN 'Task' 
						END AS 'Type' ,
                        t.Id AS 'Id' ,
                        'T' + CAST(t.Id AS NVARCHAR) AS 'RefId', 
                        t.TaskName AS 'Name' ,
                        CASE 
                            WHEN t.TaskType = 1 THEN 'G' + CAST(t.TaskGroupId AS NVARCHAR)
						    WHEN t.TaskType = 0 THEN 'T' + CAST(t.TaskParentId AS NVARCHAR) 
                        END AS 'ParentId' ,
                        t.TaskEmpID AS 'EmpId' ,
                        t.TaskEmpName AS 'EmpName' ,
                        t.DatePlanStart ,
                        t.DatePlanFinish ,
                        t.DateActualStart ,
                        t.DateActualFinish ,
                        t.DateForPrint ,
                        t.DateForPublish ,
                        t.DateForArchive ,	
				        t.TaskStatus AS 'Status', 
                        CASE t.TaskSpecId WHEN 0 THEN '1' ELSE '0' END AS 'Order1', 
                        t.TaskPath AS 'Order2'
                INTO    #Directory3
                FROM    dbo.DesTask AS t
                WHERE   t.DeleterEmpId = 0
                        AND t.TaskGroupId IN ( SELECT   Id
                                               FROM     #Directory2 )

                SELECT  *
                FROM    #Directory1
                UNION ALL
                SELECT  *
                FROM    #Directory2
                UNION ALL
                SELECT  *
                FROM    #Directory3

                IF OBJECT_ID('tempdb..#Directory1') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory1
                    END
                --END IF

                IF OBJECT_ID('tempdb..#Directory2') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory2
                    END
                --END IF

                IF OBJECT_ID('tempdb..#Directory3') IS NOT NULL
                    BEGIN
                        DROP TABLE #Directory3
                    END
                --END IF
            ";
            SqlParameter[] paras = {
                new SqlParameter("@ProjID",SqlDbType.Int),
                new SqlParameter("@TaskGroupId",SqlDbType.BigInt)
            };
            paras[0].Value = ProjID;
            paras[1].Value = TaskGroupId;

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 获取 项目策划进度 数据
        /// </summary>
        /// <param name="projId"></param>
        /// <param name="taskGroupId"></param>
        /// <param name="taskId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetSpecPlanProgress(int projId, long taskGroupId)
        {
            string sql = @"
                -- 获取 专业策划数据
		        SELECT  -[Id] AS [Id] ,
                        0 AS _parentId ,
				        ISNULL(dbo.F_GetDesTaskGroupPathJson(Id), '') AS GroupPathJson ,					
                        0 as TaskLevel ,
                        '' as TaskOrderNum ,
                        TaskGroupPath as TaskPath ,
                        '' as TaskPathIds ,
                        2 as TaskLevelType , -- 层级类型：0 无层级 1 子层级 2 父层级
                        1 as TaskType ,
                        ProjId ,
                        TaskGroupParentId as TaskParentId ,
                        TaskGroupPhaseId as TaskPhaseId ,
                        Id as TaskGroupId ,
                        0 as TaskSpecId ,
                        TaskGroupName as TaskName ,
                        0 as TaskPriority ,
                        TaskGroupStatus as TaskStatus ,
                        TaskGroupEmpID as TaskEmpID ,
                        TaskGroupEmpName as TaskEmpName ,
				        DatePlanStart,
				        DatePlanFinish,
                        0 as FlowId ,
                        '' as TaskFlowModel,
				        0 as TaskNextFlowNodeId,
                        '' as TaskNote
		        into	#Table2016101709_1
		        FROM	DesTaskGroup
		        WHERE	DeleterEmpId = 0
				        AND TaskGroupType NOT IN (0) -- 分组类型 0 开始 1 阶段 2 分组
				        AND ProjId = @ProjID2016101707
                        AND (Id = @TaskGroupId2016101707 OR 0 = @TaskGroupId2016101707)
		        ORDER BY TaskGroupPath

                SELECT  Id ,
                        Case TaskParentId When 0 Then -TaskGroupId Else TaskParentId End AS _parentId ,
				        '' as GroupPathJson,
                        TaskLevel ,
                        TaskOrderNum ,
                        TaskPath ,
                        TaskPathIds ,
                        Case TaskParentId When 0 Then 2 Else TaskLevelType End AS TaskLevelType ,
                        TaskType ,
                        ProjId ,
                        TaskParentId ,
                        TaskPhaseId ,
                        TaskGroupId ,
                        TaskSpecId ,
                        TaskName ,
                        TaskPriority ,
                        TaskStatus ,
                        TaskEmpID ,
                        TaskEmpName ,
				        DatePlanStart,
				        DatePlanFinish,
                        FlowId ,
                        TaskFlowModel,
				        TaskNextFlowNodeId,
                        TaskNote
		        INTO	#Table2016101709_2
                FROM    dbo.DesTask
                WHERE   DeleterEmpId = 0
				        AND ProjId = @ProjID2016101707
                        AND (TaskGroupId = @TaskGroupId2016101707 OR 0 = @TaskGroupId2016101707)
                ORDER BY (CASE TaskSpecId WHEN 0 THEN 1 ELSE 0 END), TaskPath


		        SELECT  *
                FROM    #Table2016101709_1
                UNION ALL
                SELECT  *
                FROM    #Table2016101709_2

                IF OBJECT_ID('tempdb..#Table2016101709_1') IS NOT NULL
                    BEGIN
                        DROP TABLE #Table2016101709_1
                    END
                --END IF

                IF OBJECT_ID('tempdb..#Table2016101709_2') IS NOT NULL
                    BEGIN
                        DROP TABLE #Table2016101709_2
                    END
                --END IF
            ";

            SqlParameter[] paras = {
                new SqlParameter("@ProjID2016101707",SqlDbType.Int),
                new SqlParameter("@TaskGroupId2016101707",SqlDbType.BigInt)
            };
            paras[0].Value = projId;
            paras[1].Value = taskGroupId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var r = dt.AsEnumerable().Select(ba => new
            {
                Id = ba.Field<long>("Id"),
                _parentId = ba.Field<long>("_parentId"),
                iconCls = GetTaskStatusIconCls(ba.Field<int>("TaskStatus")),
                GroupPathJson = ba.Field<string>("GroupPathJson"),
                TaskLevel = ba.Field<int>("TaskLevel"),
                TaskOrderNum = ba.Field<int>("TaskOrderNum"),
                TaskPath = ba.Field<string>("TaskPath"),
                TaskPathIds = ba.Field<string>("TaskPathIds"),
                TaskLevelType = ba.Field<int>("TaskLevelType"),
                TaskType = ba.Field<int>("TaskType"),
                ProjId = ba.Field<int>("ProjId"),
                TaskParentId = ba.Field<long>("TaskParentId"),
                TaskPhaseId = ba.Field<int>("TaskPhaseId"),
                TaskGroupId = ba.Field<long>("TaskGroupId"),
                TaskSpecId = ba.Field<int>("TaskSpecId"),
                TaskName = ba.Field<string>("TaskName"),
                TaskPriority = ba.Field<int>("TaskPriority"),
                TaskStatus = ba.Field<int>("TaskStatus"),
                TaskEmpID = ba.Field<int>("TaskEmpID"),
                TaskEmpName = ba.Field<string>("TaskEmpName"),
                DatePlanStart = ba.Field<DateTime>("DatePlanStart"),
                DatePlanFinish = ba.Field<DateTime>("DatePlanFinish"),
                FlowId = ba.Field<int>("FlowId"),
                TaskFlowModel = ba.Field<string>("TaskFlowModel"),
                TaskFlowModelJson = Common.ModelConvert.Xml2Json(ba.Field<string>("TaskFlowModel")),
                TaskNextFlowNodeId = ba.Field<long>("TaskNextFlowNodeId"),
                TaskNote = ba.Field<string>("TaskNote")
            });

            return r;
        }

        /// <summary>
        /// 获取 任务文件进度 数据
        /// </summary>
        /// <param name="projId"></param>
        /// <param name="taskGroupId"></param>
        /// <param name="taskId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetTaskAttachProgress(int projId, long taskGroupId, long taskId)
        {
            string sql = @"
                SELECT  -[Id] AS AttachID ,
                        [Id] AS AttachRefID ,
                        0 AS _parentId ,
				        ISNULL(dbo.F_GetDesTaskGroupPathJson(TaskGroupId), '') AS AttachGroup,
                        dbo.F_GetDesTaskPathJson(Id) AS AttachName ,
                        '.' AS AttachExt ,
                        '' AS AttachOrderPath ,
                        '' AS AttachPathIDs ,
                        0 AS AttachSize ,
                        CAST('1900-01-01' AS DATETIME) AS AttachDateUpload ,
                        CAST('1900-01-01' AS DATETIME) AS AttachDateChange ,
                        TaskEmpID AS AttachEmpID ,
                        TaskEmpName AS AttachEmpName ,
                        1 AS AttachVer ,
                        '' AS AttachTag ,
                        0 AS AttachGrade,
                        '' AS AttachFlowNode,
                        '' AS AttachPath
		        INTO #Table20161011_1
                FROM    dbo.DesTask LEFT JOIN dbo.BaseData ON dbo.DesTask.TaskSpecId = dbo.BaseData.BaseID
                WHERE   DeleterEmpId = 0
                        AND TaskType = 0
                        AND ProjId = @ProjId20161011
                        AND (TaskGroupId = @TaskGroupId20161011 OR 0 = @TaskGroupId20161011)
				        AND (Id = @TaskId20161011 OR 0 = @TaskId20161011)
		        ORDER BY BaseOrder, TaskPath

                SELECT  ba.AttachID ,
                        ba.AttachRefID ,
                        CASE ba.AttachParentID
                          WHEN 0 THEN -ba.[AttachRefID]
                          ELSE ba.AttachParentID
                        END AS _parentId ,
				        '' AS AttachGroup,
                        ba.AttachName ,
                        ba.AttachExt ,
                        ba.AttachOrderPath ,
                        ba.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        ba.AttachVer ,
                        ba.AttachTag ,
                        ba.AttachGrade,
                        ta.AttachFlowNode,
                        ISNULL(dbo.F_GetBaseAttachPathText(ba.AttachID, '\\'), '') AS AttachPath
		        INTO #Table20161011_2
                FROM    dbo.BaseAttach AS ba
                        LEFT JOIN dbo.DesTaskAttachEx ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID IN (
                        SELECT  Id
                        FROM    dbo.DesTask
                        WHERE   DeleterEmpId = 0
                                AND TaskType = 0 
                                AND ProjId = @ProjId20161011
                                AND (TaskGroupId = @TaskGroupId20161011 OR 0 = @TaskGroupId20161011)
						        AND (Id = @TaskId20161011 OR 0 = @TaskId20161011)
				        )
		        ORDER BY ba.AttachExt, ba.AttachName

		        SELECT  *
                FROM    #Table20161011_1
                UNION ALL
                SELECT  *
                FROM    #Table20161011_2

                IF OBJECT_ID('tempdb..#Table20161011_1') IS NOT NULL
                    BEGIN
                        DROP TABLE #Table20161011_1
                    END
                --END IF

                IF OBJECT_ID('tempdb..#Table20161011_2') IS NOT NULL
                    BEGIN
                        DROP TABLE #Table20161011_2
                    END
                --END IF
            ";

            SqlParameter[] paras = {
                new SqlParameter("@ProjId20161011",SqlDbType.Int),
                new SqlParameter("@TaskGroupId20161011",SqlDbType.BigInt),
                new SqlParameter("@TaskId20161011",SqlDbType.BigInt)
            };
            paras[0].Value = projId;
            paras[1].Value = taskGroupId;
            paras[2].Value = taskId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var r = dt.AsEnumerable().Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                AttachRefID = ba.Field<long>("AttachRefID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachGroup = ba.Field<string>("AttachGroup"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
                AttachPath = ba.Field<string>("AttachPath"),
                AttachFlowNodeJson = Common.ModelConvert.Xml2Json(ba.Field<string>("AttachFlowNode"))
            });

            return r;
        }

        /// <summary>
        /// 获取 任务开展情况统计列表
        /// </summary>
        /// <returns></returns>
        public DataTable GetTaskProgressList(Common.SqlPageInfo condition)
        {
            string RowColumn = @"
                p.Id as ProjId,
                p.ProjNumber ,
                p.ProjName ,
                ISNULL(g.Id, 0) AS TaskGroupId ,
                ISNULL(g.TaskGroupPhaseId, 0) AS ProjPhaseId ,
                ISNULL(g.TaskGroupName, '') AS ProjPhaseName ,
                ISNULL(g.TaskGroupEmpName, '') AS ProjPhaseEmpName , -- 阶段负责人
                ISNULL(s.Id, 0) AS ProjSpecId ,
                ISNULL(s.TaskName, '') AS ProjSpecName,
                ISNULL(s.TaskEmpName, '') AS ProjSpecEmpName,
                ISNULL(t.Id, 0) AS TaskId ,
                ISNULL(t.TaskNumber, '') AS TaskNumber,
                ISNULL(t.TaskName, '') AS TaskName,
                ISNULL(t.TaskEmpName, '') AS TaskEmpName,
                ISNULL(t.DateActualFinish, '1900-01-01') AS DatePlanFinish, -- 设计完成
                ISNULL(t.DateForPrint, '1900-01-01') AS DateForPrint , -- 出版
                ISNULL(t.DateForPublish, '1900-01-01') AS DateForPublish  -- 交付
            ";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"
                SELECT  Count(1)
                FROM    dbo.Project p
                        INNER JOIN dbo.DesTaskGroup g ON g.ProjId = p.Id
                                                        AND g.DeleterEmpId = 0
                                                        AND g.TaskGroupType = 1 -- 分组类型 0 开始 1 阶段 2 分组
                        INNER JOIN dbo.DesTask s ON s.TaskGroupId = g.Id
                                                   AND s.DeleterEmpId = 0
                                                   AND s.TaskType = 1 -- 任务类型： 0 普通任务 1 专业任务
                        INNER JOIN dbo.DesTask t ON s.Id = t.TaskParentId
                                                   AND t.DeleterEmpId = 0
                                                   AND t.TaskType = 0 -- 任务类型： 0 普通任务 1 专业任务
            ");
            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@TaskDept",SqlDbType.Int),
                new SqlParameter("@TaskEmpID",SqlDbType.Int),
            };

            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" AND (g.ProjNumber like '%'+@TextCondtion+'%' or g.ProjName like '%'+@TextCondtion+'%' ) ");
                paras[0].Value = condition.TextCondtion;
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        //扩展查询列
                        case "OtherColumn":
                            if (de.Value.ToString() != "")
                            {
                                RowColumn += de.Value.ToString();
                            }
                            break;
                        case "TaskDept":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and (select count(pe.id) from DesTaskGroupEmps as pe LEFT JOIN dbo.BaseEmployee AS b ON pe.EmpID=b.empID WHERE pe.ProjId=p.id and  b.EmpDepID=@TaskDept) >0");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "TaskEmpID":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and (select count(pe.id) from DesTaskGroupEmps as pe where  pe.ProjId=p.id and  pe.EmpID=@TaskEmpID) >0 ");
                                paras[2].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = paras.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                paras = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = "  p.Id DESC, g.TaskGroupPath ASC, ISNULL(s.TaskSpecId, 0) DESC, s.TaskPath ASC ";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

        }

        /// <summary>
        /// 更新出版时间
        /// </summary>
        /// <param name="taskId"></param>
        /// <param name="date"></param>
        public void SetDateForPrint(long taskId, DateTime date)
        {
            var model = this.Get(taskId);
            model.DateForPrint = date;
            this.Edit(model);
            this.UnitOfWork.SaveChanges();
        }

        /// <summary>
        /// 更新交付时间
        /// </summary>
        /// <param name="taskId"></param>
        /// <param name="date"></param>
        public void SetDateForPublish(long taskId, DateTime date)
        {
            var model = this.Get(taskId);
            model.DateForPublish = date;
            this.Edit(model);
            this.UnitOfWork.SaveChanges();
        }

        /// <summary>
        /// 更新归档时间
        /// </summary>
        /// <param name="taskId"></param>
        /// <param name="date"></param>
        public void SetDateForArchive(long taskId, DateTime date)
        {
            var model = this.Get(taskId);
            model.DateForArchive = date;
            this.Edit(model);
            this.UnitOfWork.SaveChanges();
        }


        /************************工作移交**********************/

        /// <summary>
        /// 批量移交生产任务
        /// </summary>
        /// <param name="fromEmpId">原人员ID</param>
        /// <param name="toEmpId">新人员ID</param>
        /// <param name="transferData">移交的任务内容</param>
        /// <param name="userInfo"></param>
        public void BatchDesTaskTransfer(int fromEmpId, int toEmpId, List<DesTaskRemindInput> transferData, EmpSession userInfo)
        {
            var fromEmp = employeeDB.Get(fromEmpId);
            var toEmp = employeeDB.Get(toEmpId);
            foreach (var t in transferData)
            {
                switch (t.ItemType)
                {
                    case 1:
                        // 移交项目策划任务
                        BatchDesTaskTransfer_ProjPlan(fromEmp, toEmp, t.TaskGroupId);
                        break;
                    case 2:
                        // 移交专业策划任务
                        BatchDesTaskTransfer_SpecPlan(fromEmp, toEmp, t.TaskId);
                        break;
                    case 3:
                        // 移交设计提交任务
                        BatchDesTaskTransfer_DesignPost(fromEmp, toEmp, t.TaskId);
                        break;
                    case 4:
                        // 移交设计审核任务
                        BatchDesTaskTransfer_DesingApproveNew(fromEmp, toEmp, t.TaskId, t.ID);
                        break;
                    case 5:
                        // 移交设计会签任务
                        BatchDesTaskTransfer_MutiSign(fromEmp, toEmp, t.TaskId);
                        break;
                }
            }
        }

        /// <summary>
        /// 移交项目策划任务
        /// </summary>
        /// <param name="fromEmp"></param>
        /// <param name="toEmp"></param>
        /// <param name="taskGroupId">阶段项目对应分组id</param>
        public void BatchDesTaskTransfer_ProjPlan(DataModel.Models.BaseEmployee fromEmp, DataModel.Models.BaseEmployee toEmp, long taskGroupId)
        {
            string sql = @"
                UPDATE  dbo.DesTaskGroup
                SET     TaskGroupEmpID = @toEmpId ,
                        TaskGroupEmpName = @toEmpName
                FROM    dbo.DesTaskGroup AS g
                WHERE   g.Id = @taskGroupId
            ";
            SqlParameter[] paras = {
                new SqlParameter("@toEmpId",SqlDbType.Int),
                new SqlParameter("@toEmpName",SqlDbType.NVarChar),
                new SqlParameter("@taskGroupId",SqlDbType.BigInt),
            };
            paras[0].Value = toEmp.EmpID;
            paras[1].Value = toEmp.EmpName;
            paras[2].Value = taskGroupId;

            DBExecute.ExecuteNonQuery(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 移交专业策划任务
        /// </summary>
        /// <param name="fromEmp"></param>
        /// <param name="toEmp"></param>
        /// <param name="taskId">专业任务id</param>
        public void BatchDesTaskTransfer_SpecPlan(DataModel.Models.BaseEmployee fromEmp, DataModel.Models.BaseEmployee toEmp, long taskId)
        {
            string sql = @"
                UPDATE  dbo.DesTask
                SET     TaskEmpID = @toEmpId ,
                        TaskEmpName = @toEmpName
                FROM    dbo.DesTask AS t
                WHERE   t.Id = @taskId
            ";
            SqlParameter[] paras = {
                new SqlParameter("@toEmpId",SqlDbType.Int),
                new SqlParameter("@toEmpName",SqlDbType.NVarChar),
                new SqlParameter("@taskId",SqlDbType.BigInt),
            };
            paras[0].Value = toEmp.EmpID;
            paras[1].Value = toEmp.EmpName;
            paras[2].Value = taskId;

            DBExecute.ExecuteNonQuery(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 移交设计提交任务
        /// </summary>
        /// <param name="fromEmp"></param>
        /// <param name="toEmp"></param>
        /// <param name="taskId">设计任务id</param>
        public void BatchDesTaskTransfer_DesignPost(DataModel.Models.BaseEmployee fromEmp, DataModel.Models.BaseEmployee toEmp, long taskId)
        {
            string sql = @"
		        -- 修改任务负责人
                UPDATE  dbo.DesTask
                SET     TaskEmpID = @toEmpId2016101408 ,
                        TaskEmpName = @toEmpName2016101408
                FROM    dbo.DesTask AS t
                WHERE   t.DeleterEmpId = 0 AND t.Id = @taskId2016101408

                -- 修正流程模板中的设计节点信息
                UPDATE  dbo.DesTask
                SET     TaskFlowModel.modify('replace value of (/root/item[@FlowNodeTypeID=""19"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101408"")]/@FlowNodeEmpName)[1] with sql:variable(""@toEmpName2016101408"")')
                FROM dbo.DesTask AS t
                WHERE   t.Id = @taskId2016101408

                UPDATE dbo.DesTask
                SET     TaskFlowModel.modify('replace value of (/root/item[@FlowNodeTypeID=""19"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101408"")]/@FlowNodeEmpID)[1] with sql:variable(""@toEmpId2016101408"")')
                FROM dbo.DesTask AS t
                WHERE   t.Id = @taskId2016101408

                -- 修改文件审批流程中的节点信息
                UPDATE  DesTaskAttachEx
                SET     AttachFlowNode.modify('replace value of (/root/item[@FlowNodeTypeID=""19"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101408"")]/@FlowNodeEmpName)[1] with sql:variable(""@toEmpName2016101408"")')
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101408

                UPDATE DesTaskAttachEx
                SET AttachFlowNode.modify('replace value of (/root/item[@FlowNodeTypeID=""19"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101408"")]/@FlowNodeEmpID)[1] with sql:variable(""@toEmpId2016101408"")')
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101408

                -- 修改前置任务中 文件审批流程中 的汇总节点信息
                UPDATE  DesTaskAttachEx
                SET     AttachFlowNode.modify('replace value of (/root/item[@FlowNodeTypeID=""0""]/@FlowNodeEmpName)[1] with sql:variable(""@toEmpName2016101408"")')
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer

                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID IN (
                        SELECT  t.Id
                        FROM    dbo.DesTask AS t
                        WHERE   t.TaskNextFlowNodeId IN(SELECT    Id
                                                        FROM      dbo.DesTask
                                                        WHERE     Id = @taskId2016101408) )

		        UPDATE DesTaskAttachEx
                SET AttachFlowNode.modify('replace value of (/root/item[@FlowNodeTypeID=""0""]/@FlowNodeEmpID)[1] with sql:variable(""@toEmpId2016101408"")')
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer

                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID IN (
                        SELECT  t.Id
                        FROM    dbo.DesTask AS t
                        WHERE   t.TaskNextFlowNodeId IN(SELECT    Id
                                                        FROM      dbo.DesTask
                                                        WHERE     Id = @taskId2016101408) )

		        --验证修改
		        /*
                SELECT  *
                FROM    dbo.DesTask
                WHERE   Id = @taskId2016101408

                SELECT  ta.*
                FROM    dbo.BaseAttach AS ba
        		        INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
        		        AND ba.AttachRefID = @taskId2016101408

                SELECT  ta.*
                FROM    dbo.BaseAttach AS ba
        		        INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId
        												        AND ba.AttachVer = ta.AttachVer
                WHERE   ba.AttachRefTable = 'DesTaskAttach'
        		        AND ba.AttachRefID IN (
        		        SELECT  t.Id
        		        FROM    dbo.DesTask AS t
        		        WHERE   t.TaskNextFlowNodeId IN ( SELECT    Id
        											        FROM      dbo.DesTask
        											        WHERE     Id = @taskId2016101408 ) )
		        */
            ";
            SqlParameter[] paras = {
                new SqlParameter("@fromEmpId2016101408",SqlDbType.Int),
                new SqlParameter("@toEmpId2016101408",SqlDbType.Int),
                new SqlParameter("@toEmpName2016101408",SqlDbType.NVarChar),
                new SqlParameter("@taskId2016101408",SqlDbType.BigInt),
            };
            paras[0].Value = fromEmp.EmpID;
            paras[1].Value = toEmp.EmpID;
            paras[2].Value = toEmp.EmpName;
            paras[3].Value = taskId;

            DBExecute.ExecuteNonQuery(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 移交设计审核任务
        /// </summary>
        /// <param name="fromEmp"></param>
        /// <param name="toEmp"></param>
        /// <param name="taskId">设计任务id</param>
        public void BatchDesTaskTransfer_DesingApprove(DataModel.Models.BaseEmployee fromEmp, DataModel.Models.BaseEmployee toEmp, long taskId)
        {
            string sql = @"
                -- 修正流程模板中的设计节点信息

		        DECLARE @TaskFlowModel2016101415 XML

		        SELECT @TaskFlowModel2016101415 = t.TaskFlowModel
                FROM    dbo.DesTask AS t
                WHERE   t.Id = @taskId2016101415

		        WHILE @TaskFlowModel2016101415.exist('(/root/item[@FlowNodeTypeID!=""19"" and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")])[1]') = 1
                BEGIN
                    SET @TaskFlowModel2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpName)[1] with sql:variable(""@toEmpName2016101415"")')

                    SET @TaskFlowModel2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpID)[1] with sql:variable(""@toEmpId2016101415"")')

                END

                UPDATE  dbo.DesTask
                SET     TaskFlowModel = @TaskFlowModel2016101415
                FROM dbo.DesTask AS t
                WHERE   t.Id = @taskId2016101415

                -- 修改文件审批流程中的节点信息

                DECLARE @AttachFlowNode2016101415 XML

                SELECT @AttachFlowNode2016101415 = ta.AttachFlowNode
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101415

                WHILE @AttachFlowNode2016101415.exist('(/root/item[@FlowNodeTypeID!=""19"" and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")])[1]') = 1
                BEGIN
                    SET @AttachFlowNode2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpName)[1] with sql:variable(""@toEmpName2016101415"")')
                    SET @AttachFlowNode2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpID)[1] with sql:variable(""@toEmpId2016101415"")')
                END

                UPDATE  DesTaskAttachEx
                SET AttachFlowNode = @AttachFlowNode2016101415
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101415

                -- 验证修改
                /*
                SELECT  *
                FROM    dbo.DesTask
                WHERE   Id = @taskId2016101415

                SELECT ta.*
                FROM    dbo.BaseAttach AS ba
                       INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101415
                */
            ";
            SqlParameter[] paras = {
                new SqlParameter("@fromEmpId2016101415",SqlDbType.Int),
                new SqlParameter("@toEmpId2016101415",SqlDbType.Int),
                new SqlParameter("@toEmpName2016101415",SqlDbType.NVarChar),
                new SqlParameter("@taskId2016101415",SqlDbType.BigInt),
            };
            paras[0].Value = fromEmp.EmpID;
            paras[1].Value = toEmp.EmpID;
            paras[2].Value = toEmp.EmpName;
            paras[3].Value = taskId;

            DBExecute.ExecuteNonQuery(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public void BatchDesTaskTransfer_DesingApproveNew(DataModel.Models.BaseEmployee fromEmp, DataModel.Models.BaseEmployee toEmp, long taskId, int ID)
        {
            string sql = @"
                -- 修正流程模板中的设计节点信息

		        DECLARE @TaskFlowModel2016101415 XML

		        SELECT @TaskFlowModel2016101415 = t.TaskFlowModel
                FROM    dbo.DesTask AS t
                WHERE   t.Id = @taskId2016101415

		        WHILE @TaskFlowModel2016101415.exist('(/root/item[@FlowNodeTypeID!=""19"" and @ID=sql:variable(""@ID2016101415"") and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")])[1]') = 1
                BEGIN
                    SET @TaskFlowModel2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @ID=sql:variable(""@ID2016101415"") and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpName)[1] with sql:variable(""@toEmpName2016101415"")')

                    SET @TaskFlowModel2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @ID=sql:variable(""@ID2016101415"") and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpID)[1] with sql:variable(""@toEmpId2016101415"")')

                END

                UPDATE  dbo.DesTask
                SET     TaskFlowModel = @TaskFlowModel2016101415
                FROM dbo.DesTask AS t
                WHERE   t.Id = @taskId2016101415

                -- 修改文件审批流程中的节点信息

                DECLARE @AttachFlowNode2016101415 XML

                SELECT @AttachFlowNode2016101415 = ta.AttachFlowNode
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101415

                WHILE @AttachFlowNode2016101415.exist('(/root/item[@FlowNodeTypeID!=""19"" and @FlowNodeTypeID!=""0"" and @ID=sql:variable(""@ID2016101415"") and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")])[1]') = 1
                BEGIN
                    SET @AttachFlowNode2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @ID=sql:variable(""@ID2016101415"") and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpName)[1] with sql:variable(""@toEmpName2016101415"")')
                    SET @AttachFlowNode2016101415.modify('replace value of (/root/item[@FlowNodeTypeID!=""19"" and @ID=sql:variable(""@ID2016101415"") and @FlowNodeTypeID!=""0"" and @FlowNodeEmpID=sql:variable(""@fromEmpId2016101415"")]/@FlowNodeEmpID)[1] with sql:variable(""@toEmpId2016101415"")')
                END

                UPDATE  DesTaskAttachEx
                SET AttachFlowNode = @AttachFlowNode2016101415
                FROM dbo.BaseAttach AS ba
                     INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101415

                -- 验证修改
                /*
                SELECT  *
                FROM    dbo.DesTask
                WHERE   Id = @taskId2016101415

                SELECT ta.*
                FROM    dbo.BaseAttach AS ba
                       INNER JOIN dbo.DesTaskAttachEx AS ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer
                WHERE ba.AttachRefTable = 'DesTaskAttach'
                        AND ba.AttachRefID = @taskId2016101415
                */
            ";
            SqlParameter[] paras = {
                new SqlParameter("@fromEmpId2016101415",SqlDbType.Int),
                new SqlParameter("@toEmpId2016101415",SqlDbType.Int),
                new SqlParameter("@toEmpName2016101415",SqlDbType.NVarChar),
                new SqlParameter("@taskId2016101415",SqlDbType.BigInt),
                new SqlParameter("@ID2016101415",SqlDbType.Int)
            };
            paras[0].Value = fromEmp.EmpID;
            paras[1].Value = toEmp.EmpID;
            paras[2].Value = toEmp.EmpName;
            paras[3].Value = taskId;
            paras[4].Value = ID;

            DBExecute.ExecuteNonQuery(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        /// <summary>
        /// 移交设计会签任务
        /// </summary>
        /// <param name="fromEmp"></param>
        /// <param name="toEmp"></param>
        /// <param name="taskId"></param>
        public void BatchDesTaskTransfer_MutiSign(DataModel.Models.BaseEmployee fromEmp, DataModel.Models.BaseEmployee toEmp, long taskId)
        {
            string sql = @"
		        UPDATE dbo.DesMutiSignRec
		        SET RecEmpId = @toEmpId2016101418, RecEmpName = @toEmpName2016101418
		        FROM    DesMutiSign dms
                        LEFT JOIN DesMutiSignRec dmr ON dms.Id = dmr.MutiSignId
                        INNER JOIN dbo.DesTask t ON t.Id = dms.TaskId
                WHERE   dmr.RecStatus = 0 -- 接收状态： 0 未接收 1 不同意 2 通过
                        AND dmr.RecEmpId = @fromEmpId2016101418
				        AND t.Id = @taskId2016101418
            ";
            SqlParameter[] paras = {
                new SqlParameter("@fromEmpId2016101418",SqlDbType.Int),
                new SqlParameter("@toEmpId2016101418",SqlDbType.Int),
                new SqlParameter("@toEmpName2016101418",SqlDbType.NVarChar),
                new SqlParameter("@taskId2016101418",SqlDbType.BigInt),
            };
            paras[0].Value = fromEmp.EmpID;
            paras[1].Value = toEmp.EmpID;
            paras[2].Value = toEmp.EmpName;
            paras[3].Value = taskId;

            DBExecute.ExecuteNonQuery(DBExecute.ConnectionString, sql.ToString(), paras);
        }



        /************************其他**********************/


        /// <summary>
        /// 获取 任务状态 图标
        /// </summary>
        /// <param name="status"></param>
        /// <returns></returns>
        private string GetTaskStatusIconCls(int status)
        {
            var icon = "";
            switch (status)
            {
                case 0:
                    icon = "fa  fa-circle-o text-muted";
                    break;
                case 1:
                    icon = "fa fa-dot-circle-o text-warning";
                    break;
                case 2:
                    icon = "fa fa-play-circle text-success";
                    break;
                case 3:
                    icon = "fa fa-check-circle text-info";
                    break;
                case 4:
                    icon = "fa fa-minus-circle text-danger";
                    break;
            }
            return icon;
        }

        /// <summary>
        /// 全局缓存 流程模板
        /// </summary>
        private Dictionary<int, string> _flowNodeXML = new Dictionary<int, string>();

        /// <summary>
        /// 获取 流程模板 xml格式数据
        /// </summary>
        /// <param name="flowID"></param>
        /// <returns></returns>
        public string GetFlowNodeXML(int flowID)
        {
            if (_flowNodeXML.ContainsKey(flowID))
            {
                return _flowNodeXML[flowID];
            }
            else
            {
                var flowNodeXml = new DBSql.Design.DesFlow().GetDesFlowNodeXML(flowID);
                _flowNodeXML.Add(flowID, flowNodeXml);
                return flowNodeXml;
            }
        }

        /// <summary>
        /// 获取 流程模板 xml格式数据
        /// </summary>
        /// <param name="flowID"></param>
        /// <returns></returns>
        private string GetFlowNodeFirstXML(int flowID)
        {
            var flowNodeXml = new DBSql.Design.DesFlow().GetDesFlowNodeFirstXML(flowID);
            return flowNodeXml;
        }




        public DataTable GetEmployeeAnalysisList(Common.SqlPageInfo queryContext)
        {
            string sql = @"WITH CTE AS(SELECT ROW_NUMBER() OVER (ORDER BY TaskEmpID )  AS Id, TaskEmpID,
                        COUNT(1) AS Num,(SELECT EmpName FROM dbo.BaseEmployee WHERE empID = t.TaskEmpID ) AS EmpName,
                        (SELECT BaseName FROM dbo.BaseData WHERE baseID = (SELECT EmpDepID FROM dbo.BaseEmployee WHERE empID = t.TaskEmpID )) AS DeptName,
                        Ids = IsNull((SELECT  ',' + CAST(Id AS NVARCHAR(5))  FROM DesTask t1 WHERE t1.DeleterEmpId = 0  AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID  FOR  XML PATH('')),'') ,                     
                        (SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  CHARINDEX(','  + CAST(TaskID AS NVARCHAR(5))  + ',', (SELECT  ','+ CAST(Id AS NVARCHAR(5))FROM  DesTask t1 WHERE t1.DeleterEmpId = 0 AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID FOR XML PATH('') ) + ',') > 0 AND CheckErrTypeID = 59 ) AS T_59,
                        (SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  CHARINDEX(','  + CAST(TaskID AS NVARCHAR(5))  + ',', (SELECT  ','+ CAST(Id AS NVARCHAR(5))FROM  DesTask t1 WHERE t1.DeleterEmpId = 0 AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID FOR XML PATH('') ) + ',') > 0 AND CheckErrTypeID = 60 ) AS T_60,
                        (SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  CHARINDEX(','  + CAST(TaskID AS NVARCHAR(5))  + ',', (SELECT  ','+ CAST(Id AS NVARCHAR(5))FROM  DesTask t1 WHERE t1.DeleterEmpId = 0 AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID FOR XML PATH('') ) + ',') > 0 AND CheckErrTypeID = 61 ) AS T_61,
                        (SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  CHARINDEX(','  + CAST(TaskID AS NVARCHAR(5))  + ',', (SELECT  ','+ CAST(Id AS NVARCHAR(5))FROM  DesTask t1 WHERE t1.DeleterEmpId = 0 AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID FOR XML PATH('') ) + ',') > 0 AND CheckErrTypeID = 97 ) AS T_97,
                        (SELECT COUNT(1) FROM dbo.DesTask WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',', (SELECT  ',' + CAST(Id AS NVARCHAR(5)) FROM  DesTask t1  WHERE   t1.DeleterEmpId = 0  AND t1.TaskType = 0 AND t1.TaskEmpID = t.TaskEmpID  FOR XML PATH('') ) + ',') > 0  AND TaskJudge = 5 ) AS T_5,
                        (SELECT COUNT(1) FROM dbo.DesTask WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5))+ ',',(SELECT  ','+ CAST(Id AS NVARCHAR(5))  FROM    DesTask t1 WHERE   t1.DeleterEmpId = 0 AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID FOR   XML PATH('') ) + ',') > 0 AND TaskJudge = 4  ) AS T_4,
                        (SELECT  COUNT(1) FROM   dbo.DesTask  WHERE  CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',',(SELECT  ','+ CAST(Id AS NVARCHAR(5)) FROM DesTask t1 WHERE t1.DeleterEmpId = 0 AND t1.TaskType = 0 AND t1.TaskEmpID = t.TaskEmpID  FOR XML PATH('')  ) + ',') > 0   AND TaskJudge = 3  ) AS T_3,
                        (SELECT  COUNT(1) FROM dbo.DesTask  WHERE  CHARINDEX(',' + CAST(id AS NVARCHAR(5))+ ',',(SELECT  ',' + CAST(Id AS NVARCHAR(5)) FROM  DesTask t1 WHERE t1.DeleterEmpId = 0  AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID   FOR  XML PATH('')  ) + ',') > 0  AND TaskJudge = 2 ) AS T_2,
                        (SELECT  COUNT(1) FROM dbo.DesTask  WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',',(SELECT  ',' + CAST(Id AS NVARCHAR(5)) FROM  DesTask t1 WHERE t1.DeleterEmpId = 0  AND t1.TaskType = 0   AND t1.TaskEmpID = t.TaskEmpID  FOR XML PATH('')  ) + ',') > 0 AND TaskJudge = 1 ) AS T_1
               FROM DesTask AS t WHERE t.DeleterEmpId = 0 AND t.TaskType = 0 ";

            var sbSQL = new StringBuilder(" FROM CTE ");

            var sbCondition = new StringBuilder(" WHERE 1=1");

            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                //sbCondition.Append(" AND (f.FlowName like @text OR fn.FlowNodeName like @text OR f.FlowTitle LIKE @text)");
                //sqlParameters.Add(new SqlParameter("@text", "%" + queryContext.TextCondtion + "%"));
            }
            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "")
                    {
                        continue;
                    }
                    switch (de.Key.ToString())
                    {
                        case "QueryDeptId":
                            {
                                if (de.Value.ToString() != "" && de.Value.ToString() != "0")
                                {
                                    sql += " and (SELECT EmpDepID FROM dbo.BaseEmployee WHERE empID = t.TaskEmpID ) in (" + de.Value.ToString() + ")";

                                }
                            }
                            break;
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    sql += " and t.CreatorDepID=@CreatorDepId";
                                    sqlParameters.Add(new SqlParameter("@CreatorDepId", de.Value.ToString()));
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    sql += " and t.CreatorEmpId=@CreatorEmpId";
                                    sqlParameters.Add(new SqlParameter("@CreatorEmpId", de.Value.ToString()));
                                }
                            }
                            break;

                        case "StatisticsPeriodType":
                            if (de.Value.ToString() != "" && de.Value.ToString() != "0")
                            {
                                switch (de.Value.ToString())
                                {
                                    case "1":
                                        {
                                            DateTime low = DateTime.Now.AddMonths(-1);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";
                                        }
                                        break;
                                    case "2":
                                        {

                                            DateTime low = DateTime.Now.AddMonths(-3);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";

                                        }
                                        break;
                                    case "3":
                                        {
                                            DateTime low = DateTime.Now.AddMonths(-6);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";
                                        }
                                        break;
                                    default:
                                        {

                                            DateTime low = DateTime.Now.AddYears(-1);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";
                                        }
                                        break;
                                }

                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            sql += " GROUP BY TaskEmpID )";

            queryContext.PageTotleRowCount = Common.ModelConvert.ConvertToDefault<int>(DAL.DBExecute.ExecuteScalar(sql + " SELECT Count(1)" + sbSQL.ToString() + sbCondition.ToString(), sqlParameters.ToArray()));
            sql += " select * from  CTE  WHERE CTE.Id BETWEEN " + (((queryContext.PageIndex - 1) * queryContext.PageSize) + 1) + " AND " + (queryContext.PageIndex * queryContext.PageSize);
            return DAL.DBExecute.ExecuteDataTable(sql, sqlParameters.ToArray());
        }

        public DataTable GetDeptAnalysisList(Common.SqlPageInfo queryContext)
        {
            var sbSQL = new StringBuilder(" FROM CTE ");

            var sbCondition = new StringBuilder(" WHERE 1=1");

            string sql = @"WITH CTE AS(SELECT ROW_NUMBER() OVER (ORDER BY b.EmpDepID )  AS Id, b.EmpDepID,
                        COUNT(1) AS Num,(SELECT BaseName FROM dbo.BaseData WHERE baseID = b.EmpDepID) AS DeptName,                     
                        Ids=IsNull((select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID
                        where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path('')),''),
                        (SELECT   COUNT(1)  FROM dbo.DesTaskCheck WHERE  Charindex(','+CAST(TaskID AS NVARCHAR(5))+',',(select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path(''))+',')>0  AND CheckErrTypeID=59 ) AS T_59,    
                        (SELECT   COUNT(1)  FROM dbo.DesTaskCheck WHERE  Charindex(','+CAST(TaskID AS NVARCHAR(5))+',',(select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path(''))+',')>0  AND CheckErrTypeID=60 ) AS T_60,   
                        (SELECT   COUNT(1)  FROM dbo.DesTaskCheck WHERE  Charindex(','+CAST(TaskID AS NVARCHAR(5))+',',(select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path(''))+',')>0  AND CheckErrTypeID=61 ) AS T_61,    
                        (SELECT   COUNT(1)  FROM dbo.DesTaskCheck WHERE  Charindex(','+CAST(TaskID AS NVARCHAR(5))+',',(select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path(''))+',')>0  AND CheckErrTypeID=97 ) AS T_97,         
                        (SELECT COUNT(1) FROM dbo.DesTask WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',', (select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID
                         where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path('')) + ',') > 0  AND TaskJudge = 5 ) AS T_5,
                        (SELECT COUNT(1) FROM dbo.DesTask WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',', (select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID
                         where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path('')) + ',') > 0  AND TaskJudge = 4 ) AS T_4,
                        (SELECT COUNT(1) FROM dbo.DesTask WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',', (select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID
                         where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path('')) + ',') > 0  AND TaskJudge = 3 ) AS T_3,
                        (SELECT COUNT(1) FROM dbo.DesTask WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',', (select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID
                         where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path('')) + ',') > 0  AND TaskJudge = 2 ) AS T_2,
                        (SELECT COUNT(1) FROM dbo.DesTask WHERE CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',', (select ','+ CAST(Id AS NVARCHAR(5)) from DesTask t1 INNER JOIN dbo.BaseEmployee AS b1 ON t1.TaskEmpID=b1.empID
                         where t1.DeleterEmpId=0 AND t1.TaskType=0 AND b1.EmpDepID=b.EmpDepID for xml path('')) + ',') > 0  AND TaskJudge = 1 ) AS T_1
                  FROM     DesTask AS t  INNER JOIN dbo.BaseEmployee AS b ON  t.TaskEmpID=b.EmpID  WHERE    t.DeleterEmpId = 0  AND t.TaskType = 0  ";


            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                //sbCondition.Append(" AND (f.FlowName like @text OR fn.FlowNodeName like @text OR f.FlowTitle LIKE @text)");
                //sqlParameters.Add(new SqlParameter("@text", "%" + queryContext.TextCondtion + "%"));
            }
            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "")
                    {
                        continue;
                    }
                    switch (de.Key.ToString())
                    {
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    sql += " and t.CreatorDepID=@CreatorDepId";
                                    sqlParameters.Add(new SqlParameter("@CreatorDepId", de.Value.ToString()));
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    sql += " and t.CreatorEmpId=@CreatorEmpId";
                                    sqlParameters.Add(new SqlParameter("@CreatorEmpId", de.Value.ToString()));
                                }
                            }
                            break;

                        case "StatisticsPeriodType":
                            if (de.Value.ToString() != "" && de.Value.ToString() != "0")
                            {
                                switch (de.Value.ToString())
                                {
                                    case "1":
                                        {
                                            DateTime low = DateTime.Now.AddMonths(-1);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";
                                        }
                                        break;
                                    case "2":
                                        {

                                            DateTime low = DateTime.Now.AddMonths(-3);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";

                                        }
                                        break;
                                    case "3":
                                        {
                                            DateTime low = DateTime.Now.AddMonths(-6);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";
                                        }
                                        break;
                                    default:
                                        {

                                            DateTime low = DateTime.Now.AddYears(-1);
                                            DateTime up = DateTime.Now.AddDays(-1);
                                            sql += " and  DateActualFinish>='" + low.Date + "'";
                                            sql += " and  DateActualFinish<='" + up.Date.AddHours(23.59) + "'";
                                        }
                                        break;
                                }

                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            sql += "  GROUP BY b.EmpDepID )";

            queryContext.PageTotleRowCount = Common.ModelConvert.ConvertToDefault<int>(DAL.DBExecute.ExecuteScalar(sql + " SELECT Count(1)" + sbSQL.ToString() + sbCondition.ToString(), sqlParameters.ToArray()));
            sql += " select * from  CTE  WHERE CTE.Id BETWEEN " + (((queryContext.PageIndex - 1) * queryContext.PageSize) + 1) + " AND " + (queryContext.PageIndex * queryContext.PageSize);
            return DAL.DBExecute.ExecuteDataTable(sql, sqlParameters.ToArray());
        }

        public DataTable GetDesTaskList(Common.SqlPageInfo queryContext)
        {
            string RowColumn = "d.Id,p.ProjNumber,p.ProjName,b1.BaseName AS PhaseName,d.TaskName,d.TaskEmpName";
            RowColumn += ",d.DateActualFinish,d.DatePlanFinish";
            RowColumn += " ,( CASE d.TaskSpecId   WHEN 0 THEN '项目汇总'  ELSE ISNULL((b2.BaseName), '') END ) AS SpecialtyName";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTask  WHERE  Id=d.ID AND TaskJudge = 5 ) AS T_5";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTask  WHERE  Id=d.ID AND TaskJudge = 4 ) AS T_4";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTask  WHERE  Id=d.ID AND TaskJudge = 3 ) AS T_3";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTask  WHERE  Id=d.ID AND TaskJudge = 2 ) AS T_2";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTask  WHERE  Id=d.ID AND TaskJudge = 1 ) AS T_1";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  TaskID = d.ID AND CheckErrTypeID = 59 ) AS T_59";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  TaskID = d.ID AND CheckErrTypeID = 60 ) AS T_60";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  TaskID = d.ID AND CheckErrTypeID = 61 ) AS T_61";
            RowColumn += ",(SELECT  COUNT(1) FROM  dbo.DesTaskCheck  WHERE  TaskID = d.ID AND CheckErrTypeID = 97 ) AS T_97";

            StringBuilder strSql = new StringBuilder();
            strSql.Append("select Count(1) from dbo.DesTask AS d INNER JOIN dbo.Project AS p ON d.ProjId = p.Id INNER JOIN dbo.BaseData AS b1 ON d.TaskPhaseId = b1.BaseID left JOIN dbo.BaseData AS b2 ON d.TaskSpecId = b2.BaseID where 1=1 ");

            SqlParameter[] paras = {
                new SqlParameter("@TextCondtion",SqlDbType.VarChar),
                new SqlParameter("@TaskJudgeId",SqlDbType.Int),
                new SqlParameter("@TaskPhaseId",SqlDbType.VarChar),
            };

            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                strSql.Append(" and (p.ProjNumber like '%'+@TextCondtion+'%' or p.ProjName like '%'+@TextCondtion+'%' or d.TaskEmpName like '%'+@TextCondtion+'%') ");
                paras[0].Value = queryContext.TextCondtion;
            }

            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "DesTaskIds":
                            if (de.Value.ToString() != "")
                            {
                                string str = de.Value.ToString().Substring(1, de.Value.ToString().Length - 1);
                                strSql.Append(string.Format(" AND d.Id in ({0})", str));
                            }
                            break;
                        case "TaskJudgeId":
                            if (de.Value.ToString() != "" && de.Value.ToString() != "0")
                            {
                                strSql.Append(" and d.TaskJudge=@TaskJudgeId ");
                                paras[1].Value = Convert.ToInt32(de.Value.ToString());
                            }
                            break;
                        case "TaskPhaseId":
                            if (de.Value.ToString() != "" && de.Value.ToString() != "0")
                            {
                                string str = de.Value.ToString();
                                strSql.Append(string.Format(" and d.TaskPhaseId in ({0})", str));
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), paras);

            if (obj == null && obj == DBNull.Value) queryContext.PageTotleRowCount = 0;
            else queryContext.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(queryContext.SelectOrder))
            {
                queryContext.SelectOrder = "d.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(queryContext, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);
        }

        public DataTable GetAgingAnalysisList(Common.SqlPageInfo queryContext)
        {
            string sql = @"WITH CTE AS(SELECT ROW_NUMBER() OVER (ORDER BY TaskEmpID )  AS Id, TaskEmpID,
                        COUNT(1) AS Num,(SELECT EmpName FROM dbo.BaseEmployee WHERE empID = t.TaskEmpID ) AS EmpName,
                        (SELECT BaseName FROM dbo.BaseData WHERE baseID = (SELECT EmpDepID FROM dbo.BaseEmployee WHERE empID = t.TaskEmpID )) AS DeptName,
                        Ids = IsNull((SELECT  ',' + CAST(Id AS NVARCHAR(5))  FROM DesTask t1 WHERE t1.DeleterEmpId = 0  AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID and t1.TaskStatus=3  FOR  XML PATH('')),'') ,                     
                        Normals = (SELECT COUNT(1) FROM  DesTask  WHERE   DateActualFinish <=DatePlanFinish  AND CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',',( SELECT  ','  + CAST(Id AS NVARCHAR(5)) FROM DesTask t1 WHERE t1.DeleterEmpId = 0 AND t1.TaskType = 0 AND t1.TaskEmpID = t.TaskEmpID and t1.TaskStatus=3   FOR XML PATH('')  ) + ',') > 0 and TaskStatus=3 ),                      
                        NormalPercent = ((SELECT COUNT(1) FROM DesTask WHERE  DateActualFinish >DatePlanFinish and  DatePlanFinish != '1900-01-01 00:00:00.000'   AND CHARINDEX(',' + CAST(id AS NVARCHAR(5))     + ',',  ( SELECT  ',' + CAST(Id AS NVARCHAR(5)) FROM DesTask t1  WHERE   t1.DeleterEmpId = 0  AND t1.TaskType = 0 and t1.TaskStatus=3 and t1.TaskEmpID = t.TaskEmpID FOR  XML PATH('')   ) + ',') > 0   and TaskStatus=3  )), 
                        OverTimes =  Cast(ROUND((SELECT COUNT(1) FROM  DesTask  WHERE   DateActualFinish <=DatePlanFinish  AND CHARINDEX(',' + CAST(id AS NVARCHAR(5)) + ',',( SELECT  ','  + CAST(Id AS NVARCHAR(5)) FROM DesTask t1 WHERE t1.DeleterEmpId = 0 AND t1.TaskType = 0 AND t1.TaskEmpID = t.TaskEmpID  and t1.TaskStatus=3  FOR XML PATH('')  ) + ',') > 0  and TaskStatus=3)*100*1.0/COUNT(1),2) as decimal(18,2)), 
                        OverTimePercent =  Cast(Round((SELECT COUNT(1) FROM DesTask WHERE  DateActualFinish >DatePlanFinish and  DatePlanFinish != '1900-01-01 00:00:00.000'    AND CHARINDEX(',' + CAST(id AS NVARCHAR(5))     + ',',  ( SELECT  ',' + CAST(Id AS NVARCHAR(5)) FROM DesTask t1  WHERE   t1.DeleterEmpId = 0  AND t1.TaskType = 0  AND t1.TaskEmpID = t.TaskEmpID  and t1.TaskStatus=3 FOR  XML PATH('')   ) + ',') > 0  and TaskStatus=3  ) *100*1.0 /COUNT(1),2) as decimal(18,2))
               FROM DesTask AS t WHERE DeleterEmpId = 0 AND TaskType = 0  AND TaskStatus=3";

            var sbSQL = new StringBuilder(" FROM CTE ");

            var sbCondition = new StringBuilder(" WHERE 1=1");

            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (!string.IsNullOrEmpty(queryContext.TextCondtion))
            {
                sql += string.Format(" and t.TaskEmpName like '%{0}%'", queryContext.TextCondtion);
            }
            if (queryContext.SelectCondtion != null && queryContext.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in queryContext.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "")
                    {
                        continue;
                    }
                    switch (de.Key.ToString())
                    {
                        case "QueryDeptID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    sql += " and t.CreatorDepID=@CreatorDepId";
                                    sqlParameters.Add(new SqlParameter("@CreatorDepId", de.Value.ToString()));
                                }
                            }
                            break;
                        case "QueryEmpID":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    sql += " and t.CreatorEmpId=@CreatorEmpId";
                                    sqlParameters.Add(new SqlParameter("@CreatorEmpId", de.Value.ToString()));
                                }
                            }
                            break;

                        case "QueryDeptId":
                            {
                                if (de.Value.ToString() != "" && de.Value.ToString() != "0")
                                {
                                    sql += " and (SELECT EmpDepID FROM dbo.BaseEmployee WHERE empID = t.TaskEmpID ) in (" + de.Value.ToString() + ")";

                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            sql += " GROUP BY TaskEmpID )";

            queryContext.PageTotleRowCount = Common.ModelConvert.ConvertToDefault<int>(DAL.DBExecute.ExecuteScalar(sql + " SELECT Count(1)" + sbSQL.ToString() + sbCondition.ToString(), sqlParameters.ToArray()));
            sql += " select * from  CTE  WHERE CTE.Id BETWEEN " + (((queryContext.PageIndex - 1) * queryContext.PageSize) + 1) + " AND " + (queryContext.PageIndex * queryContext.PageSize);
            return DAL.DBExecute.ExecuteDataTable(sql, sqlParameters.ToArray());
        }

        /// <summary>
        /// 计算实际天数，去掉周末
        /// </summary>
        /// <param name="dateBegin"></param>
        /// <param name="dateEnd"></param>
        /// <returns></returns>
        public int Distance(DateTime dateBegin, DateTime dateEnd)
        {
            int weekDay = 0;
            //如果开始或结束时周末则重周一开始
            weekDay = DayofWeek(dateBegin);

            if (weekDay == 6)
            {
                dateBegin = dateBegin.AddDays(2);
            }
            else if (weekDay == 7)
            {
                dateBegin = dateBegin.AddDays(1);
            }

            weekDay = DayofWeek(dateEnd);
            if (weekDay == 6)
            {
                dateEnd = dateEnd.AddDays(-1);
            }
            else if (weekDay == 7)
            {
                dateEnd = dateEnd.AddDays(-2);
            }

            TimeSpan span = dateEnd - dateBegin;
            return Convert.ToInt32(span.TotalDays) + 1;//差距的所有天数
        }

        /// <summary>
        /// 转换 周 为 整形
        /// </summary>
        /// <param name="dateBeginNextDay"></param>
        /// <returns></returns>
        private static int DayofWeek(DateTime dateBeginNextDay)
        {
            int weekDay = 0;
            switch (dateBeginNextDay.DayOfWeek)
            {
                case DayOfWeek.Monday:
                    weekDay = 1;
                    break;
                case DayOfWeek.Tuesday:
                    weekDay = 2;
                    break;
                case DayOfWeek.Wednesday:
                    weekDay = 3;
                    break;
                case DayOfWeek.Thursday:
                    weekDay = 4;
                    break;
                case DayOfWeek.Friday:
                    weekDay = 5;
                    break;
                case DayOfWeek.Saturday:
                    weekDay = 6;
                    break;
                case DayOfWeek.Sunday:
                    weekDay = 7;
                    break;
            }
            return weekDay;
        }

        /// <summary>
        /// 分配DbContext
        /// </summary>
        public void DbContextAssign()
        {
            desTaskGroupDB.DbContextRepository(this.DbContext);
            __log.DbContextRepository(this.DbContext);
            ProjectDynamicDB.DbContextRepository(this.DbContext);
        }

        /// <summary>
        /// 根据条件查询校审完成的文件
        /// </summary>
        /// <returns></returns>
        public DataTable GetCheckAttach(Common.SqlPageInfo condition)
        {
            StringBuilder strSql = new StringBuilder();
            string RowColumn = "*";
            strSql.Append("select Count(1) from V_GetFinishCheckAttach where 1=1");

            if (!string.IsNullOrEmpty(condition.TextCondtion))
            {
                strSql.AppendFormat(" and x.TaskName like '%{0}%'", condition.TextCondtion);
            }

            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    if (de.Value == null || de.Value.ToString().Trim() == "")
                    {
                        continue;
                    }
                    switch (de.Key.ToString())
                    {
                        case "ProjId":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.AppendFormat(" and ProjId={0} ", de.Value.ToString());
                                }
                            }
                            break;
                        case "SpecId":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.AppendFormat(" and TaskSpecId={0} ", de.Value.ToString());
                                }
                            }
                            break;

                        case "AttachEmpId":
                            {
                                if (de.Value.ToString() != "0")
                                {
                                    strSql.AppendFormat(" and AttachEmpId={0} ", de.Value.ToString());
                                }
                            }
                            break;
                        case "ProjPhaseId":
                            if (de.Value.ToString() != "0")
                            {
                                strSql.AppendFormat(" and TaskPhaseId={0} ", de.Value.ToString());
                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString());

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = "  TaskId desc ";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString());
        }

        /// <summary>
        /// 查询指定文件的校审信息
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public DataTable GetCheckDetail(string ids)
        {
            string sql = @"select AttachName,CheckNodeTypeID,CheckNote,ISNULL(HFNote,'') as HFNote,CheckEmpId,CheckEmpIDName,CheckIsCorrectiveType,(select BaseName from BaseData where BaseID=a.CheckIsCorrectiveType) as CheckIsCorrectiveShow from DesTaskCheckAttach a 
                left join DesTaskCheck b on a.CheckId=b.Id ";
            if (!string.IsNullOrEmpty(ids))
            {
                sql += "where AttachId in (" + ids + ")";
            }

            return DBExecute.ExecuteDataTable(sql);
        }

        public void GetJsonByArrange(string mainProjId, string projId, string projPhaseId, string desTaskGroupId, string type, ref string EmpIds, ref string EmpNames)
        {
            string sql = "";
            if (type == "1")
            {
                sql = string.Format("SELECT CONVERT(NVARCHAR(50),EmpId)+'-'+EmpName+',' FROM dbo.DesTaskGroupEmps WHERE MainProjId={0}  AND ProjId={1} AND ProjPhaseId={2} AND TaskGroupId={3} AND Permission IN (20) FOR XML PATH('')", mainProjId, projId, projPhaseId, desTaskGroupId);

                object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, sql);
                if (obj != null && obj != DBNull.Value)
                {
                    string[] list = obj.ToString().TrimEnd(',').Split(',');
                    foreach (string s in list)
                    {
                        string[] info = s.Split('-');
                        EmpIds += info[0] + ",";
                        EmpNames += info[1] + ",";
                    }
                }
            }
            else if (type == "2")
            {
                sql = string.Format(@"SELECT EmpId,EmpName FROM (SELECT  DISTINCT AttachFlowNode.value('(/root/item[@FlowNodeTypeID=21]/@FlowNodeEmpID)[1]', 'NVARCHAR(255)')  AS t FROM  BaseAttach AS b INNER JOIN  DesTaskAttachEx  AS d ON   b.AttachId = d.AttachId AND b.AttachVer = d.AttachVer WHERE AttachRefTable = 'DesTaskAttach' AND  AttachRefID IN(SELECT Id FROM dbo.DesTask WHERE  TaskGroupId = {0} AND TaskType = 0)) AS T INNER JOIN  BaseEmployee AS  emoloyee ON  T.T = emoloyee.EmpId ", desTaskGroupId);
                DataTable table = DBExecute.ExecuteDataTable(sql);
                if (null != table && table.Rows.Count > 0)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        EmpIds += row["EmpId"] + ",";
                        EmpNames += row["EmpName"] + ",";
                    }
                }
            }
            else
            {
                sql = string.Format(@"SELECT EmpId,EmpName FROM (SELECT  DISTINCT AttachFlowNode.value('(/root/item[@FlowNodeTypeID=22]/@FlowNodeEmpID)[1]', 'NVARCHAR(255)')  AS t FROM  BaseAttach AS b INNER JOIN  DesTaskAttachEx  AS d ON   b.AttachId = d.AttachId AND b.AttachVer = d.AttachVer WHERE AttachRefTable = 'DesTaskAttach' AND  AttachRefID IN(SELECT Id FROM dbo.DesTask WHERE  TaskGroupId = {0} AND TaskType = 0)) AS T INNER JOIN  BaseEmployee AS  emoloyee ON  T.T = emoloyee.EmpId ", desTaskGroupId);
                DataTable table = DBExecute.ExecuteDataTable(sql);
                if (null != table && table.Rows.Count > 0)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        EmpIds += row["EmpId"] + ",";
                        EmpNames += row["EmpName"] + ",";
                    }
                }
            }

            
        }
    }
}
