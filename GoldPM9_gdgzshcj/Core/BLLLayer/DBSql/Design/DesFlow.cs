#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-19 21:50:51
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data.SqlClient;
using System.Data;
using EntityFramework.Extensions;

namespace DBSql.Design
{
    public class DesFlow : EFRepository<DataModel.Models.DesFlow>
    {
        /// <summary>
        /// 获取某生成流程所有节点信息，并转为xml
        /// </summary>
        /// <param name="flowId">流程Id</param>
        /// <returns></returns>
        public string GetDesFlowNodeXML(int flowId)
        {
            string sql = @"
		        --获取某生成流程所有节点信息，并转为xml
                DECLARE @MyHierarchy Hierarchy -- 自定义类型
                INSERT  INTO @MyHierarchy
                        SELECT  *
                        FROM    dbo.ParseJSON(dbo.F_GetDesFlowNodeJson(@FlowId))
                DECLARE @MyXml XML
                SELECT  @MyXml = [dbo].[ToXML](@MyHierarchy)
                SELECT  @MyXml
            ";
            SqlParameter[] par = {
                new SqlParameter("@FlowId",SqlDbType.Int)
            };
            par[0].Value = flowId;

            var xml = DBExecute.ExecuteScalar(sql, par);
            return xml == null ? "" : xml.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="flowId"></param>
        /// <returns></returns>
        public string GetDesFlowNodeJson(int flowId)
        {
            string sql = "select dbo.F_GetDesFlowNodeJson(ID) as FlowJson from DesFlow where FlowId=@FlowId";
            SqlParameter[] par = {
                new SqlParameter("@FlowId",SqlDbType.Int)
            };
            par[0].Value = flowId;
            var json = DBExecute.ExecuteScalar(sql, par);
            return json == null ? "" : json.ToString();
        }

        /// <summary>
        /// 获取某生成流程第一个节点信息，并转为xml
        /// </summary>
        /// <param name="flowId">流程Id</param>
        /// <returns></returns>
        public string GetDesFlowNodeFirstXML(int flowId)
        {
            string sql = @"
		        --获取某生成流程所有节点信息，并转为xml
                DECLARE @MyHierarchy Hierarchy -- 自定义类型
                INSERT  INTO @MyHierarchy
                        SELECT  *
                        FROM    dbo.ParseJSON(dbo.F_GetDesFlowNodeFirstJson(@FlowId))
                DECLARE @MyXml XML
                SELECT  @MyXml = [dbo].[ToXML](@MyHierarchy)
                SELECT  @MyXml
            ";
            SqlParameter[] par = {
                new SqlParameter("@FlowId",SqlDbType.Int)
            };
            par[0].Value = flowId;

            var xml = DBExecute.ExecuteScalar(sql, par);
            return xml == null ? "" : xml.ToString();
        }


        /// <summary>
        /// 获取所以生成流程信息
        /// </summary>
        /// <returns></returns>
        public DataTable GetDesFlowList()
        {
            string sql = @"
                SELECT  [ID] ,
                        [FlowSpecType] ,
                        [FlowLevelType] ,
                        CASE FlowSpecType
                          WHEN 0 THEN '普通专业'
                          WHEN 1 THEN '汇总专业'
                        END FlowSpecTypeName ,
                        CASE FlowLevelType
                          WHEN 0 THEN '无层级'
                          WHEN 1 THEN '子层级'
                          WHEN 2 THEN '父层级'
                        END FlowLevelTypeName ,
                        [FlowName] ,
                        dbo.F_GetDesFlowNodeJson(ID) AS DesFlowNodeJson
                FROM    [dbo].[DesFlow]
                ORDER BY [FlowSpecType] ,
                        [FlowLevelType]
            ";

            return DBExecute.ExecuteDataTable(sql);
        }

        /// <summary>
        /// 创建或更新生产流程模版
        /// </summary>
        /// <param name="flowModel"></param>
        public void CreateOrUpdate(DataModel.Models.DesFlow desFlow, DataModel.EmpSession currentUser)
        {
            if (desFlow.ID > 0)
            {
                //存在，直接更新
                base.DbContext.SaveChanges();
            }
            else
            {
                using (var tran = base.DbContext.Database.BeginTransaction())
                {
                    try
                    {
                        base.DbContext.Set<DataModel.Models.DesFlow>().Add(desFlow);
                        base.DbContext.SaveChanges();
                        //默认插入一条
                        var node0 = new DataModel.Models.DesFlowNode()
                        {
                            CanDelete = true,
                            CanEdit = true,
                            CreationTime = DateTime.Now,
                            CreatorDepID = currentUser.EmpDepID,
                            CreatorDepName = currentUser.EmpDepName,
                            CreatorEmpId = currentUser.EmpID,
                            CreatorEmpName = currentUser.EmpName,
                            DeleterEmpId = 0,
                            DeleterEmpName = "",
                            DeletionTime = JQ.Util.TypeParse.DefaultDateTime,
                            FlowNodeBackIDs = "",
                            FlowID = desFlow.ID,
                            FlowNodeEmpID = 0,
                            FlowNodeEmpIDs = "",
                            LastModificationTime = DateTime.Now,
                            LastModifierEmpId = currentUser.EmpID,
                            LastModifierEmpName = currentUser.EmpName,
                            FlowNodeEmpName = "",
                            FlowNodeEmpType = 0,
                            FlowNodeName = "设计",
                            FlowNodeNextID = 0,
                            FlowNodeOrderNum = 1,
                            FlowNodeStatus = 0,
                            FlowNodeTypeID = 19
                        };
                        if (currentUser.AgenEmpID > 0)
                        {
                            node0.AgenCreatorEmpId = currentUser.EmpID;
                            node0.AgenCreatorEmpName = currentUser.EmpName;
                        }
                        base.DbContext.Set<DataModel.Models.DesFlowNode>().Add(node0);
                        base.DbContext.SaveChanges();
                        tran.Commit();
                    }
                    catch
                    {
                        tran.Rollback();
                    }
                }
            }
        }

        public bool Delete(int[] ids)
        {
            using (var tran = base.DbContext.Database.BeginTransaction())
            {
                try
                {
                    var datas = base.DbContext.Set<DataModel.Models.DesFlow>().Where(m => ids.Contains(m.ID) && !m.CanDelete).ToList();
                    foreach (var data in datas)
                    {
                        base.DbContext.Set<DataModel.Models.DesFlow>().Where(m => m.ID == data.ID).Delete();
                        base.DbContext.Set<DataModel.Models.DesFlowNode>().Where(m => m.FlowID == data.ID).Delete();
                    }
                    tran.Commit();
                    return true;
                }
                catch
                {
                    tran.Rollback();
                    return false;
                }
            }
        }
    }
}
