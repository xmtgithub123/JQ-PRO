#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-19 21:50:51
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
namespace DBSql.Design
{
    public class DesFlowNode : EFRepository<DataModel.Models.DesFlowNode>
    {
        /// <summary>
        /// 添加下级节点
        /// </summary>
        public int AppendNextNode(int nodeID, DataModel.EmpSession currentUser)
        {
            // 获取当前选中节点
            var node = this.Get(nodeID);
            if (node == null)
            {
                return 0;
            }

            // 生成下一新建节点信息
            var toCreateNode = new DataModel.Models.DesFlowNode()
            {
                CanDelete = true,
                CanEdit = true,
                CreationTime = DateTime.Now,
                CreatorDepID = currentUser.EmpDepID,
                CreatorDepName = currentUser.EmpDepName,
                CreatorEmpId = currentUser.EmpID,
                CreatorEmpName = currentUser.EmpName,
                FlowID = node.FlowID,
                FlowNodeBackIDs = "",
                FlowNodeEmpID = 0,
                FlowNodeEmpIDs = "",
                FlowNodeEmpName = "",
                FlowNodeEmpType = 0,
                FlowNodeName = "新节点",
                FlowNodeNextID = 0,
                FlowNodeOrderNum = node.FlowNodeOrderNum + 1,
                LastModificationTime = DateTime.Now,
                LastModifierEmpId = currentUser.EmpID,
                LastModifierEmpName = currentUser.EmpName
            };
            if (currentUser.AgenEmpID > 0)
            {
                toCreateNode.AgenCreatorEmpId = currentUser.AgenEmpID;
                toCreateNode.AgenCreatorEmpName = currentUser.AgenEmpName;
            }
            toCreateNode.FlowNodeNextID = node.FlowNodeNextID;

            // 开始保存数据
            using (var tran = DbContext.Database.BeginTransaction())
            {
                try
                {
                    // 保存新增节点
                    this.DbContext.Set<DataModel.Models.DesFlowNode>().Add(toCreateNode);
                    this.DbContext.SaveChanges();

                    // 新增节点和选中节点建立关联
                    node.FlowNodeNextID = toCreateNode.ID;

                    // 遍历新增节点的后续节点
                    var flowNodes = this.DbContext.Set<DataModel.Models.DesFlowNode>().Where(m => m.FlowID == node.FlowID && m.DeleterEmpId == 0).ToList();
                    var temp = flowNodes.FirstOrDefault(m => m.ID == toCreateNode.FlowNodeNextID);
                    while (temp != null)
                    {
                        temp.FlowNodeOrderNum++;
                        temp = flowNodes.FirstOrDefault(m => m.ID == temp.FlowNodeNextID);
                    }
                    this.DbContext.SaveChanges();
                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                }
            }
            return node.FlowID;
        }

        /// <summary>
        /// 添加上级节点
        /// </summary>
        public int AppendPreviousNode(int nodeID, DataModel.EmpSession currentUser)
        {
            // 获取当前选中节点
            var node = this.Get(nodeID);
            if (node == null)
            {
                return 0;
            }

            // 生成上一新增节点信息
            var toCreateNode = new DataModel.Models.DesFlowNode()
            {
                CanDelete = true,
                CanEdit = true,
                CreationTime = DateTime.Now,
                CreatorDepID = currentUser.EmpDepID,
                CreatorDepName = currentUser.EmpDepName,
                CreatorEmpId = currentUser.EmpID,
                CreatorEmpName = currentUser.EmpName,
                FlowID = node.FlowID,
                FlowNodeBackIDs = "",
                FlowNodeEmpID = 0,
                FlowNodeEmpIDs = "",
                FlowNodeEmpName = "",
                FlowNodeEmpType = 0,
                FlowNodeName = "新节点",
                FlowNodeNextID = node.ID,
                FlowNodeOrderNum = node.FlowNodeOrderNum,
                LastModificationTime = DateTime.Now,
                LastModifierEmpId = currentUser.EmpID,
                LastModifierEmpName = currentUser.EmpName,
                FlowNodeStatus = 0,
                FlowNodeTypeID = 0
            };
            if (currentUser.AgenEmpID > 0)
            {
                toCreateNode.AgenCreatorEmpId = currentUser.AgenEmpID;
                toCreateNode.AgenCreatorEmpName = currentUser.AgenEmpName;
            }

            // 开始保存数据
            using (var tran = DbContext.Database.BeginTransaction())
            {
                try
                {
                    //插入新的模版节点
                    this.DbContext.Set<DataModel.Models.DesFlowNode>().Add(toCreateNode);
                    this.DbContext.SaveChanges();
                    //获取出当前节点的前一个节点
                    var previousNode = this.DbContext.Set<DataModel.Models.DesFlowNode>().FirstOrDefault(m => m.FlowID == node.FlowID && m.FlowNodeNextID == node.ID && m.DeleterEmpId == 0);
                    if (previousNode != null)
                    {
                        previousNode.FlowNodeNextID = toCreateNode.ID;
                    }
                    //获取出后续的模版节点
                    var nextNodes = this.DbContext.Set<DataModel.Models.DesFlowNode>().Where(m => m.FlowID == node.FlowID && m.FlowNodeOrderNum >= node.FlowNodeOrderNum && m.DeleterEmpId == 0).ToList();
                    var temp = nextNodes.FirstOrDefault(m => m.ID == nodeID);
                    while (temp != null)
                    {
                        temp.FlowNodeOrderNum++;
                        temp = nextNodes.FirstOrDefault(m => m.ID == temp.FlowNodeNextID);
                    }
                    this.DbContext.SaveChanges();
                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                }
            }
            return node.FlowID;
        }

        /// <summary>
        /// 删除节点
        /// </summary>
        /// <param name="nodeID"></param>
        /// <param name="currentUser"></param>
        /// <returns></returns>
        public int DeleteNode(int nodeID, DataModel.EmpSession currentUser)
        {
            var node = this.Get(nodeID);
            if (node == null)
            {
                return 0;
            }
            using (var tran = DbContext.Database.BeginTransaction())
            {
                try
                {
                    var allNodes = this.DbContext.Set<DataModel.Models.DesFlowNode>().Where(m => m.FlowID == node.FlowID && m.DeleterEmpId == 0);
                    if (allNodes.Count() == 1)
                    {
                        throw new Common.JQException("该节点已为最后一个节点，无法删除！");
                    }
                    var previousNode = allNodes.FirstOrDefault(m => m.FlowNodeNextID == node.ID);
                    if (previousNode != null)
                    {
                        previousNode.FlowNodeNextID = node.FlowNodeNextID;
                    }
                    //获取之后的节点
                    var nextNode = allNodes.FirstOrDefault(m => m.ID == node.FlowNodeNextID);
                    while (nextNode != null)
                    {
                        nextNode.FlowNodeOrderNum++;
                        nextNode = allNodes.FirstOrDefault(m => m.ID == nextNode.FlowNodeNextID);
                    }
                    node.DeleterEmpId = currentUser.EmpID;
                    node.DeleterEmpName = currentUser.EmpName;
                    node.DeletionTime = DateTime.Now;
                    if (currentUser.AgenEmpID > 0)
                    {
                        node.AgenDeleterEmpId = currentUser.EmpID;
                        node.AgenDeleterEmpName = currentUser.EmpName;
                    }
                    this.DbContext.SaveChanges();
                    tran.Commit();
                }
                catch
                {
                    tran.Rollback();
                    throw;
                }
            }
            return node.FlowID;
        }
    }
}
