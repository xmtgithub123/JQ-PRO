#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-19 21:50:51
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Web.Script.Serialization;

namespace DBSql.Design
{
    public class DesTaskCheck : EFRepository<DataModel.Models.DesTaskCheck>
    {
        /// <summary>
        /// 校审过程中 查询校审意见
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable DesTaskCheckList(Common.SqlPageInfo condition)
        {
            string RowColumn = " dtc.*,dtca.AttachName ,dtca.Id as CheckAttachID,CheckIsExamine,CheckIsCorrective,dtca.AttachID,CheckIsCorrectiveType,dtca.CheckNodeTypeID   ";
            RowColumn += ",(select BaseName from BaseDataSystem where BaseID=CheckErrTypeID) as CheckErrTypeName ";
            RowColumn += ",isnull((select BaseName from BaseData where BaseID=CheckIsCorrectiveType),'') as CheckIsCorrectiveTypeName ";//修改意见
            RowColumn += ",(select TaskEmpID from DesTask where DesTask.Id=dtc.TaskID) as DesignID ";//设计接收人ID
            RowColumn += ",dtca.AttachVer,dtca.HFNote ";
            //RowColumn += ",isnull((select Top 1 AttachVer from DesTaskAttachEx where DesTaskAttachEx.AttachID=dtca.AttachID order by AttachVer desc),0) as AttachVer "; 
            RowColumn += ",isnull((select Top 1 AttachFlowNode from DesTaskAttachEx where DesTaskAttachEx.AttachID=dtca.AttachID order by AttachVer desc),'') as FlowNodeExXml ";
            RowColumn += ",(select Count(1) from DesTaskCheckImage where DesTaskCheckImage.CheckId=dtc.Id) as ImgCount";//判断是否有截图
            StringBuilder strSql = new StringBuilder();
            strSql.Append(" select Count(1) from DesTaskCheck dtc left join DesTaskCheckAttach dtca on dtc.Id=dtca.CheckId where 1=1  ");
            SqlParameter[] param = {
                                        new SqlParameter("@txtContent",SqlDbType.VarChar),
                                        new SqlParameter("@TaskID",SqlDbType.Int),
            };
            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append("  ");
                param[0].Value = condition.TextCondtion.ToString();
            }
            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "TaskID":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and dtc.TaskID=@TaskID ");
                                param[1].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "otherColumn":
                            if (de.Value.ToString() != "")
                            {

                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = param.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                param = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), param);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = "CheckDate desc,dtc.Id desc";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), param);
        }


        public int InsertDesTaskCheck(DataModel.Models.DesTaskCheck Checkmodel, string AttachIdData)
        {
            int result = 0;
            var _opCheck = new DesTaskCheck();

            using (var tran = this.DbContext.Database.BeginTransaction())
            {
                try
                {
                    Add(Checkmodel);
                    this.DbContext.SaveChanges();

                    var ba = new DBSql.Sys.BaseAttach();
                    ba.DbContextRepository(this.DbContext);
                    ba.MoveFile(Checkmodel.Id, Checkmodel.CheckEmpId, Checkmodel.CheckEmpIDName);

                    //添加 关联附件
                    if (AttachIdData != "")
                    {
                        var attachList = new JavaScriptSerializer().Deserialize<List<DataModel.Models.DesTaskAttachEx>>(AttachIdData);
                        foreach (DataModel.Models.DesTaskAttachEx attach in attachList)
                        {
                            long AttID = attach.AttachId;
                            DataModel.Models.BaseAttach dmAttach = this.DbContext.Set<DataModel.Models.BaseAttach>().FirstOrDefault(p => p.AttachID == AttID);
                            if (dmAttach == null || dmAttach.AttachExt == ".") continue;

                            //节点列表 
                            DataModel.Models.DesTaskCheckAttach DesAttach = new DataModel.Models.DesTaskCheckAttach();
                            DesAttach.CheckId = Checkmodel.Id;
                            DesAttach.AttachID = dmAttach.AttachID;
                            DesAttach.AttachName = dmAttach.AttachName;
                            DesAttach.AttachVer = dmAttach.AttachVer;
                            //获取当前轮到节点
                            var nodeList = new JavaScriptSerializer().Deserialize<List<DBSql.Design.Dto.DesFlowNodeXmlInput>>(attach.AttachFlowNode);
                            var CurrentNode = nodeList.FirstOrDefault(p => p.FlowNodeStatus == "2");
                            if (CurrentNode != null)
                            {
                                DesAttach.CheckNodeID = Convert.ToInt32(CurrentNode.ID);
                                DesAttach.CheckNodeTypeID = Convert.ToInt32(CurrentNode.FlowNodeTypeID);
                            }
                            else
                            {
                                DesAttach.CheckNodeID = 0;
                                DesAttach.CheckNodeTypeID = 0;
                            }

                            DesAttach.CheckIsExamine = false;
                            DesAttach.CheckIsCorrective = false;
                            this.DbContext.Set<DataModel.Models.DesTaskCheckAttach>().Add(DesAttach);
                        }
                    }
                    else
                    {
                        DataModel.Models.DesTaskCheckAttach DesAttach = new DataModel.Models.DesTaskCheckAttach();
                        DesAttach.CheckId = Checkmodel.Id;
                        DesAttach.AttachID = 0;
                        DesAttach.AttachName = "";
                        DesAttach.CheckNodeID = 0;
                        DesAttach.CheckNodeTypeID = 0;
                        DesAttach.CheckIsExamine = false;
                        DesAttach.CheckIsCorrective = false;
                        this.DbContext.Set<DataModel.Models.DesTaskCheckAttach>().Add(DesAttach);
                    }


                    this.DbContext.SaveChanges();
                    tran.Commit();
                    result = Checkmodel.Id;
                }
                catch (Exception e)
                {
                    tran.Rollback();
                    result = -1;
                }
            }
            return result;
        }

        /// <summary>
        /// 删除校审意见
        /// </summary>
        /// <param name="CheckAttachIDs">校审意见关联文件表 主键ID</param>
        /// <returns></returns>
        public int DeleteDesTaskCheck(string CheckAttachIDs)
        {
            int result = 0;
            var IDs = (from n in CheckAttachIDs.Split(',') where n != "" select n).ToArray();
            using (var tran = this.DbContext.Database.BeginTransaction())
            {
                try
                {
                    List<int> checkIDs = new List<int>();
                    //删除关联文件表
                    foreach (string id in IDs)
                    {
                        int IntId = Common.ExtensionMethods.Value<int>(id);
                        DataModel.Models.DesTaskCheckAttach model = this.DbContext.Set<DataModel.Models.DesTaskCheckAttach>().FirstOrDefault(p => p.Id == IntId);
                        if (model != null)
                        {
                            this.DbContext.Set<DataModel.Models.DesTaskCheckAttach>().Remove(model);
                            checkIDs.Add(model.CheckId);
                        }
                    }
                    this.DbContext.SaveChanges();
                    //删除校审意见表
                    foreach (int checkId in checkIDs)
                    {
                        if (this.DbContext.Set<DataModel.Models.DesTaskCheckAttach>().Where(p => p.CheckId == checkId).Count() == 0)
                        {
                            DataModel.Models.DesTaskCheck ckModel = Get(checkId);
                            if (ckModel != null)
                            {
                                Delete(ckModel);

                            }
                        }
                    }
                   
                    this.DbContext.SaveChanges();
                    tran.Commit();
                    result = 1;
                }
                catch (Exception ex)
                {
                    tran.Rollback();
                    result = -1;
                }
            }
            return result;
        }

        /// <summary>
        /// 校审意见是否更新
        /// </summary>
        /// <returns></returns>
        public int UpdateDesTaskAttach(List<DataModel.Models.DesTaskCheckAttach> modelList)
        {
            using (var tran = this.DbContext.Database.BeginTransaction())
            {
                try
                {
                    foreach (var item in modelList)
                    {
                        DataModel.Models.DesTaskCheckAttach UpdateItem = this.DbContext.Set<DataModel.Models.DesTaskCheckAttach>().FirstOrDefault(p => p.Id == item.Id);
                        if (UpdateItem != null)
                        {
                            UpdateItem.CheckIsCorrectiveType = item.CheckIsCorrectiveType;
                            UpdateItem.CheckIsCorrective = item.CheckIsCorrective;
                            UpdateItem.CheckIsExamine = item.CheckIsExamine;
                            UpdateItem.HFNote = item.HFNote;

                            this.DbContext.Entry<DataModel.Models.DesTaskCheckAttach>(UpdateItem).State = System.Data.Entity.EntityState.Modified;
                        }
                    }
                    this.DbContext.SaveChanges();
                    tran.Commit();
                    return 1;
                }
                catch (Exception ex)
                {
                    tran.Rollback();
                    return -1;
                    throw;
                }
            }
        }

        /// <summary>
        /// 校审查询菜单中查询校审意见
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public DataTable GetDesTaskCheckList(Common.SqlPageInfo condition)
        {
            string RowColumn = " p.ProjNumber,p.ProjName,dtg.TaskGroupName,dt.TaskName,dtc.*   ";
            RowColumn += ",(select BaseName from BaseData where BaseID=dtc.PhaseID) as PhaseName ";
            RowColumn += ",(select BaseName from BaseDataSystem where BaseID=dtc.CheckErrTypeID) as ErrorTypeName ";
            RowColumn += ",(select BaseName from BaseData where BaseID=dtc.SpecialID) as SpecialName";
            StringBuilder strSql = new StringBuilder();
            strSql.Append(" select Count(1) from DesTaskCheck dtc  left join Project p on p.Id=dtc.ProjID  ");
            strSql.Append(" left join DesTask dt on dt.Id=dtc.TaskID  ");
            strSql.Append(" left join DesTaskGroup dtg on dtg.Id=dt.TaskGroupId  ");
            strSql.Append("where 1=1 ");
            SqlParameter[] param = {
                                        new SqlParameter("@txtContent",SqlDbType.VarChar),
                                        new SqlParameter("@TaskID",SqlDbType.Int),
                                        new SqlParameter("@QueryDeptID",SqlDbType.Int),
                                        new SqlParameter("@QueryEmpID",SqlDbType.Int),
            };
            if (condition.TextCondtion != null && condition.TextCondtion.ToString() != "")
            {
                strSql.Append(" and  (p.ProjNumber like '%'+@txtContent+'%' or p.ProjName like '%'+@txtContent+'%' or dtg.TaskGroupName like '%'+@txtContent+'%' or dt.TaskName like '%'+@txtContent+'%' ) ");
                param[0].Value = condition.TextCondtion.ToString();
            }
            if (condition.SelectCondtion != null && condition.SelectCondtion.Count > 0)
            {
                foreach (DictionaryEntry de in condition.SelectCondtion)
                {
                    switch (de.Key.ToString())
                    {
                        case "TaskID":
                            if (de.Value.ToString() != "-1")
                            {
                                strSql.Append(" and dtc.TaskID=@TaskID ");
                                param[1].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "QueryDeptID":
                            if (de.Value.ToString()!="")
                            {
                                strSql.Append(" and (select EmpDepID from BaseEmployee where EmpID=dtc.CheckEmpId)=@QueryDeptID ");
                                param[2].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "QueryEmpID":
                            if (de.Value.ToString() != "")
                            {
                                strSql.Append(" and dtc.CheckEmpId=@QueryEmpID ");
                                param[3].Value = Convert.ToInt32(de.Value);
                            }
                            break;
                        case "otherColumn":
                            if (de.Value.ToString() != "")
                            {

                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            //判断PageModel中查询条件是否为空
            if (condition.PredicateValue != null && condition.PredicateValue.Length > 0 && condition.Predicate != "")
            {
                string selectT = "";
                List<SqlParameter> _paramList = param.ToList();
                condition.SetSqlPrams(_paramList, ref selectT);
                param = _paramList.ToArray();
                strSql.Append(selectT);
            }

            //---------------- 得到总记录数-------------------------//
            object obj = DBExecute.ExecuteScalar(DBExecute.ConnectionString, strSql.ToString(), param);

            if (obj == null && obj == DBNull.Value) condition.PageTotleRowCount = 0;
            else condition.PageTotleRowCount = Convert.ToInt32(obj);
            //------------------------------------------------------//

            if (String.IsNullOrEmpty(condition.SelectOrder))
            {
                condition.SelectOrder = "p.Id , dtg.Id ,dtc.SpecialID,dtc.Id ";
            }

            string sql = Helper.SqlPage.ExecPageStrSql(condition, RowColumn, strSql);

            return DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), param);
        }
    }
}
