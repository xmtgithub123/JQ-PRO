#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-19 21:50:51
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
using System.Data.SqlClient;
using System.Data;
using JQ.Util;

namespace DBSql.Design
{
    public class DesExch : EFRepository<DataModel.Models.DesExch>
    {
        private DBSql.Sys.BaseData data = new Sys.BaseData();
        private DBSql.Sys.BaseEmployee emp = new Sys.BaseEmployee();
        /// <summary>
        /// 添加或者修改提资计划信息
        /// </summary>
        /// <param name="desExchModel"></param>
        /// <param name="recModelList">接收列表</param>
        /// <param name="empSession"></param>
        /// <returns></returns>
        public int InsertOrUpdateExchRecData(DataModel.Models.DesExch desExchModel,
            List<DataModel.Models.DesExchRec> recModelList, DataModel.EmpSession empSession, DataModel.EmpSession loginName)
        {
            int result = 0;
            var exch = new DBSql.Design.DesExch();
            var exchRec = new DBSql.Design.DesExchRec();
            exch.DbContextRepository(this.UnitOfWork, this.DbContext);
            exchRec.DbContextRepository(this.UnitOfWork, this.DbContext);
            try
            {
                UnitOfWork.BeginTransaction();//开始
                if (desExchModel.Id == 0)
                {
                    DataModel.Models.DesExch newModels = InsertExchInfo(desExchModel, empSession, loginName);
                    exch.Add(newModels);
                    exch.DbContext.SaveChanges();
                    foreach (DataModel.Models.DesExchRec desExch in recModelList)
                    {
                        desExch.ExchId = newModels.Id;
                        exchRec.Add(desExch);
                    }
                }
                else
                {
                    DataModel.Models.DesExch newModels = UpdateExchInfo(desExchModel, empSession, loginName);
                    exch.Edit(newModels);
                    List<long> RecIDs = recModelList.Where(p => p.Id != 0).Select(p => p.Id).ToList();
                    exchRec.Delete(p => !RecIDs.Contains(p.Id) && p.ExchId == newModels.Id);//删除不再列表中的数据
                    foreach (DataModel.Models.DesExchRec model in recModelList)
                    {
                        if (model.Id > 0)
                        {
                            model.ExchId = newModels.Id;
                            exchRec.Edit(model);
                        }
                        else
                        {
                            model.ExchId = newModels.Id;
                            exchRec.Add(model);
                        }
                    }

                }
                UnitOfWork.CommitTransaction();//提交
                result++;
            }
            catch
            {
                UnitOfWork.RollBackTransaction();//回滚事物 
            }

            return result;
        }

        /// <summary>
        /// 添加信息
        /// </summary>
        /// <param name="oldExchModel"></param>
        /// <param name="empSesion">选定的提资人员</param>
        /// <param name="loginName">当前登录用户</param>
        /// <returns></returns>
        public DataModel.Models.DesExch InsertExchInfo(DataModel.Models.DesExch oldExchModel, DataModel.EmpSession empSesion, DataModel.EmpSession loginName)
        {
            var newExchModel = oldExchModel;
            newExchModel.ExchIsInvalid = true;//有效
            if (empSesion != null)
            {
                newExchModel.ExchEmpDepId = empSesion.EmpDepID;
                newExchModel.ExchEmpDepName = empSesion.EmpDepName;
                newExchModel.ExchEmpId = empSesion.EmpID;
                newExchModel.ExchEmpName = empSesion.EmpName;
            }
            newExchModel.ExchType = 1;//专业内的提资
            if(newExchModel.ExchSpecId==0)
            {
                newExchModel.ExchSpecName = "汇总";
            }
            else
            {
                newExchModel.ExchSpecName = data.Get(newExchModel.ExchSpecId)==null?"": data.Get(newExchModel.ExchSpecId).BaseName;
            }
            Common.ModelConvert.MvcDefaultSave(newExchModel, loginName);
            return newExchModel;
        }


        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="oldExchModel"></param>
        /// <param name="empSession"></param>
        /// <returns></returns>
        public DataModel.Models.DesExch UpdateExchInfo(DataModel.Models.DesExch oldExchModel, DataModel.EmpSession empSession, DataModel.EmpSession loginName)
        {

            var newExchModel = this.Get(oldExchModel.Id);
            newExchModel.ExchTitle = oldExchModel.ExchTitle;
            newExchModel.ExchContent = oldExchModel.ExchContent;
            newExchModel.ExchPriority = oldExchModel.ExchPriority;
            if (empSession != null)//选定的提资人
            {
                newExchModel.ExchEmpDepId = empSession.EmpDepID;
                newExchModel.ExchEmpDepName = empSession.EmpDepName;
                newExchModel.ExchEmpId = empSession.EmpID;
                newExchModel.ExchEmpName = empSession.EmpName;
            }
            if (newExchModel.ExchSpecId == 0)
            {
                newExchModel.ExchSpecName = "汇总";
            }
            else
            {
                newExchModel.ExchSpecName = data.Get(newExchModel.ExchSpecId) == null ? "" : data.Get(newExchModel.ExchSpecId).BaseName;
            }
            Common.ModelConvert.MvcDefaultEdit(newExchModel, loginName);//登陆用户
            return newExchModel;

        }

        /// <summary>
        /// 删除提资数据
        /// </summary>
        /// <param name="list"></param>
        /// <returns></returns>
        public int DeleteExchInfo(List<int> list)
        {
            int result = 0;
            var DesExch = new DBSql.Design.DesExch();
            var DesExchRec = new DBSql.Design.DesExchRec();
            DesExch.DbContextRepository(this.UnitOfWork, this.DbContext);
            DesExchRec.DbContextRepository(this.UnitOfWork, this.DbContext);
            try
            {
                UnitOfWork.BeginTransaction();
                DesExchRec.Delete(p => list.Contains(p.ExchId));//删除收资记录
                DesExch.Delete(p => list.Contains(p.Id));//删除提资料记录
                UnitOfWork.CommitTransaction();
            }
            catch
            {
                UnitOfWork.RollBackTransaction();
            }
            return result;
        }

        /// <summary>
        /// 添加筛选条件
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public Expression<Func<DataModel.Models.DesExch, bool>> GetFunc(Common.SqlPageInfo condition)
        {
            var TWhere = QueryBuild<DataModel.Models.DesExch>.True();
            TWhere = TWhere.And(p => p.ExchType == 1 || p.ExchType == 2);//计划专业内的提资/个人计划外
            #region   筛选条件
            if (!String.IsNullOrEmpty(condition.TextCondtion))
            {
                TWhere = TWhere.And(p => p.ExchContent.Contains(condition.TextCondtion)
                    || p.ExchTitle.Contains(condition.TextCondtion));//关键字筛选按
            }
            foreach (System.Collections.DictionaryEntry de in condition.SelectCondtion)
            {
                if (de.Value == null || de.Value.ToString().Trim() == "") continue;
                if (de.Value.ToString().Trim() == "0") continue;
                switch (de.Key.ToString())
                {
                    case "ExchID":
                        var ExchID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.Id == ExchID);//主键Id查找
                        break;
                    case "DateLower":
                        var DateLower = Common.ModelConvert.ConvertToDefaultType<DateTime>(de.Value);
                        TWhere = TWhere.And(p => p.CreationTime >= DateLower);//发起时间
                        break;
                    case "DateUpper":
                        var DateUpper = Common.ModelConvert.ConvertToDefaultType<DateTime>(de.Value).AddDays(1);
                        TWhere = TWhere.And(p => p.CreationTime < DateUpper);//
                        break;
                    case "ProjId":
                        var EngID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.ProjId == EngID);//根据项目编号
                        break;
                    case "taskGroupId":
                        var taskGroupId = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.taskGroupId == taskGroupId);
                        break;

                    //case "ExchEmpID":
                    //    var ExchEmpID = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                    //    TWhere = TWhere.And(p => p.ExchEmpId == ExchEmpID);//提资人
                    //    break;
                    case "ExchSpecID":
                        int[] ExchSpecID = (from n in de.Value.ToString().Split(',') where n != "" select Common.ExtensionMethods.Value<int>(n)).ToArray();

                        TWhere = TWhere.And(p => ExchSpecID.Contains(p.ExchSpecId));//提资专业
                        break;
                    case "ExchEmpDepId":
                        var ExchEmpDepId = Common.ModelConvert.ConvertToDefaultType<int>(de.Value);
                        TWhere = TWhere.And(p => p.ExchEmpDepId == ExchEmpDepId);
                        break;
                    case "ExchIsInvalid":
                        //失效0，有效1
                        bool IsValid = Common.ModelConvert.ConvertToDefaultType<bool>(de.Value);
                        TWhere = TWhere.And(p => p.ExchIsInvalid == IsValid);
                        break;
                }
            }
            #endregion
            if (String.IsNullOrEmpty(condition.SelectOrder)) condition.SelectOrder = "ExchID desc";//默认倒序
            return TWhere;
        }

        /// <summary>
        /// 根据提资记录ExchId获取附件信息
        /// </summary>
        /// <param name="ExchId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> GetDesTaskAttachData(int ExchId)
        {
            var listDesAttach = (from a in this.DbContext.Set<DataModel.Models.BaseAttach>()
                                 join b in this.DbContext.Set<DataModel.Models.DesExchAttach>()
                                 on a.AttachID equals b.AttachID into temp
                                 from tt in temp.DefaultIfEmpty()
                                 where a.AttachRefTable == "DesExchAttach" && a.AttachRefID == ExchId
                                 orderby a.AttachExt, a.AttachName
                                 select new
                                 {
                                     AttachID = a.AttachID,
                                     _parentId = a.AttachParentID,
                                     AttachName = a.AttachName,
                                     AttachExt = a.AttachExt,
                                     AttachOrderPath = a.AttachOrderPath,
                                     AttachPathIDs = a.AttachPathIDs,
                                     AttachSize = a.AttachSize,
                                     AttachDateUpload = a.AttachDateUpload,
                                     AttachDateChange = a.AttachDateChange,
                                     AttachEmpID = a.AttachEmpID,
                                     AttachEmpName = a.AttachEmpName,
                                     AttachVer = a.AttachVer,
                                     AttachTag = a.AttachTag,
                                     AttachGrade = a.AttachGrade
                                 })
                                .ToList()
                                .Select(a => new
                                {
                                    AttachID = a.AttachID,
                                    _parentId = a._parentId,
                                    AttachName = a.AttachName,
                                    AttachExt = a.AttachExt,
                                    AttachOrderPath = a.AttachOrderPath,
                                    AttachPathIDs = a.AttachPathIDs,
                                    AttachSize = a.AttachSize,
                                    AttachDateUpload = a.AttachDateUpload,
                                    AttachDateChange = a.AttachDateChange,
                                    AttachEmpID = a.AttachEmpID,
                                    AttachEmpName = a.AttachEmpName,
                                    AttachVer = a.AttachVer,
                                    AttachTag = a.AttachTag,
                                    AttachGrade = a.AttachGrade,
                                });
            return listDesAttach;
        }

        public int SendMessage(DataModel.Models.DesExch desExchModel, DataModel.EmpSession empSession, int flowNodeID)
        {
            DataModel.Models.OaMess oaMessModel = new DataModel.Models.OaMess();
            int EmpId = 0;
            string EmpName = string.Empty;
            int result = 0;
            // 获取要发送的人信息
            var flowModel = DbContext.Set<DataModel.Models.Flow>().FirstOrDefault(p => p.FlowRefTable == "DesExch" && p.FlowRefID == desExchModel.Id);
            if (flowModel != null)
            {
                if (flowModel.FlowStatusID != 3)
                {
                    DataModel.Models.FlowNode flowNode = DbContext.Set<DataModel.Models.FlowNode>().FirstOrDefault(p =>
                    p.FlowID == flowModel.Id && p.FlowNodeStatusID == (int)DataModel.NodeStatus.轮到);//当前的轮到人信息
                    if (flowNode != null)
                    {
                        EmpId = flowNode.FlowNodeEmpId;
                        result = 1;
                    }
                }
                else
                {
                    result = 2;//当前审批已经审批完成,无需发送信息
                }
            }
            else
            {
                // 给提资人发信息
                EmpId = desExchModel.ExchEmpId;
                result = 3;
            }
            if (EmpId != 0)
            {
                EmpName = emp.Get(EmpId) == null ? "" : emp.Get(EmpId).EmpName;
            }
            else
            {
                EmpName = "";
            }
            if (result != 2)
            {
                DBSql.Oa.OaMessRead read = new Oa.OaMessRead();
                DBSql.OA.OaMess mess = new OA.OaMess();
                read.DbContextRepository(this.UnitOfWork, this.DbContext);
                read.DbContextRepository(this.UnitOfWork, this.DbContext);
                oaMessModel.MessDate = DateTime.Now;
                oaMessModel.MessEmpId = empSession.EmpID;
                oaMessModel.MessEmpName = empSession.EmpName;
                oaMessModel.MessIsAutoReturn = false;
                oaMessModel.MessIsDeleted = false;
                oaMessModel.MessIsSystem = true;
                oaMessModel.MessLinkTitle = desExchModel.ExchTitle + "[催资]";
                oaMessModel.MessNote = "";
                oaMessModel.MessTitle = desExchModel.ExchTitle + "[" + empSession.EmpName + "--催资]";
                oaMessModel.MessRefID = desExchModel.Id;
                oaMessModel.MessRefTable = "DesExch";
                oaMessModel.MessLinkUrl = string.Format("Design/DesExch/ExchInfoApprove?id={0}&flowNodeID={1}", desExchModel.Id, flowNodeID);//
                try
                {
                    UnitOfWork.BeginTransaction();
                    mess.Add(oaMessModel);
                    mess.DbContext.SaveChanges();
                    DataModel.Models.OaMessRead oaMessRead = new DataModel.Models.OaMessRead();
                    oaMessRead.Id = oaMessModel.Id;
                    oaMessRead.MessReadDate = new DateTime(1900, 1, 1);
                    oaMessRead.MessReadEmpId = EmpId;
                    oaMessRead.MessReadEmpName = EmpName;
                    oaMessRead.MessReadIsDeleted = false;
                    oaMessRead.MessReadNote = oaMessModel.MessTitle;
                    read.Add(oaMessRead);
                    UnitOfWork.CommitTransaction();
                }
                catch
                {
                    UnitOfWork.RollBackTransaction();
                }
            }
            Oa.OaMessRead.CacheRemove();
            var t = JQ.Util.IO.MessageMonitor.NotifyAsync(EmpId, delegate (int empID)
              {
                  return new Oa.OaMessRead().GetNotifyDatas(empID);
              });
            return result;
        }



        /// <summary>
        /// 索要资料(发送 消息)
        /// </summary>
        /// <param name="EmpListID"></param>
        /// <param name="empSession"></param>
        /// <param name="detailContent"></param>
        /// <returns></returns>
        public int AskingExch(List<int> EmpListID, DataModel.EmpSession empSession, string detailContent)
        {
            int Result = 0;
            if (EmpListID.Count == 0)
                return 0;
            DataModel.Models.OaMess oaMessModel = new DataModel.Models.OaMess();
            DBSql.Oa.OaMessRead read = new Oa.OaMessRead();
            DBSql.OA.OaMess mess = new OA.OaMess();
            read.DbContextRepository(this.UnitOfWork, this.DbContext);
            read.DbContextRepository(this.UnitOfWork, this.DbContext);
            oaMessModel.MessDate = DateTime.Now;
            oaMessModel.MessEmpId = empSession.EmpID;
            oaMessModel.MessEmpName = empSession.EmpName;
            oaMessModel.MessIsAutoReturn = false;
            oaMessModel.MessIsDeleted = false;
            oaMessModel.MessIsSystem = true;
            oaMessModel.MessLinkTitle = "[" + empSession.EmpName + "--索资]";
            oaMessModel.MessNote = detailContent;
            oaMessModel.MessTitle = "[" + empSession.EmpName + "--索资]";
            oaMessModel.MessRefTable = "AskingExch";
            oaMessModel.MessLinkUrl = string.Format("Design/DesExch/AddExchPlan");
            try
            {
                UnitOfWork.BeginTransaction();
                mess.Add(oaMessModel);
                mess.DbContext.SaveChanges();
                foreach (int EmpId in EmpListID)
                {
                    DataModel.Models.OaMessRead oaMessRead = new DataModel.Models.OaMessRead();
                    oaMessRead.Id = oaMessModel.Id;
                    oaMessRead.MessReadDate = new DateTime(1900, 1, 1);
                    oaMessRead.MessReadEmpId = EmpId;
                    oaMessRead.MessReadEmpName = emp.Get(EmpId) == null ? "" : emp.Get(EmpId).EmpName;
                    oaMessRead.MessReadIsDeleted = false;
                    oaMessRead.MessReadNote = oaMessModel.MessNote;
                    read.Add(oaMessRead);
                }
                UnitOfWork.CommitTransaction();
                Result++;
            }
            catch
            {
                UnitOfWork.RollBackTransaction();
            }
            Oa.OaMessRead.CacheRemove();
            var t = JQ.Util.IO.MessageMonitor.NotifyAsync(EmpListID, delegate (int empID)
            {
                return new Oa.OaMessRead().GetNotifyDatas(empID);
            });

            return Result; ;
        }


        /// <summary>
        /// 根据提资Id查找正在进行的节点ID
        /// </summary>
        /// <param name="ExchId"></param>
        /// <returns></returns>
        public int FindApprovingNodeId(int ExchId)
        {
            int flowNodeId = 0;
            DataModel.Models.DesExch model = this.Get(ExchId);
            if (model != null)
            {
                var flowModel = DbContext.Set<DataModel.Models.Flow>().FirstOrDefault(p => p.FlowRefTable == "DesExch" && p.FlowRefID == ExchId);
                if (flowModel != null)
                {
                    if (flowModel.FlowStatusID != 3)
                    {
                        DataModel.Models.FlowNode flowNode = DbContext.Set<DataModel.Models.FlowNode>().FirstOrDefault(p =>
                        p.FlowID == flowModel.Id && p.FlowNodeStatusID == (int)DataModel.NodeStatus.轮到);//当前的轮到人信息
                        if (flowNode != null)
                        {
                            flowNodeId = flowNode.Id;
                        }
                    }
                }
            }
            return flowNodeId;
        }

        /// <summary>
        /// 判断某人的权限资质
        /// </summary>
        /// <param name="QualiId"></param>
        /// <param name="empSession"></param>
        /// <returns></returns>
        public bool IsQualification(int QualiId, DataModel.EmpSession empSession)
        {
            bool IsQual = false;
            IEnumerable<DBSql.Sys.EmpQualification> list = new DBSql.Sys.BaseQualification().GetQualificationEmployee(QualiId, 0, 0, empSession.EmpID);
            if (list.Count() > 0)
            {
                IsQual = true;
            }

            return IsQual;
        }

        /// <summary>
        /// 获取此人员有此资质的所有专业（人员所负责当前权限的所有专业）
        /// </summary>
        /// <param name="QualiId"></param>
        /// <param name="empSession"></param>
        /// <returns></returns>
        public List<int> QualificationSpec(int QualiId, DataModel.EmpSession empSession)
        {
            List<int> list = new List<int>();
            if (IsQualification(QualiId, empSession))
            {
                list = new DBSql.Sys.BaseQualification().GetQualificationEmployee(QualiId, 0, 0, empSession.EmpID).Select(p => p.QualificationSpecID).ToList();
            }
            return list;
        }

        public IEnumerable<dynamic> GetDesTaskAttachVerByExch(int ExchId)
        {
            string sql = @"
                -- 获取 提资附件（不包含文件夹节点信息）
                SELECT 
                        ROW_NUMBER() OVER (PARTITION BY bat.ATTACHNAME,bat.ATTACHEXT,bat.ATTACHPARENTId order by bat.AttachOrderNum desc) as Num,
                        ba.AttachID ,
                        bat.AttachParentID AS _parentId,
                        bat.AttachName ,
                        bat.AttachExt ,
                        bat.AttachOrderPath ,
                        bat.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        bat.AttachVer ,
                        bat.AttachTag ,
                        bat.AttachGrade 
                INTO    #approveAttach
                FROM    BaseAttach AS bat
                        INNER JOIN BaseAttachVer ba on ba.AttachID=bat.AttachID  AND ba.AttachVer=bat.AttachVer
                        INNER JOIN DesExchAttach ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer

                WHERE   1=1
                        ---AND bat.AttachId IN (SELECT ID FROM dbo.split(@SelIds, ','))
                        AND bat.AttachExt <> '.'
                        AND bat.AttachRefTable='DesTaskAttach'
                        AND ta.ExchId=@ExchId ";

            sql += @"
                -- 取得提资附件的父节点信息（即文件夹）
                DECLARE @approveAttachPathIds VARCHAR(MAX)
                SET @approveAttachPathIds = (SELECT    AttachPathIDs + ','
                                                FROM      #approveAttach
                                                WHERE     AttachPathIDs <> ''
                                            FOR
                                                XML PATH('')
                                            )

                SELECT a.*
                FROM(
                    SELECT    
                        ba.AttachID,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName,
                        ba.AttachExt,
                        ba.AttachOrderPath,
                        ba.AttachPathIDs,
                        ba.AttachSize,
                        ba.AttachDateUpload,
                        ba.AttachDateChange,
                        ba.AttachEmpID,
                        ba.AttachEmpName,
                        ba.AttachVer,
                        ba.AttachTag,
                        ba.AttachGrade
                    FROM      BaseAttach AS ba
                    WHERE     ba.AttachID IN(
                            SELECT  ID
                            FROM    dbo.Split(@approveAttachPathIds, ','))

                    UNION ALL

                    SELECT    ba.AttachID,
                            ba._parentId,
                            ba.AttachName,
                            ba.AttachExt,
                            ba.AttachOrderPath,
                            ba.AttachPathIDs,
                            ba.AttachSize,
                            ba.AttachDateUpload,
                            ba.AttachDateChange,
                            ba.AttachEmpID,
                            ba.AttachEmpName,
                            ba.AttachVer,
                            ba.AttachTag,
                            ba.AttachGrade
                    FROM      #approveAttach AS ba
                    WHERE ba.Num=1 
                ) AS a
                ORDER BY a.AttachExt, a.AttachOrderPath

                IF OBJECT_ID('tempdb..#approveAttach') IS NOT NULL
                    BEGIN
                        DROP TABLE #approveAttach
                    END
            ";

            SqlParameter[] paras = {
                new SqlParameter("@ExchId",SqlDbType.Int)
            };
            paras[0].Value = ExchId;
            //paras[1].Value = SelIds;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var row = dt.AsEnumerable().Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
            });

            return row;
        }

        /// <summary>
        /// 将选中的数据插入到提资附件表信息中
        /// </summary>
        /// <param name="ExchId"></param>
        /// <param name="SelIds"></param>
        /// <returns></returns>
        public int InsertExchAttach(int ExchId, string SelIds)
        {
            int result = 0;
            string sql = @"
                -- 获取 提资附件提资附件列表中不包含的文件（不包含文件夹节点信息）
                SELECT  ba.AttachID ,
                        bat.AttachParentID AS _parentId,
                        bat.AttachName ,
                        bat.AttachExt ,
                        bat.AttachOrderPath ,
                        bat.AttachPathIDs ,
                        ba.AttachSize ,
                        ba.AttachDateUpload ,
                        ba.AttachDateChange ,
                        ba.AttachEmpID ,
                        ba.AttachEmpName ,
                        ba.AttachVer ,
                        bat.AttachTag ,
                        bat.AttachGrade 
                INTO    #approveAttach
                FROM    BaseAttachVer AS ba
                        LEFT JOIN DesExchAttach ta ON ba.AttachID = ta.AttachId AND ba.AttachVer = ta.AttachVer AND ta.ExchId=@ExchId
                        LEFT JOIN BaseAttach bat on ba.AttachID=bat.AttachID  AND ba.AttachVer=bat.AttachVer
                WHERE   1=1
                        AND bat.AttachId IN (SELECT ID FROM dbo.split(@SelIds, ','))
                        AND bat.AttachExt <> '.' 
                        AND ta.Id IS NULL";

            // 展示文件夹的信息在查询中处理（只将 文件附件 插入提取资附件表中）
            sql += @"
                
                    INSERT INTO DesExchAttach
                    (
                         ExchId,
                         AttachID,
                         AttachVer
                    )
                    SELECT    @ExchId,
                              ba.AttachID,
                              ba.AttachVer
                    FROM      #approveAttach AS ba
                

                IF OBJECT_ID('tempdb..#approveAttach') IS NOT NULL
                    BEGIN
                        DROP TABLE #approveAttach
                    END
            ";

            SqlParameter[] paras = {
                new SqlParameter("@ExchId",SqlDbType.Int),
                new SqlParameter("@SelIds",SqlDbType.VarChar)
            };
            paras[0].Value = ExchId;
            paras[1].Value = SelIds;
            result = DBExecute.ExecuteNonQuery(sql, paras);
            return result;
        }

        /// <summary>
        ///  获取设计文件附件
        /// </summary>
        /// <param name="taskId"></param>
        /// <returns></returns>
        public IEnumerable<dynamic> DesignAttachByTask(long taskId)
        {
            string sql = @"
                -- 获取 设计附件（不包含文件夹节点信息）
                SELECT  
                        ROW_NUMBER() OVER (PARTITION BY bat.ATTACHNAME,bat.ATTACHEXT,bat.ATTACHPARENTId order by bat.AttachOrderNum desc) as Num,
                        bat.AttachID ,
                        bat.AttachParentID AS _parentId,
                        bat.AttachName ,
                        bat.AttachExt ,
                        bat.AttachOrderPath ,
                        bat.AttachPathIDs ,
                        bat.AttachSize ,
                        bat.AttachDateUpload ,
                        bat.AttachDateChange ,
                        bat.AttachEmpID ,
                        bat.AttachEmpName ,
                        bat.AttachVer ,
                        bat.AttachTag ,
                        bat.AttachGrade 
                INTO    #approveAttach
                FROM    BaseAttach AS bat
                WHERE   1=1
                        AND bat.AttachExt <> '.'
                        AND bat.AttachRefTable='DesTaskAttach'
                        AND bat.AttachRefID=@taskId ";

            sql += @"
                -- 取得提资附件的父节点信息（即文件夹）
                DECLARE @approveAttachPathIds VARCHAR(MAX)
                SET @approveAttachPathIds = (SELECT    AttachPathIDs + ','
                                                FROM      #approveAttach
                                                WHERE     AttachPathIDs <> ''
                                            FOR
                                                XML PATH('')
                                            )

                SELECT a.*
                FROM(
                    SELECT    
                        ba.AttachID,
                        ba.AttachParentID AS _parentId,
                        ba.AttachName,
                        ba.AttachExt,
                        ba.AttachOrderPath,
                        ba.AttachPathIDs,
                        ba.AttachSize,
                        ba.AttachDateUpload,
                        ba.AttachDateChange,
                        ba.AttachEmpID,
                        ba.AttachEmpName,
                        ba.AttachVer,
                        ba.AttachTag,
                        ba.AttachGrade
                    FROM      BaseAttach AS ba
                    WHERE     ba.AttachID IN(
                            SELECT  ID
                            FROM    dbo.Split(@approveAttachPathIds, ','))

                    UNION ALL

                    SELECT    ba.AttachID,
                            ba._parentId,
                            ba.AttachName,
                            ba.AttachExt,
                            ba.AttachOrderPath,
                            ba.AttachPathIDs,
                            ba.AttachSize,
                            ba.AttachDateUpload,
                            ba.AttachDateChange,
                            ba.AttachEmpID,
                            ba.AttachEmpName,
                            ba.AttachVer,
                            ba.AttachTag,
                            ba.AttachGrade
                    FROM      #approveAttach AS ba
                            Where ba.Num=1
                ) AS a
                ORDER BY a.AttachExt, a.AttachOrderPath

                IF OBJECT_ID('tempdb..#approveAttach') IS NOT NULL
                    BEGIN
                        DROP TABLE #approveAttach
                    END
            ";

            SqlParameter[] paras = {
                new SqlParameter("@taskId",SqlDbType.BigInt)
            };
            paras[0].Value = taskId;

            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql.ToString(), paras);

            var row = dt.AsEnumerable().Select(ba => new
            {
                AttachID = ba.Field<long>("AttachID"),
                _parentId = ba.Field<long>("_parentId"),
                AttachName = ba.Field<string>("AttachName"),
                AttachExt = ba.Field<string>("AttachExt"),
                AttachOrderPath = ba.Field<string>("AttachOrderPath"),
                AttachPathIDs = ba.Field<string>("AttachPathIDs"),
                AttachSize = ba.Field<long>("AttachSize"),
                AttachDateUpload = ba.Field<DateTime>("AttachDateUpload"),
                AttachDateChange = ba.Field<DateTime>("AttachDateChange"),
                AttachEmpID = ba.Field<int>("AttachEmpID"),
                AttachEmpName = ba.Field<string>("AttachEmpName"),
                AttachVer = ba.Field<int>("AttachVer"),
                AttachTag = ba.Field<string>("AttachTag"),
                AttachGrade = ba.Field<int>("AttachGrade"),
            });

            return row;
        }

        /// <summary>
        /// 给提资回退人员发送消息
        /// </summary>
        /// <param name="empssion"></param>
        /// <param name="model"></param>
        /// <param name="EmpIds"></param>
        public void SendExchBack(DataModel.EmpSession empssion, DataModel.Models.DesExch model, int EmpId)
        {
            DataModel.Models.OaMess oaMessModel = new DataModel.Models.OaMess();
            DBSql.Oa.OaMessRead read = new DBSql.Oa.OaMessRead();
            DBSql.OA.OaMess mess = new DBSql.OA.OaMess();
            read.DbContextRepository(this.UnitOfWork, this.DbContext);
            mess.DbContextRepository(this.UnitOfWork, this.DbContext);
            oaMessModel.MessDate = DateTime.Now;
            oaMessModel.MessEmpId = empssion.EmpID;
            oaMessModel.MessEmpName = empssion.EmpName;
            oaMessModel.MessIsAutoReturn = false;
            oaMessModel.MessIsDeleted = false;
            oaMessModel.MessIsSystem = true;
            oaMessModel.MessLinkTitle = model.ExchTitle + "[提资---退回]";
            oaMessModel.MessNote = model.ExchContent;
            oaMessModel.MessTitle = model.ExchTitle + "[提资---退回]";
            oaMessModel.MessRefID = model.Id;
            oaMessModel.MessRefTable = "DesExchBack";
            oaMessModel.MessDialogHeight = 800;
            oaMessModel.MessDialogWidth = 1200;
            int flowNodeId = FindApprovingNodeId(model.Id);
            oaMessModel.MessLinkUrl = string.Format("Design/DesExch/BackExchTaskList?taskId={0}", model.ExchTaskId);//绑定当前设计任务下的和当前人相关的所有需要重提的提资任务
            try
            {
                UnitOfWork.BeginTransaction();
                mess.Add(oaMessModel);
                mess.DbContext.SaveChanges();
                DataModel.Models.OaMessRead oaMessRead = new DataModel.Models.OaMessRead();
                oaMessRead.Id = oaMessModel.Id;
                oaMessRead.MessReadDate = new DateTime(1900, 1, 1);
                oaMessRead.MessReadEmpId = EmpId;
                if (emp.Get(EmpId) != null)
                {
                    oaMessRead.MessReadEmpName = emp.Get(EmpId).EmpName;
                }

                oaMessRead.MessReadIsDeleted = false;
                oaMessRead.MessReadNote = oaMessModel.MessTitle;
                read.Add(oaMessRead);
                UnitOfWork.CommitTransaction();
            }
            catch (Exception ex)
            {
                UnitOfWork.RollBackTransaction();
            }

            DBSql.Oa.OaMessRead.CacheRemove();
            var t = JQ.Util.IO.MessageMonitor.NotifyAsync(EmpId, delegate (int empID)
            {
                return new DBSql.Oa.OaMessRead().GetNotifyDatas(empID);
            });

        }

        /// <summary>
        /// 获取设计人员( 树状结构选人  提资使用)
        /// </summary>
        /// <param name="TaskGroupId"></param>
        /// <returns></returns>
        public DataTable GetDesignPersonByTaskGroupId(long TaskGroupId)
        {
            int DesignType = (int)DataModel.NodeType.设计;  //设计节点
            string sql =
               @"     SELECT distinct  s.TaskName  AS SpecName,"
               + "      s.TaskSpecId AS SpecId,"
               + "      f.node.value('./@FlowNodeEmpID', 'int') AS EmpID,"
               + "      f.node.value('./@FlowNodeEmpName', 'nvarchar(50)') AS EmpName"
               + "      FROM dbo.DesTask AS t"
               + "     INNER JOIN dbo.DesTask AS s ON t.TaskSpecId = s.TaskSpecId AND s.TaskType = 1 AND s.TaskGroupId = @TaskGroupId"
               + "     CROSS APPLY t.TaskFlowModel.nodes('root/item[@FlowNodeTypeID=sql:variable(\"@DesignType\")]')"
               + "     AS f (node)"
               + "     WHERE   t.DeleterEmpId = 0"
               + "     AND t.TaskType = 0"                // 任务类型： 0 普通任务 1 专业任务
               + "     AND t.TaskSpecId <> 0"            //  排除汇总专业
               + "     AND t.TaskLevelType IN(0, 1)"    // 层级类型：0 无层级 1 子层级 2 父层级
                                                        //AND t.TaskStatus IN(3)      -- 任务状态：0 未安排（灰） 1 已安排（黄） 2 进行中（绿色） 3 完成（蓝色） 4 回退（红色）
               + "     AND t.TaskGroupId = @TaskGroupId"
               + "     ORDER BY s.TaskSpecId";
            SqlParameter[] paramters = {
                new SqlParameter("@TaskGroupId",SqlDbType.BigInt,8),
                new SqlParameter("@DesignType",SqlDbType.Int)
            };
            paramters[0].Value = TaskGroupId;
            paramters[1].Value = DesignType;
            DataTable dt = DBExecute.ExecuteDataTable(DBExecute.ConnectionString, sql, paramters);
            return dt;
        }

        /// <summary>
        /// 根据当前的项目获取所有的设计人员
        /// </summary>
        /// <param name="ProjId"></param>
        /// <returns></returns>
        public DataTable GetDesignEmpListByProjId(int ProjId)
        {
            List<long> TaskGroupList = new List<long>();
            DBSql.Design.DesTask task = new Design.DesTask();
            TaskGroupList = task.GetList(p => p.ProjId == ProjId && p.DeleterEmpId == 0 &&
            p.TaskType == 0 && p.TaskSpecId != 0 && (p.TaskLevelType == 0 || p.TaskLevelType == 1)).Select(p => p.TaskGroupId).Distinct().ToList();

            DataTable mergeTable = new DataTable();
            foreach (long Taskgroup in TaskGroupList)
            {
                DataTable data = GetDesignPersonByTaskGroupId(Taskgroup);
                mergeTable.Merge(data, true);
            }
            return mergeTable;
        }
    }
}
