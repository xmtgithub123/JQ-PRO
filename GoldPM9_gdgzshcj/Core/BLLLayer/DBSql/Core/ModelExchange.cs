#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-07-12 14:56:40
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Common.Data;
using Common.Data.Extenstions;
using DAL;
namespace DBSql.Core
{
    public class ModelExchange : EFRepository<DataModel.Models.ModelExchange>
    {
        private void ok()
        {
            //this.DbContext.SaveChanges
        }


        public int InsertModelExchange(DataModel.Models.ModelExchange model, string ReciveSpecIDs)
        {
            int success = 0;

            ModelExchangeReceive modelReceive = new ModelExchangeReceive();
            modelReceive.DbContextRepository(this.UnitOfWork, this.DbContext);
            this.UnitOfWork.BeginTransaction();
            try
            {
                Add(model);
                int ExchageID = model.Id;
                string[] array = ReciveSpecIDs.Split(',');
                foreach (string s in array)
                {
                    var Recive = new DataModel.Models.ModelExchangeReceive
                    {
                        Id = ExchageID,
                        ModelReceiveSpecID = int.Parse(s),
                        ModelReceiveNote = "",
                    };
                    modelReceive.Add(Recive); 
                }
            }
            catch
            {
                success = -1;
            }
            this.UnitOfWork.CommitTransaction();
            return success;
        }

        public int UpdateModelExchange(DataModel.Models.ModelExchange model, string ReciveSpecIDs)
        {
            int success = 0;

            ModelExchangeReceive modelReceive = new ModelExchangeReceive();
            modelReceive.DbContextRepository(this.UnitOfWork, this.DbContext);
            this.UnitOfWork.BeginTransaction();

            Edit(model);
            int ExchageID = model.Id;
            string[] array = ReciveSpecIDs.Split(',');
            var TWhere = QueryBuild<DataModel.Models.ModelExchangeReceive>.True();
            TWhere = TWhere.And(p => p.Id == ExchageID);
            try
            {
                modelReceive.Delete(TWhere);
                foreach (string s in array)
                {
                    var Recive = new DataModel.Models.ModelExchangeReceive
                    {
                        Id = ExchageID,
                        ModelReceiveSpecID = int.Parse(s),
                        ModelReceiveNote = "",
                    };
                    modelReceive.Add(Recive);
                }
            }
            catch
            {
                success = -1;
            }
            this.UnitOfWork.CommitTransaction();
            return success;
        }


        public int DeleteModelExchange(int[] ExchangeIDList)
        {
            int success = 0;
            ModelExchangeReceive modelReceive = new ModelExchangeReceive();
            ModelExchange model = new ModelExchange();
            var TWhere = QueryBuild<DataModel.Models.ModelExchange>.True();
            TWhere = TWhere.And(p => ExchangeIDList.Contains(p.Id));

            var TWhereReceive = QueryBuild<DataModel.Models.ModelExchangeReceive>.True();
            TWhereReceive = TWhereReceive.And(p => ExchangeIDList.Contains(p.Id));
            modelReceive.DbContextRepository(UnitOfWork, DbContext);
            this.UnitOfWork.BeginTransaction();
            modelReceive.Delete(TWhereReceive);
            Delete(TWhere);

            this.UnitOfWork.CommitTransaction();
            return success;
        }
         
    }
}
