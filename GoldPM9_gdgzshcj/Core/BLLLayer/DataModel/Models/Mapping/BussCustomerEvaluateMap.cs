#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2016-09-06 20:09:48
#endregion
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
namespace DataModel.Models.Mapping
{
public class BussCustomerEvaluateMap : EntityTypeConfiguration<BussCustomerEvaluate>
    {
        public BussCustomerEvaluateMap()
        {
			this.HasKey(t => new { t.Id}); 
				  
			this.Property(t => t.CustID).IsRequired();
	  
			this.Property(t => t.ProjID).IsRequired();
	  
			this.Property(t => t.ReceiveEmpIDs).IsRequired();
	  
			this.Property(t => t.EvaluaterNote).IsRequired().HasMaxLength(1000);
	  
			this.Property(t => t.LastModificationTime).IsRequired();
	  
			this.Property(t => t.LastModifierEmpId).IsRequired();
	  
			this.Property(t => t.LastModifierEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.OutstandingNote).IsRequired().HasMaxLength(2000);
	  
			this.Property(t => t.MainOutstanding).IsRequired().HasMaxLength(2000);
	  
			this.Property(t => t.AptitudeCondition).IsRequired().HasMaxLength(2000);
	  
			this.Property(t => t.ManageSystem).IsRequired().HasMaxLength(2000);
	  
			this.Property(t => t.AwardCondition).IsRequired().HasMaxLength(2000);
	  
			this.Property(t => t.OperateCondition).IsRequired().HasMaxLength(2000);
	  
			this.Property(t => t.EvaluateConclusion).IsRequired().HasMaxLength(2000);
	  
			this.Property(t => t.FlowID).IsRequired();
	  
			this.Property(t => t.FlowTime).IsRequired();
	  
			this.Property(t => t.AgenEmpId).IsRequired();
	  
			this.Property(t => t.AgenEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.CreationTime).IsRequired();
	  
			this.Property(t => t.CreatorEmpId).IsRequired();
	  
			this.Property(t => t.CreatorEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.CreatorDepId).IsRequired();
	  
			this.Property(t => t.CreatorDepName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.EvaluationTypeID).IsRequired();
	  
			this.Property(t => t.CustNumber).IsRequired().HasMaxLength(200);


			 // Table & Column Mappings
			this.ToTable("BussCustomerEvaluate");
			this.Property(t => t.Id).HasColumnName("Id");
			this.Property(t => t.CustID).HasColumnName("CustID");
			this.Property(t => t.ProjID).HasColumnName("ProjID");
			this.Property(t => t.ReceiveEmpIDs).HasColumnName("ReceiveEmpIDs");
			this.Property(t => t.EvaluaterNote).HasColumnName("EvaluaterNote");
			this.Property(t => t.LastModificationTime).HasColumnName("LastModificationTime");
			this.Property(t => t.LastModifierEmpId).HasColumnName("LastModifierEmpId");
			this.Property(t => t.LastModifierEmpName).HasColumnName("LastModifierEmpName");
			this.Property(t => t.OutstandingNote).HasColumnName("OutstandingNote");
			this.Property(t => t.MainOutstanding).HasColumnName("MainOutstanding");
			this.Property(t => t.AptitudeCondition).HasColumnName("AptitudeCondition");
			this.Property(t => t.ManageSystem).HasColumnName("ManageSystem");
			this.Property(t => t.AwardCondition).HasColumnName("AwardCondition");
			this.Property(t => t.OperateCondition).HasColumnName("OperateCondition");
			this.Property(t => t.EvaluateConclusion).HasColumnName("EvaluateConclusion");
			this.Property(t => t.FlowID).HasColumnName("FlowID");
			this.Property(t => t.FlowTime).HasColumnName("FlowTime");
			this.Property(t => t.AgenEmpId).HasColumnName("AgenEmpId");
			this.Property(t => t.AgenEmpName).HasColumnName("AgenEmpName");
			this.Property(t => t.CreationTime).HasColumnName("CreationTime");
			this.Property(t => t.CreatorEmpId).HasColumnName("CreatorEmpId");
			this.Property(t => t.CreatorEmpName).HasColumnName("CreatorEmpName");
			this.Property(t => t.CreatorDepId).HasColumnName("CreatorDepId");
			this.Property(t => t.CreatorDepName).HasColumnName("CreatorDepName");
			this.Property(t => t.EvaluationTypeID).HasColumnName("EvaluationTypeID");
			this.Property(t => t.CustNumber).HasColumnName("CustNumber");
			           
			#region Relationships
			this.HasRequired(t => t.FK_BussCustomerEvaluate_CustID).WithMany(t => t.FK_BussCustomerEvaluate_CustID).HasForeignKey(d => d.CustID);
			#endregion
        }
    }
}  
