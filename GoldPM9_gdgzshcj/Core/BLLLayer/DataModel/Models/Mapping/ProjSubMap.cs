#region <auto-generated>
//此代码由T4模板自动生成 
//生成时间 2017-04-21 09:45:30
#endregion
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
namespace DataModel.Models.Mapping
{
public class ProjSubMap : EntityTypeConfiguration<ProjSub>
    {
        public ProjSubMap()
        {
			this.HasKey(t => new { t.Id}); 
				  
			this.Property(t => t.TableNumber).IsRequired().HasMaxLength(500);
	  
			this.Property(t => t.ProjID).IsRequired();
	  
			this.Property(t => t.ConSubID).IsRequired();
	  
			this.Property(t => t.SubNumber).IsRequired().HasMaxLength(200);
	  
			this.Property(t => t.SubName).IsRequired().HasMaxLength(4000);
	  
			this.Property(t => t.SubType).IsRequired();
	  
			this.Property(t => t.SubHZSJ).IsRequired().HasMaxLength(1000);
	  
			this.Property(t => t.SubFee).IsRequired().HasPrecision(18,4);
	  
			this.Property(t => t.SubPlanFinishDate).IsRequired();
	  
			this.Property(t => t.SubFactFinishDate).IsRequired();
	  
			this.Property(t => t.SubPhase).IsRequired().HasMaxLength(100);
	  
			this.Property(t => t.SubSpecial).IsRequired().HasMaxLength(100);
	  
			this.Property(t => t.SubEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.SubEmpId).IsRequired();
	  
			this.Property(t => t.SubReason).IsRequired().HasMaxLength(500);
	  
			this.Property(t => t.SubContent).IsRequired().HasMaxLength(500);
	  
			this.Property(t => t.SubAcceptance).IsRequired().HasMaxLength(500);
	  
			this.Property(t => t.SubCustName).IsRequired().HasMaxLength(200);
	  
			this.Property(t => t.SubCustLinkMan).IsRequired().HasMaxLength(200);
	  
			this.Property(t => t.SubCustLinkTel).IsRequired().HasMaxLength(200);
	  
			this.Property(t => t.SubCustLinkWeb).IsRequired().HasMaxLength(200);
	  
			this.Property(t => t.SubQualifiedDirectory).IsRequired().HasMaxLength(200);
	  
			this.Property(t => t.FlowID).IsRequired();
	  
			this.Property(t => t.FlowTime).IsRequired();
	  
			this.Property(t => t.CreationTime).IsRequired();
	  
			this.Property(t => t.CreatorEmpId).IsRequired();
	  
			this.Property(t => t.CreatorEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.CreatorDepId).IsRequired();
	  
			this.Property(t => t.CreatorDepName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.LastModificationTime).IsRequired();
	  
			this.Property(t => t.LastModifierEmpId).IsRequired();
	  
			this.Property(t => t.LastModifierEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.AgenCreatorEmpId).IsRequired();
	  
			this.Property(t => t.AgenCreatorEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.AgenLastModifierEmpId).IsRequired();
	  
			this.Property(t => t.AgenLastModifierEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.AgenDeleterEmpId).IsRequired();
	  
			this.Property(t => t.AgenDeleterEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.DeleterEmpId).IsRequired();
	  
			this.Property(t => t.DeleterEmpName).IsRequired().HasMaxLength(50);
	  
			this.Property(t => t.DeletionTime).IsRequired();
	  
			this.Property(t => t.ColAttType1).IsRequired();
	  
			this.Property(t => t.ColAttType2).IsRequired();
	  
			this.Property(t => t.ColAttVal1).IsRequired().HasMaxLength(500);
	  
			this.Property(t => t.ColAttVal2).IsRequired().HasMaxLength(100);
	  
			this.Property(t => t.ColAttDate1).IsRequired();
	  
			this.Property(t => t.ColAttDate2).IsRequired();
	  
			this.Property(t => t.ColAttDate5).IsRequired();
	  
			this.Property(t => t.ColAttDate3).IsRequired();
	  
			this.Property(t => t.ColAttDate4).IsRequired();
	  
			this.Property(t => t.ColAttFloat1).IsRequired().HasPrecision(18,2);
	  
			this.Property(t => t.ColAttFloat2).IsRequired().HasPrecision(18,2);
	  
			this.Property(t => t.CompanyID).IsRequired();
			this.Property(t => t.YGMoney).IsRequired();


			 // Table & Column Mappings
			this.ToTable("ProjSub");
			this.Property(t => t.Id).HasColumnName("Id");
			this.Property(t => t.TableNumber).HasColumnName("TableNumber");
			this.Property(t => t.ProjID).HasColumnName("ProjID");
			this.Property(t => t.ConSubID).HasColumnName("ConSubID");
			this.Property(t => t.SubNumber).HasColumnName("SubNumber");
			this.Property(t => t.SubName).HasColumnName("SubName");
			this.Property(t => t.SubType).HasColumnName("SubType");
			this.Property(t => t.SubHZSJ).HasColumnName("SubHZSJ");
			this.Property(t => t.SubFee).HasColumnName("SubFee");
			this.Property(t => t.SubPlanFinishDate).HasColumnName("SubPlanFinishDate");
			this.Property(t => t.SubFactFinishDate).HasColumnName("SubFactFinishDate");
			this.Property(t => t.SubPhase).HasColumnName("SubPhase");
			this.Property(t => t.SubSpecial).HasColumnName("SubSpecial");
			this.Property(t => t.SubEmpName).HasColumnName("SubEmpName");
			this.Property(t => t.SubEmpId).HasColumnName("SubEmpId");
			this.Property(t => t.SubReason).HasColumnName("SubReason");
			this.Property(t => t.SubContent).HasColumnName("SubContent");
			this.Property(t => t.SubAcceptance).HasColumnName("SubAcceptance");
			this.Property(t => t.SubCustName).HasColumnName("SubCustName");
			this.Property(t => t.SubCustLinkMan).HasColumnName("SubCustLinkMan");
			this.Property(t => t.SubCustLinkTel).HasColumnName("SubCustLinkTel");
			this.Property(t => t.SubCustLinkWeb).HasColumnName("SubCustLinkWeb");
			this.Property(t => t.SubQualifiedDirectory).HasColumnName("SubQualifiedDirectory");
			this.Property(t => t.FlowID).HasColumnName("FlowID");
			this.Property(t => t.FlowTime).HasColumnName("FlowTime");
			this.Property(t => t.CreationTime).HasColumnName("CreationTime");
			this.Property(t => t.CreatorEmpId).HasColumnName("CreatorEmpId");
			this.Property(t => t.CreatorEmpName).HasColumnName("CreatorEmpName");
			this.Property(t => t.CreatorDepId).HasColumnName("CreatorDepId");
			this.Property(t => t.CreatorDepName).HasColumnName("CreatorDepName");
			this.Property(t => t.LastModificationTime).HasColumnName("LastModificationTime");
			this.Property(t => t.LastModifierEmpId).HasColumnName("LastModifierEmpId");
			this.Property(t => t.LastModifierEmpName).HasColumnName("LastModifierEmpName");
			this.Property(t => t.AgenCreatorEmpId).HasColumnName("AgenCreatorEmpId");
			this.Property(t => t.AgenCreatorEmpName).HasColumnName("AgenCreatorEmpName");
			this.Property(t => t.AgenLastModifierEmpId).HasColumnName("AgenLastModifierEmpId");
			this.Property(t => t.AgenLastModifierEmpName).HasColumnName("AgenLastModifierEmpName");
			this.Property(t => t.AgenDeleterEmpId).HasColumnName("AgenDeleterEmpId");
			this.Property(t => t.AgenDeleterEmpName).HasColumnName("AgenDeleterEmpName");
			this.Property(t => t.DeleterEmpId).HasColumnName("DeleterEmpId");
			this.Property(t => t.DeleterEmpName).HasColumnName("DeleterEmpName");
			this.Property(t => t.DeletionTime).HasColumnName("DeletionTime");
			this.Property(t => t.ColAttType1).HasColumnName("ColAttType1");
			this.Property(t => t.ColAttType2).HasColumnName("ColAttType2");
			this.Property(t => t.ColAttVal1).HasColumnName("ColAttVal1");
			this.Property(t => t.ColAttVal2).HasColumnName("ColAttVal2");
			this.Property(t => t.ColAttDate1).HasColumnName("ColAttDate1");
			this.Property(t => t.ColAttDate2).HasColumnName("ColAttDate2");
			this.Property(t => t.ColAttDate5).HasColumnName("ColAttDate5");
			this.Property(t => t.ColAttDate3).HasColumnName("ColAttDate3");
			this.Property(t => t.ColAttDate4).HasColumnName("ColAttDate4");
			this.Property(t => t.ColAttFloat1).HasColumnName("ColAttFloat1");
			this.Property(t => t.ColAttFloat2).HasColumnName("ColAttFloat2");
			this.Property(t => t.CompanyID).HasColumnName("CompanyID");
			this.Property(t => t.YGMoney).HasColumnName("YGMoney");
			           
			#region Relationships
			this.HasRequired(t => t.FK_ProjSub_ColAttType2).WithMany(t => t.FK_ProjSub_ColAttType2).HasForeignKey(d => d.ColAttType2);
			this.HasRequired(t => t.FK_ProjSub_ConSubID).WithMany(t => t.FK_ProjSub_ConSubID).HasForeignKey(d => d.ConSubID);
			this.HasRequired(t => t.FK_ProjSub_ProjID).WithMany(t => t.FK_ProjSub_ProjID).HasForeignKey(d => d.ProjID);
			this.HasRequired(t => t.FK_ProjSub_SubEmpId).WithMany(t => t.FK_ProjSub_SubEmpId).HasForeignKey(d => d.SubEmpId);
			this.HasRequired(t => t.FK_ProjSub_SubType).WithMany(t => t.FK_ProjSub_SubType).HasForeignKey(d => d.SubType);
			#endregion
        }
    }
}  
